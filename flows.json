[
  {
    "id": "63ec5913b540d2a2",
    "type": "tab",
    "label": "Sensor Ingestion",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "59b6ea3e0dab2122",
    "type": "tab",
    "label": "Weather ingestion",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "e0603b84198efa0a",
    "type": "tab",
    "label": "Tidal ingestion",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "e3941d68335018ed",
    "type": "tab",
    "label": "Gateway ingestion",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "fe39854b38341397",
    "type": "tab",
    "label": "Sensor Provision",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "65e69383a183aa51",
    "type": "tab",
    "label": "Calibration (Night Median)",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "49d4aa47d32b30f6",
    "type": "group",
    "z": "63ec5913b540d2a2",
    "name": "Incoming Messages",
    "style": {
      "label": true
    },
    "nodes": [
      "816fd82a0451d618",
      "eb571e78cd85f70a",
      "20923d20ec88e910",
      "ea8cbeac5dbcd8a6",
      "421b22866c92b131",
      "7a34dea54b35c817",
      "cf5ad217a5345e45",
      "b43cfa81b9314d3c"
    ],
    "x": 134,
    "y": 79,
    "w": 592,
    "h": 262
  },
  {
    "id": "58545360d7955b4b",
    "type": "group",
    "z": "63ec5913b540d2a2",
    "name": "Message Parsing",
    "style": {
      "label": true
    },
    "nodes": [
      "13740863fdc9d238",
      "b10b2f38b737ef92",
      "847b9dd076743050",
      "a1a6cca40ff40590",
      "4b0a1d9dcedab4d0",
      "4e78e8e1cd3dffa7",
      "eb83bf9179f7b4c0",
      "698ea5522a9d3fa2",
      "030599a254594890",
      "3156963a24f356d5",
      "fa04e5bc9d60a061",
      "dc63b3fdfca9e21b",
      "3b863b4807cf0453",
      "071ee8aa8bd88a27",
      "037e6e65201aee12",
      "dd9bc5bb190f5dc0",
      "3b99b5dd48f7315b",
      "6f9ef14b0674fee4"
    ],
    "x": 134,
    "y": 393,
    "w": 1238,
    "h": 608
  },
  {
    "id": "c4537d577aa94bdd",
    "type": "group",
    "z": "63ec5913b540d2a2",
    "name": "Insert Fieldkit",
    "style": {
      "label": true
    },
    "nodes": [
      "8aa5a2865387f144",
      "c6910763e995f76a",
      "3d8a84cc2f94b50e",
      "400d9dcee3aaabc1"
    ],
    "x": 1474,
    "y": 459,
    "w": 712,
    "h": 82
  },
  {
    "id": "7d248c59cea6eb8f",
    "type": "group",
    "z": "63ec5913b540d2a2",
    "name": "Insert Sensor Table",
    "style": {
      "label": true
    },
    "nodes": [
      "a70eea6c2d3ac2ef",
      "de4b529a60542204",
      "15c0295a79c1f759"
    ],
    "x": 1484,
    "y": 799,
    "w": 592,
    "h": 82
  },
  {
    "id": "4aa8585e6cc1a05a",
    "type": "group",
    "z": "63ec5913b540d2a2",
    "name": "Get Deployment Info",
    "style": {
      "label": true
    },
    "nodes": [
      "3f263f0736505839",
      "c5d3a19919464f9a",
      "4d56fb87f74cc417",
      "54748c0a68261926",
      "61bebd9f7ff1dde8",
      "08aa1fc2c62337f9",
      "8080a6d3e1cb9bcc"
    ],
    "x": 754,
    "y": 39,
    "w": 592,
    "h": 262
  },
  {
    "id": "8ac34bda1f02e077",
    "type": "group",
    "z": "59b6ea3e0dab2122",
    "name": "Trigger locations",
    "style": {
      "label": true
    },
    "nodes": [
      "c9f27f5d47a10a45",
      "410c903622f6c8e2",
      "8aa86b86eaddc827",
      "51effb339ea4f74e"
    ],
    "x": 134,
    "y": 579
  },
  {
    "id": "1865cd32a82dbefb",
    "type": "group",
    "z": "59b6ea3e0dab2122",
    "name": "Query OpenWeatherMap",
    "style": {
      "label": true
    },
    "nodes": [
      "4c44e3abc4fcd1eb",
      "e8f6d2b22d197f13",
      "f9137c59125d3c0d",
      "20fd99b272aaccde",
      "f03ba767c129f69b",
      "e45925d81c5ddfda"
    ],
    "x": 444,
    "y": 579
  },
  {
    "id": "d49f1d8b8db525b7",
    "type": "group",
    "z": "59b6ea3e0dab2122",
    "name": "Store results",
    "style": {
      "label": true
    },
    "nodes": [
      "634030652944940b",
      "0193d0cc4010e60f"
    ],
    "x": 754,
    "y": 579
  },
  {
    "id": "3ea6fd44faed79df",
    "type": "group",
    "z": "59b6ea3e0dab2122",
    "name": "Query NWS",
    "style": {
      "label": true
    },
    "nodes": [
      "bba0e1b1684e109b",
      "4c120bcceeb78769",
      "9ad7100c5363a7ec"
    ],
    "x": 454,
    "y": 399
  },
  {
    "id": "e0b909d7e6cfeb76",
    "type": "group",
    "z": "59b6ea3e0dab2122",
    "name": "Trigger locations",
    "style": {
      "label": true
    },
    "nodes": [
      "742bda0e4b0972e6",
      "567665bec1f6ee11"
    ],
    "x": 134,
    "y": 419
  },
  {
    "id": "5b30fca8667a9132",
    "type": "group",
    "z": "59b6ea3e0dab2122",
    "name": "Store results",
    "style": {
      "label": true
    },
    "nodes": [
      "e5a534afcfdc4833",
      "8155fc33af5f6c4d"
    ],
    "x": 754,
    "y": 419
  },
  {
    "id": "b4ee31501a2a5cc6",
    "type": "group",
    "z": "59b6ea3e0dab2122",
    "name": "Query Mesonet",
    "style": {
      "label": true
    },
    "nodes": [
      "62f132ed4b7660a9",
      "bf77b6cbe5bb5efb",
      "b84c28e164baf1e6",
      "c76e21c56c558be6",
      "3f60b54328ff9718",
      "ed9c3a5a7b9aedf2"
    ],
    "x": 454,
    "y": 59
  },
  {
    "id": "ef85790a3a4608f6",
    "type": "group",
    "z": "59b6ea3e0dab2122",
    "name": "Send to Fieldkit",
    "style": {
      "label": true
    },
    "nodes": [
      "ceac54f342a9e889",
      "1948c11829f1050f",
      "821cdc05c82fbd0a"
    ],
    "x": 1054,
    "y": 119
  },
  {
    "id": "10e31bf8eea8dbec",
    "type": "group",
    "z": "59b6ea3e0dab2122",
    "name": "Store results",
    "style": {
      "label": true
    },
    "nodes": [
      "9f175b1da3175ea9"
    ],
    "x": 754,
    "y": 79
  },
  {
    "id": "45f90142088df121",
    "type": "group",
    "z": "59b6ea3e0dab2122",
    "name": "Trigger query params",
    "style": {
      "label": true
    },
    "nodes": [
      "4f87538ceb946c0d"
    ],
    "x": 134,
    "y": 79
  },
  {
    "id": "dd8650625e800ec3",
    "type": "group",
    "z": "e0603b84198efa0a",
    "name": "Send to Fieldkit",
    "style": {
      "label": true
    },
    "nodes": [
      "d6f6b3888bd06c8f",
      "f0ed6eec16d38a64",
      "98d5bacfccca5213",
      "df20dc39e5cd477f"
    ],
    "x": 1014,
    "y": 179
  },
  {
    "id": "71903805cd0d889c",
    "type": "group",
    "z": "e0603b84198efa0a",
    "name": "USGS Tide Query",
    "style": {
      "label": true
    },
    "nodes": [
      "bb63f3f9f599785f",
      "0dca1a125cfcdcdd",
      "ae046715aba47672",
      "f39edec5bd26aecf",
      "9bf57e6249c59ecd"
    ],
    "x": 34,
    "y": 279
  },
  {
    "id": "480b9506fde72aba",
    "type": "group",
    "z": "e0603b84198efa0a",
    "name": "NOAA Tide Query",
    "style": {
      "label": true
    },
    "nodes": [
      "9637d78579cb1b2b",
      "478c541fff4fedfa",
      "690cfc0fd6894019",
      "71134cb878e2e45b",
      "08ce9ebb98a5b0dd"
    ],
    "x": 54,
    "y": 19
  },
  {
    "id": "9352ad6f956a55e5",
    "type": "group",
    "z": "e0603b84198efa0a",
    "name": "Store new Datum records",
    "style": {
      "label": true
    },
    "nodes": [
      "7d0057e8e7cee19f"
    ],
    "x": 1014,
    "y": 79
  },
  {
    "id": "c82e10aebf681f8e",
    "type": "group",
    "z": "e0603b84198efa0a",
    "name": "Get Datum",
    "style": {
      "label": true
    },
    "nodes": [
      "f0109ec522a5bc3d",
      "e08057a01676213c",
      "7d5ef9f277d6d75b"
    ],
    "x": 328,
    "y": 53
  },
  {
    "id": "26e52242665c9700",
    "type": "group",
    "z": "e3941d68335018ed",
    "name": "Get list of gateways",
    "style": {
      "label": true
    },
    "nodes": [
      "6f0b53f20d15d5d8",
      "d08956275a10d893",
      "cb2e8564e10f832a",
      "a333bbcff1929612",
      "c53d8aedbedb0c01"
    ],
    "x": 74,
    "y": 19
  },
  {
    "id": "54b2fd6f819586fd",
    "type": "group",
    "z": "e3941d68335018ed",
    "name": "Store results",
    "style": {
      "label": true
    },
    "nodes": [
      "bdb138bb6fe7fc89",
      "91c134739839b339"
    ],
    "x": 714,
    "y": 139
  },
  {
    "id": "06b2d6dfc4c5fa10",
    "type": "group",
    "z": "e3941d68335018ed",
    "name": "Query gateway stats",
    "style": {
      "label": true
    },
    "nodes": [
      "d55cefb55950509e",
      "f5f13934eb8ab41d",
      "173f3a7cea0eb1df"
    ],
    "x": 414,
    "y": 99
  },
  {
    "id": "4c4f3a4a36bdf543",
    "type": "group",
    "z": "e0603b84198efa0a",
    "name": "Insert Timescale",
    "style": {
      "label": true
    },
    "nodes": [
      "7c3270a21d74c18d",
      "dad809885188fc08"
    ],
    "x": 1004,
    "y": 399
  },
  {
    "id": "8e1edb810a78ebfc",
    "type": "group",
    "z": "59b6ea3e0dab2122",
    "name": "Insert Timescale",
    "style": {
      "label": true
    },
    "nodes": [
      "41021ba21f7ab2ea",
      "15a39f62b35e4b32",
      "267cda52ff074b0c",
      "bc5fec93c252600b"
    ],
    "x": 1224,
    "y": 459
  },
  {
    "id": "70f81c1a84a213ff",
    "type": "group",
    "z": "59b6ea3e0dab2122",
    "style": {
      "stroke": "#999999",
      "stroke-opacity": "1",
      "fill": "none",
      "fill-opacity": "1",
      "label": true,
      "label-position": "nw",
      "color": "#a4a4a4"
    },
    "nodes": [
      "7be1dbe3d89f8555",
      "b30e1006968d3d95",
      "eb85b17b384607e1",
      "57dbb6a784f2eaca"
    ],
    "x": 1214,
    "y": 339
  },
  {
    "id": "1cf976c69d3a9eae",
    "type": "group",
    "z": "fe39854b38341397",
    "name": "Create Device in TTN",
    "style": {
      "label": true
    },
    "nodes": [
      "8972b54cf9c1ada4",
      "1aac4e4668e393a9",
      "5a1b49e415ee35dc",
      "c195ed1d211ff08d",
      "4d07ac4996dc1d74",
      "cc48325095a80a21",
      "11d343eed6225d54",
      "bb968b24ab89c947",
      "561e043bbfa370da",
      "2064f658c826eb1b",
      "75b76071b07f2f23",
      "4829dc56da8fd1d7",
      "fd0171a459e6f5ed",
      "cd641b9e72037852",
      "722304fe9cce61a4",
      "bb94c91755f77f01",
      "a18955d77d8dcc75"
    ],
    "x": 34,
    "y": 39
  },
  {
    "id": "f199da2ee9eab818",
    "type": "group",
    "z": "fe39854b38341397",
    "name": "Remove Device in TTN",
    "style": {
      "label": true
    },
    "nodes": [
      "330e6aa1411bc491",
      "4bf1b91d550a7e66",
      "75bc547a50c24d7f",
      "04f42ae208164718",
      "94cd72125ea59ee9",
      "8d53f43b7fe37105",
      "76258b5d225eef93",
      "24f3e2b4cf9f9bec",
      "489e4891d55db9c8",
      "8cb24cc3cde02efb",
      "0c3df681268e55ce",
      "2227da1c40b541d1",
      "7b34c483c70614a6",
      "b4ddb89eb73e270f",
      "51f7a7d068d61421",
      "1b4c7a76277cce57",
      "0e6bf01e8f93c81f"
    ],
    "x": 34,
    "y": 579
  },
  {
    "id": "9adc6d7359c13beb",
    "type": "group",
    "z": "63ec5913b540d2a2",
    "name": "Insert Timescale",
    "style": {
      "label": true
    },
    "nodes": [
      "5d2cac28a29c5ed6",
      "d4c9d6d5b6d2e143",
      "3b2123d7c7dd611f"
    ],
    "x": 1484,
    "y": 619,
    "w": 582,
    "h": 82
  },
  {
    "id": "83bbbdad52aaa4ce",
    "type": "group",
    "z": "fe39854b38341397",
    "name": "lat long to deployment name query",
    "style": {
      "label": true
    },
    "nodes": [
      "7cc08d9f36ba2acb",
      "bb441687fdbc16c1",
      "149c457e4c868202",
      "a43a206e49d61a13",
      "1dcf11b2e5bebeb4",
      "7b08a7dce836a455",
      "98c65f3e45a46b93",
      "a3e19baa2808cc17",
      "c4024349c6b9e17e",
      "f82a17c2e2a455be",
      "5ab932c7379a007b",
      "32ebb8a8020979af",
      "742fd0ca758c426e",
      "2c42bc741c4c1f58",
      "ce34743f0495640b"
    ],
    "x": 34,
    "y": 939
  },
  {
    "id": "e794c152f8008813",
    "type": "group",
    "z": "fe39854b38341397",
    "name": "azure cross-street rev geocode",
    "style": {
      "label": true
    },
    "nodes": [
      "87a626e75ed5293a",
      "43352a4b209a452f",
      "44a765fc3366ca02",
      "770f9dbf85886698",
      "36d094443c87dd31",
      "85db5203b4cf700b",
      "445ec0d3a1314011",
      "44248f3fd06df86b",
      "9cb52c9249da41a4"
    ],
    "x": 974,
    "y": 359
  },
  {
    "id": "fc41ebbc44e32af4",
    "type": "group",
    "z": "fe39854b38341397",
    "name": "Get Device from TTN",
    "style": {
      "label": true
    },
    "nodes": [
      "7e05410a88fb294a",
      "1daa01f9df6dccb9",
      "2dd0310cf0b80452",
      "cdf98f20a89fc891",
      "cad9920d725d4528",
      "62b8693abdab8ada",
      "dc82d3698ed4a8b3",
      "6bac2e834bbec4b6",
      "00e48a3a2e2532bc",
      "ae2864e069ca751d",
      "cc642b6f259125fa"
    ],
    "x": 34,
    "y": 359
  },
  {
    "id": "44b9cc0aad40ed79",
    "type": "group",
    "z": "65e69383a183aa51",
    "name": "Compute Night Median",
    "style": {
      "label": true
    },
    "nodes": [
      "97a92550bb51b952",
      "93083f815ba539af",
      "0d93778db11fa758",
      "d44fa3133fc3a99e",
      "8744e043d5b34f18",
      "aec269bf5d046e8e",
      "a2443c2774b1616d",
      "f8c82157c0baeb1f"
    ],
    "x": 34,
    "y": 79
  },
  {
    "id": "74f40edae93c2de2",
    "type": "group",
    "z": "fe39854b38341397",
    "name": "Update Fieldkit",
    "style": {
      "label": true
    },
    "nodes": [
      "05306c2848c4de07",
      "a340971b5beb0434",
      "087dbb635efd79a6",
      "4d7c990d3e3d8b5a",
      "66ed7c4c80f4386e",
      "36cd5f343bf51096",
      "cd9cbe4ffaed2441"
    ],
    "x": 974,
    "y": 39
  },
  {
    "id": "f0109ec522a5bc3d",
    "type": "group",
    "z": "e0603b84198efa0a",
    "g": "c82e10aebf681f8e",
    "name": "Query Datum if we don't have it already",
    "style": {
      "label": true
    },
    "nodes": [
      "7c9eefa386d25375",
      "a367f5783c8238ec",
      "560959ca8c8e9232",
      "0f99a1526850ebce",
      "cccf8d3138559f36",
      "e45b81a2eb2be9b4"
    ],
    "x": 674,
    "y": 79
  },
  {
    "id": "e08057a01676213c",
    "type": "group",
    "z": "e0603b84198efa0a",
    "g": "c82e10aebf681f8e",
    "name": "Look for existing Datum",
    "style": {
      "label": true
    },
    "nodes": [
      "61d22faeaf35d53b",
      "7021700bfe7cd70a",
      "3ebc70864470016e",
      "9a598d0b33faea12",
      "52169d2330339a26"
    ],
    "x": 354,
    "y": 179
  },
  {
    "id": "6f9ef14b0674fee4",
    "type": "group",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "Process Flood Sensors",
    "style": {
      "label": true
    },
    "nodes": [
      "5f9f40ecd95922d1",
      "f318171a0ab559ee",
      "96e9dcdc4a2903e4",
      "d417c629faa246db",
      "4c8ddb9156f5c71d",
      "907eb2768e2bb846",
      "8d465086c3ef332a"
    ],
    "x": 974,
    "y": 419,
    "w": 372,
    "h": 282
  },
  {
    "id": "8f7859036b247ff4",
    "type": "mqtt-broker",
    "name": "floodnet-live",
    "broker": "nam1.cloud.thethings.network",
    "port": "8883",
    "tls": "4ad802e2463acc54",
    "clientid": "",
    "autoConnect": true,
    "usetls": true,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  },
  {
    "id": "69a33419a2453bea",
    "type": "mqtt-broker",
    "name": "floodnet-lab",
    "broker": "nam1.cloud.thethings.network",
    "port": "8883",
    "tls": "4ad802e2463acc54",
    "clientid": "",
    "autoConnect": true,
    "usetls": true,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "sessionExpiry": ""
  },
  {
    "id": "16f395ad93e105b8",
    "type": "mqtt-broker",
    "name": "floodnet-test",
    "broker": "nam1.cloud.thethings.network",
    "port": "8883",
    "tls": "4ad802e2463acc54",
    "clientid": "",
    "autoConnect": true,
    "usetls": true,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  },
  {
    "id": "232424bf32c1529c",
    "type": "mqtt-broker",
    "name": "nyu-production",
    "broker": "nam1.cloud.thethings.network",
    "port": "8883",
    "tls": "4ad802e2463acc54",
    "clientid": "",
    "autoConnect": true,
    "usetls": true,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  },
  {
    "id": "ec8702db3a5c2dc7",
    "type": "postgreSQLConfig",
    "name": "timescale",
    "host": "timescale",
    "hostFieldType": "str",
    "port": "5432",
    "portFieldType": "num",
    "database": "postgres",
    "databaseFieldType": "str",
    "ssl": "false",
    "sslFieldType": "bool",
    "applicationName": "",
    "applicationNameType": "str",
    "max": "20",
    "maxFieldType": "num",
    "idle": "1000",
    "idleFieldType": "num",
    "connectionTimeout": "10000",
    "connectionTimeoutFieldType": "num",
    "user": "POSTGRES_USER",
    "userFieldType": "env",
    "password": "POSTGRES_PASS",
    "passwordFieldType": "env"
  },
  {
    "id": "4ad802e2463acc54",
    "type": "tls-config",
    "name": "",
    "cert": "",
    "key": "",
    "ca": "",
    "certname": "",
    "keyname": "",
    "caname": "",
    "servername": "",
    "verifyservercert": true,
    "alpnprotocol": ""
  },
  {
    "id": "816fd82a0451d618",
    "type": "mqtt in",
    "z": "63ec5913b540d2a2",
    "g": "49d4aa47d32b30f6",
    "name": "floodnet-live",
    "topic": "#",
    "qos": "0",
    "datatype": "json",
    "broker": "8f7859036b247ff4",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 230,
    "y": 120,
    "wires": [
      [
        "7a34dea54b35c817"
      ]
    ]
  },
  {
    "id": "eb571e78cd85f70a",
    "type": "mqtt in",
    "z": "63ec5913b540d2a2",
    "g": "49d4aa47d32b30f6",
    "name": "floodnet-lab",
    "topic": "#",
    "qos": "0",
    "datatype": "json",
    "broker": "69a33419a2453bea",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 230,
    "y": 180,
    "wires": [
      []
    ]
  },
  {
    "id": "20923d20ec88e910",
    "type": "mqtt in",
    "z": "63ec5913b540d2a2",
    "g": "49d4aa47d32b30f6",
    "name": "floodnet-test",
    "topic": "#",
    "qos": "0",
    "datatype": "json",
    "broker": "16f395ad93e105b8",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 230,
    "y": 240,
    "wires": [
      []
    ]
  },
  {
    "id": "ea8cbeac5dbcd8a6",
    "type": "mqtt in",
    "z": "63ec5913b540d2a2",
    "g": "49d4aa47d32b30f6",
    "name": "nyu-production",
    "topic": "#",
    "qos": "2",
    "datatype": "json",
    "broker": "232424bf32c1529c",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 240,
    "y": 300,
    "wires": [
      [
        "421b22866c92b131"
      ]
    ]
  },
  {
    "id": "421b22866c92b131",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "49d4aa47d32b30f6",
    "name": "fn -> fs",
    "func": "function hexify(dev_id){\n    let dev_eui = \"\";\n    for (let n=0, l=dev_id.length; n<l; n++) \n         {\n    \t\tvar hex = Number(dev_id.charCodeAt(n)).toString(16);\n    \t\tdev_eui += hex;\n    \t }\n    return dev_eui;\n}\n\nlet mappings = [\n    [\"rg-00002\",\"rg-00002\"],\n    [\"fn-00004\",\"fs-00003\"],\n    [\"fn-00005\",\"fs-00004\"],\n    [\"fn-00012\",\"fs-00009\"],\n    [\"fs-00014\",\"fs-00011\"],\n    // [\"fs-00015\",\"fs-00012\"], // can be removed\n    [\"fs-00016\",\"fs-00013\"],\n    // [\"fs-00017\",\"fs-00014\"], // can be removed\n    [\"fs-00018\",\"fs-00015\"],\n    [\"fs-00019\",\"fs-00016\"],\n    [\"fs-00020\",\"fs-00017\"],\n    [\"fs-00022\",\"fs-00018\"],\n    // [\"fs-00023\",\"fs-00019\"], // can be removed\n    // [\"fs-00024\",\"fs-00020\"] // can be removed\n];\n\nlet old_dev_id = msg.payload.end_device_ids.device_id;\n\nfor (let n=0, l=mappings.length; n<l; n++) {\n    if(mappings[n][0] == old_dev_id){\n        new_dev_id = mappings[n][1];\n        msg.payload.end_device_ids.device_id = new_dev_id;\n        msg.payload.end_device_ids.dev_eui = hexify(new_dev_id);\n        msg.payload.end_device_ids.application_ids.application_id = 'floodnet-live';\n        break;\n    }\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 420,
    "y": 300,
    "wires": [
      [
        "7a34dea54b35c817"
      ]
    ]
  },
  {
    "id": "7a34dea54b35c817",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "49d4aa47d32b30f6",
    "name": "---",
    "func": "return msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 410,
    "y": 240,
    "wires": [
      [
        "cf5ad217a5345e45"
      ]
    ]
  },
  {
    "id": "cf5ad217a5345e45",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "49d4aa47d32b30f6",
    "name": "TTN Parser",
    "func": "if(msg.payload.downlink_nack !== undefined || msg.payload.uplink_message == undefined){\n    // Its a downlink, ignore but should probably log these at some point\n    return;\n}\n\nconst { uplink_message: uplink_info, end_device_ids: dev_info, join_accept } = msg.payload;\nif(!uplink_info || join_accept) return;\n\nconst raw_msg = uplink_info.frm_payload;\nvar b = null;\n\nif (raw_msg){\n    const binary_string = Buffer.from(raw_msg, \"base64\").toString('hex').match(/.{1,2}/g);\n    b = new Uint8Array(binary_string.length);\n    for (var i = 0; i < binary_string.length; i++) {\n        b[i] = parseInt(binary_string[i], 16);\n    }\n}\n\n// Sort gateway data by RSSI strength\nconst lora_gateway_signal_data = (\n    uplink_info.rx_metadata\n        .filter(x => !x.hasOwnProperty('packet_broker'))\n        .sort((a, b) => parseFloat(b.rssi) - parseFloat(a.rssi))\n        .map(d => ({ \n            gw_id: d.gateway_ids.gateway_id,  \n            gw_rssi_dbm: d.rssi,\n            gw_snr_db: d.snr,\n        })\n    )\n)\n\nreturn {\n    ...msg,\n\n    app_name: dev_info.application_ids.application_id,\n    app_type: raw_msg && (\n        dev_info.device_id === \"eui-03a26db322380301\" ? \n            \"sg\" : \n            dev_info.device_id.slice(0, 2)\n    ),\n    timestamp: Date.parse(uplink_info.received_at),\n    \n    dev_addr: dev_info.dev_addr,\n    dev_eui: dev_info.dev_eui,\n    dev_id: dev_info.device_id,\n\n    b,\n    error_flag: b && b[0],\n\n    tables: {\n        // lora signal data\n        lora_transmissions_data: {\n            airtime_ms: Math.round(\n                parseFloat(uplink_info.consumed_airtime.replace('s', '')) * 1000    \n            ),\n            f_cnt: uplink_info.f_cnt,\n            lora_freq_hz: parseInt(uplink_info.settings.frequency),\n            ...lora_gateway_signal_data?.[0],\n            sf: '' + uplink_info.settings.data_rate.lora.spreading_factor,\n            f_port: '' + uplink_info.f_port,\n            bw_hz: '' + uplink_info.settings.data_rate.lora.bandwidth,\n            coding_rate: uplink_info.settings.data_rate.lora.coding_rate,\n            network: 'ttn',\n        },\n\n        lora_gateway_signal_data,\n    }\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 590,
    "y": 240,
    "wires": [
      [
        "b43cfa81b9314d3c",
        "8080a6d3e1cb9bcc"
      ]
    ]
  },
  {
    "id": "13740863fdc9d238",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "flood sensor decode",
    "func": "const { tables, b, night_median, error_flag } = msg;\n\nconst table_name = 'depth_data';\ntables[table_name] = tables[table_name] || {};\nconst data = tables[table_name];\ndata['error_flag'] = error_flag;\n\nconst sensor_table_name = 'lora_sensor_data';\ntables[sensor_table_name] = tables[sensor_table_name] || {};\nconst sensordata = tables[sensor_table_name];\n\nconst weather_table_name = 'weather_data';\ntables[weather_table_name] = tables[weather_table_name] || {};\nconst weatherdata = tables[weather_table_name];\n\n// Converting Error Flag bits\ndata['error_flag'] = '' + b[0] % 2;\n// battery -> mV\nsensordata['batt_mv'] = ((b[2] << 8) | b[1]);\n// distance\ndistance = (b[4] << 8) | b[3];\ndata['dist_mm'] = distance;\n\n// extra fields\nif (b.length > 5){\n    // temperature\n    weatherdata['temp_c'] = ((b[6] & 0x80 ? 0xFFFF<<16 : 0) | b[6]<<8 | b[5]) / 100;\n    // pressure\n    weatherdata['pres_mb'] = ((((b[10]<<24) | (b[9]<<16)) | (b[8]<<8)) | b[7]) / 100;\n    // altitude\n    weatherdata['alt_m'] = ((b[12] << 8) | b[11]) / 100;\n    // humidity\n    weatherdata['humid_percen'] = ((b[14] << 8) | b[13]) / 100;\n}\n\n// convert distance to depth\n// node.warn([msg.dev_id, night_median])\nif(night_median !== undefined) {\n    let depth = night_median - distance;\n    data['depth_raw_mm'] = depth;\n\n    // process depth\n    if (depth <= 10){\n        depth = 0;\n        data['depth_filt_mm'] = 'night_median';\n    }\n    if(depth > night_median) {\n        depth = undefined;\n        data['depth_filt_mm'] = 'night_median';\n    }\n\n    data['depth_filt_mm'] = depth;\n    data['depth_proc_mm'] = depth;\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 760,
    "y": 500,
    "wires": [
      [
        "3b99b5dd48f7315b",
        "d417c629faa246db"
      ]
    ]
  },
  {
    "id": "b10b2f38b737ef92",
    "type": "switch",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "sensor type",
    "property": "app_type",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "fs",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "ts",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "rg",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "sg",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "undefined",
        "vt": "jsonata"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 5,
    "x": 450,
    "y": 600,
    "wires": [
      [
        "13740863fdc9d238",
        "dc63b3fdfca9e21b"
      ],
      [
        "4b0a1d9dcedab4d0",
        "3b863b4807cf0453"
      ],
      [
        "847b9dd076743050",
        "071ee8aa8bd88a27"
      ],
      [
        "030599a254594890",
        "037e6e65201aee12"
      ],
      [
        "a1a6cca40ff40590"
      ]
    ]
  },
  {
    "id": "847b9dd076743050",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "gw rain gauge decode",
    "func": "const table_name = 'depth_bucket_data';\nconst { tables, b, error_flag } = msg;\ntables[table_name] = tables[table_name] || {}\nconst data = tables[table_name];\ndata['error_flag'] = error_flag;\n\ndata['acc_mm'] = Math.round((b[0]|(b[1]<<8)|(b[2]<<16)|(b[3]<<32))/100);\ndata['event_acc_mm'] = Math.round((b[4]|(b[5]<<8)|(b[6]<<16)|(b[7]<<32))/100);\ndata['total_acc_mm'] = Math.round((b[8]|(b[9]<<8)|(b[10]<<16)|(b[11]<<32))/100);\ndata['r_int_hr_mm'] = Math.round((b[12]|(b[13]<<8)|(b[14]<<16)|(b[15]<<32))/100);\ndata['acc_unit'] = String.fromCharCode(b[16]) == 'm' ? 'mm' : 'in';\nif (b.length > 17){\n    data['bucket_acc_mm_min'] = (b[17]|(b[18]<<8))/1000;\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 760,
    "y": 700,
    "wires": [
      [
        "698ea5522a9d3fa2"
      ]
    ]
  },
  {
    "id": "a1a6cca40ff40590",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "unrecognized",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 440,
    "y": 660,
    "wires": []
  },
  {
    "id": "4b0a1d9dcedab4d0",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "tidal sensor decode",
    "func": "const { tables, b, error_flag } = msg;\n\nconst table_name = 'tidal_data';\ntables[table_name] = tables[table_name] || {};\nconst data = tables[table_name];\ndata['error_flag'] = error_flag;\n\nconst sensor_table_name = 'lora_sensor_data';\ntables[sensor_table_name] = tables[sensor_table_name] || {};\nconst sensordata = tables[sensor_table_name];\n\nconst weather_table_name = 'weather_data';\ntables[weather_table_name] = tables[weather_table_name] || {};\nconst weatherdata = tables[weather_table_name];\n\n\n// Converting Error Flag bits\ndata['error_flag'] = '' + b[0] % 2;\n// battery -> mV\nsensordata['batt_mv'] = ((b[2] << 8) | b[1]);\n// distance\ndistance = (b[4] << 8) | b[3];\ndata['dist_mm'] = distance;\n\nif (b.length > 5){\n    // temperature\n    weatherdata['temp_c'] = ((b[6] & 0x80 ? 0xFFFF<<16 : 0) | b[6]<<8 | b[5]) / 100;\n    // pressure\n    weatherdata['pres_mb'] = ((((b[10]<<24) | (b[9]<<16)) | (b[8]<<8)) | b[7]) / 100;\n    // altitude\n    weatherdata['alt_m'] = ((b[12] << 8) | b[11]) / 100;\n    // humidity\n    weatherdata['humid_percen'] = ((b[14] << 8) | b[13]) / 100;\n}\n\n// depth\n// TODO: use global var to store manually inserted MLLW value using NR GUI\n// var night_median = global.get(tags.dev_id + '.night_median');\n// if (night_median !== undefined){\n//     data['depth_mm'] = night_median - distance;\n// }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 750,
    "y": 600,
    "wires": [
      [
        "698ea5522a9d3fa2"
      ]
    ]
  },
  {
    "id": "4e78e8e1cd3dffa7",
    "type": "switch",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "Config Mode",
    "property": "error_flag",
    "propertyType": "msg",
    "rules": [
      {
        "t": "neq",
        "v": "255",
        "vt": "num"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 230,
    "y": 600,
    "wires": [
      [
        "b10b2f38b737ef92"
      ],
      [
        "eb83bf9179f7b4c0"
      ]
    ]
  },
  {
    "id": "eb83bf9179f7b4c0",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "config mode decode",
    "func": "const table_name = 'config_mode_data';\nconst { tables, b } = msg;\ntables[table_name] = tables[table_name] || {};\nconst data = tables[table_name];\n\nconst STATES = {\n    s: \"Sensing\",\n    x: \"CFG Update\",\n    r: \"Reset\",\n}\n\n// Payload is Sensor cfg update\n/*\nCFG update uplink Format:\n| Error Flag  |   sensor_sleep   |    sensor_agg     |   sensor_meas_delta     | sensor_reading_count   |    sensor_state   |    fw_ver       |\n|    255 (FF) |     2 bytes      |      1 byte       |          2 bytes        |          1 byte        |        1 byte     |    6 bytes      |\n\nSensor State:\n|  Start  |   Stop  |  Reset  |\n|   's'   |   'x'   |   'r'   |\n*/\n// Duty cycle\ndata.sensor_sleep_ms = ((b[2]<< 8) | b[1]) * 1000;    \n// Sensor Mode\ndata.sensor_agg = b[3];\n// Sensor Sampling Rate\ndata.sensor_meas_delta_ms = (b[5] << 8) | b[4];\n// Sensor number of readings per measurement\ndata.sensor_reading_count = b[6];\n// Sensor State\ndata.sensor_state = STATES[String.fromCharCode(b[7].toString())];    \n// Firmware Version\nlet major = b[8].toString();\nlet minor = b[9].toString();\nlet patch = b[10].toString();\ndata.fw_ver = \"v\".concat(major,\".\",minor,\".\",patch);\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 460,
    "y": 920,
    "wires": [
      [
        "3156963a24f356d5",
        "dd9bc5bb190f5dc0"
      ]
    ]
  },
  {
    "id": "698ea5522a9d3fa2",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "---",
    "func": "return msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1070,
    "y": 820,
    "wires": [
      [
        "fa04e5bc9d60a061",
        "3b2123d7c7dd611f"
      ]
    ]
  },
  {
    "id": "030599a254594890",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "gw solar decode",
    "func": "const table_name = 'solar_data';\nconst { tables, b, error_flag } = msg;\ntables[table_name] = tables[table_name] || {};\nconst data = tables[table_name];\ndata['error_flag'] = error_flag;\n\nconst sensor_table_name = 'lora_sensor_data';\ntables[sensor_table_name] = tables[sensor_table_name] || {};\nconst sensordata = tables[sensor_table_name];\n\nsensordata['batt_mv'] = ((b[1] << 8) | b[0]);\ndata['current_ma'] = ((b[3] << 8) | b[2]);\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 750,
    "y": 800,
    "wires": [
      [
        "698ea5522a9d3fa2"
      ]
    ]
  },
  {
    "id": "8aa5a2865387f144",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "c4537d577aa94bdd",
    "name": "Fieldkit POST",
    "func": "msg.headers = {};\nmsg.method = \"POST\";\nmsg.url = 'https://api.fieldkit.org/ttn/webhook?token=33af8a9e936d2ec4c217de125ccfc4b9';\nmsg.headers[\"Content-Type\"]=\"application/json\";\n\nif (msg.payload[0].measurement != \"flood-sensor\"){\n    return undefined;\n}\n\nmsg.payload[0].fields.dist_mm = parseInt(msg.payload[0].fields.dist_mm);\nmsg.payload[0].fields.lora_freq_hz = parseInt(msg.payload[0].fields.lora_freq_hz);\nmsg.payload[0].fields.f_cnt = parseInt(msg.payload[0].fields.f_cnt);\nmsg.payload[0].fields.depth_mm = parseInt(msg.payload[0].fields.depth_mm);\nmsg.payload[0].fields.depth_raw_mm = parseInt(msg.payload[0].fields.depth_raw_mm);\nmsg.payload[0].fields.depth_filt_mm = parseInt(msg.payload[0].fields.depth_filt_mm);\nmsg.payload[0].fields.depth_proc_mm = parseInt(msg.payload[0].fields.depth_proc_mm);\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1760,
    "y": 500,
    "wires": [
      [
        "c6910763e995f76a"
      ]
    ]
  },
  {
    "id": "c6910763e995f76a",
    "type": "http request",
    "z": "63ec5913b540d2a2",
    "g": "c4537d577aa94bdd",
    "name": "",
    "method": "use",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 1930,
    "y": 500,
    "wires": [
      [
        "3d8a84cc2f94b50e"
      ]
    ]
  },
  {
    "id": "3d8a84cc2f94b50e",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "c4537d577aa94bdd",
    "name": "HTTP Status",
    "func": "if(msg.statusCode >= 200 && msg.statusCode < 300){\n    msg.response_fail = false;\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 2090,
    "y": 500,
    "wires": [
      []
    ]
  },
  {
    "id": "400d9dcee3aaabc1",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "c4537d577aa94bdd",
    "name": "Prepare insert",
    "func": "return msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1580,
    "y": 500,
    "wires": [
      [
        "8aa5a2865387f144"
      ]
    ]
  },
  {
    "id": "a70eea6c2d3ac2ef",
    "type": "postgresql",
    "z": "63ec5913b540d2a2",
    "g": "7d248c59cea6eb8f",
    "name": "",
    "query": "SELECT \n    pg_size_pretty(before_compression_total_bytes) as \"before compression\",\n    pg_size_pretty(after_compression_total_bytes) as \"after compression\"\nFROM hypertable_compression_stats('measurements');",
    "postgreSQLConfig": "ec8702db3a5c2dc7",
    "split": false,
    "rowsPerMsg": 1,
    "outputs": 1,
    "x": 1790,
    "y": 840,
    "wires": [
      [
        "de4b529a60542204"
      ]
    ]
  },
  {
    "id": "de4b529a60542204",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "7d248c59cea6eb8f",
    "name": "debug 18",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1970,
    "y": 840,
    "wires": []
  },
  {
    "id": "15c0295a79c1f759",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "7d248c59cea6eb8f",
    "name": "Prepare insert",
    "func": "return msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1590,
    "y": 840,
    "wires": [
      [
        "a70eea6c2d3ac2ef"
      ]
    ]
  },
  {
    "id": "3f263f0736505839",
    "type": "postgresql",
    "z": "63ec5913b540d2a2",
    "g": "4aa8585e6cc1a05a",
    "name": "",
    "query": "SELECT s.dev_id, j.deployment_id, j.median_height_mm\nFROM sensors s\nLEFT JOIN LATERAL (\n\tSELECT *\n     FROM deployments d\n     WHERE d.dev_id = s.dev_id\n\t AND d.date_down IS NULL\n     ORDER BY d.date_deployed DESC LIMIT 1\n) j ON true\nWHERE s.dev_id = '{{{ msg.dev_id }}}'",
    "postgreSQLConfig": "ec8702db3a5c2dc7",
    "split": false,
    "rowsPerMsg": 1,
    "outputs": 1,
    "x": 870,
    "y": 200,
    "wires": [
      [
        "c5d3a19919464f9a"
      ]
    ]
  },
  {
    "id": "c5d3a19919464f9a",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "4aa8585e6cc1a05a",
    "name": "update meta",
    "func": "const { \n    dev_id, deployment_id, median_height_mm\n} = msg.payload?.[0] || {};\n\nreturn {\n    ...msg,\n    deployment_id: deployment_id || undefined,\n    night_median: median_height_mm,\n    common_table_data: {\n        time: msg.time,\n        deployment_id,\n        night_median: median_height_mm,\n    },\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 870,
    "y": 260,
    "wires": [
      [
        "4d56fb87f74cc417",
        "54748c0a68261926",
        "08aa1fc2c62337f9",
        "4e78e8e1cd3dffa7"
      ]
    ]
  },
  {
    "id": "4d56fb87f74cc417",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "4aa8585e6cc1a05a",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "deployment_id",
    "targetType": "msg",
    "statusVal": "deployment_id",
    "statusType": "auto",
    "x": 1130,
    "y": 80,
    "wires": []
  },
  {
    "id": "b43cfa81b9314d3c",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "49d4aa47d32b30f6",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "dev_id",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 610,
    "y": 280,
    "wires": []
  },
  {
    "id": "fa04e5bc9d60a061",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "",
    "active": false,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "app_name",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1080,
    "y": 860,
    "wires": []
  },
  {
    "id": "3156963a24f356d5",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "true",
    "targetType": "full",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 510,
    "y": 880,
    "wires": []
  },
  {
    "id": "dc63b3fdfca9e21b",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "deployment_id",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 750,
    "y": 540,
    "wires": []
  },
  {
    "id": "3b863b4807cf0453",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "deployment_id",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 750,
    "y": 640,
    "wires": []
  },
  {
    "id": "071ee8aa8bd88a27",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "deployment_id",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 750,
    "y": 740,
    "wires": []
  },
  {
    "id": "037e6e65201aee12",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "deployment_id",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 750,
    "y": 840,
    "wires": []
  },
  {
    "id": "dd9bc5bb190f5dc0",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "deployment_id",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 470,
    "y": 960,
    "wires": []
  },
  {
    "id": "3b99b5dd48f7315b",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "depth filters",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "msg.payload.depth_data.depth_filt_mm \t& \" | \" & \tmsg.payload.depth_data.depth_proc_mm\t& \" | \" & \tmsg.payload.depth_data.depth_filt_stages_applied",
    "targetType": "jsonata",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1050,
    "y": 460,
    "wires": []
  },
  {
    "id": "54748c0a68261926",
    "type": "switch",
    "z": "63ec5913b540d2a2",
    "g": "4aa8585e6cc1a05a",
    "name": "no depid",
    "property": "deployment_id",
    "propertyType": "msg",
    "rules": [
      {
        "t": "null"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 1100,
    "y": 200,
    "wires": [
      [
        "61bebd9f7ff1dde8"
      ],
      []
    ]
  },
  {
    "id": "61bebd9f7ff1dde8",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "4aa8585e6cc1a05a",
    "name": "dev_id",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "dev_id & \" | \" & app_name",
    "targetType": "jsonata",
    "statusVal": "dev_id",
    "statusType": "auto",
    "x": 1250,
    "y": 200,
    "wires": []
  },
  {
    "id": "08aa1fc2c62337f9",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "4aa8585e6cc1a05a",
    "name": "dev_id",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "dev_id & \" | \" & app_name & \" | \" & night_median",
    "targetType": "jsonata",
    "statusVal": "dev_id",
    "statusType": "auto",
    "x": 1090,
    "y": 140,
    "wires": []
  },
  {
    "id": "5d2cac28a29c5ed6",
    "type": "postgresql",
    "z": "63ec5913b540d2a2",
    "g": "9adc6d7359c13beb",
    "name": "",
    "query": "",
    "postgreSQLConfig": "ec8702db3a5c2dc7",
    "split": false,
    "rowsPerMsg": 1,
    "outputs": 1,
    "x": 1790,
    "y": 660,
    "wires": [
      []
    ]
  },
  {
    "id": "d4c9d6d5b6d2e143",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "9adc6d7359c13beb",
    "name": "debug 17",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1960,
    "y": 660,
    "wires": []
  },
  {
    "id": "3b2123d7c7dd611f",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "9adc6d7359c13beb",
    "name": "Prepare insert",
    "func": "const { \n    tables,\n    timestamp, dev_id, deployment_id, app_name, error_flag\n    \n} = msg;\n\n// const mustache = (d, c, i) => `{{{ msg.data[${i}][\"${c}\"] }}}`\n// // const N = x => x === undefined ? x : \"NULL\"\n// // const literal = (d, c, i) => N(d?.[c])\n\n// const sqlInsertObject = ({ table, schema, data, formatValue=mustache }) => {\n//     if(!data || !table) return;\n//     const columns = Object.keys(data.reduce((d, o) => ({...o, ...d}), {}));\n//     const values = data.map((d, i) => \n//         `\\n(${columns.map(c => formatValue(d, c, i)).join(', ')})`\n//     ).join(', ');\n//     return (\n//         `INSERT INTO ${schema || 'public'}.${table} (${columns}) VALUES ${values};`\n//     )\n// }\n\nconst sqlInsertObject = ({ table, schema, data }) => {\n    if(!data || !table) return;\n    const columns = Object.keys(data.reduce((d, o) => ({...o, ...d}), {}));\n    let j = 1;\n    let params = []\n    const values = data.map((d, i) => \n        `\\n(${columns.map(c => {\n            params.push(d[c]);\n            return `$${j++}`;\n        }).join(', ')})`\n    ).join(', ');\n    const query = `INSERT INTO ${schema || 'public'}.${table} (${columns}) VALUES ${values};`\n    return [query, params]\n}\n\nlet queries = [];\n\nfor(let name in tables) {\n    let t = tables[name];\n    t = Array.isArray(t) ? t : [t];\n    let data = t.map(d => ({ \n        dev_id, deployment_id,\n        time: new Date(timestamp).toISOString(),\n        ...d, \n    }))\n    \n    let [query, params] = sqlInsertObject({ \n        table: name,\n        schema: app_name.split('-').pop(),\n        data\n    })\n    if (params.length === 0) continue;\n    queries.push({ query, params });//, data\n}\n\n\n\nreturn [ queries ];",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1590,
    "y": 660,
    "wires": [
      [
        "5d2cac28a29c5ed6"
      ]
    ]
  },
  {
    "id": "8080a6d3e1cb9bcc",
    "type": "postgresql",
    "z": "63ec5913b540d2a2",
    "g": "4aa8585e6cc1a05a",
    "name": "",
    "query": "INSERT INTO sensors(dev_id)\nSELECT '{{{ msg.dev_id }}}'\nWHERE NOT EXISTS \n    (SELECT dev_id \n     FROM sensors\n     WHERE dev_id = '{{{ msg.dev_id }}}')",
    "postgreSQLConfig": "ec8702db3a5c2dc7",
    "split": false,
    "rowsPerMsg": 1,
    "outputs": 1,
    "x": 850,
    "y": 140,
    "wires": [
      [
        "3f263f0736505839"
      ]
    ]
  },
  {
    "id": "eb85a0c1adfe16db",
    "type": "file",
    "z": "63ec5913b540d2a2",
    "name": "",
    "filename": "model.onnx",
    "filenameType": "str",
    "appendNewline": false,
    "createDir": true,
    "overwriteFile": "true",
    "encoding": "none",
    "x": 1610,
    "y": 220,
    "wires": [
      []
    ]
  },
  {
    "id": "c003f5831e3d10f9",
    "type": "http request",
    "z": "63ec5913b540d2a2",
    "name": "",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://docs.google.com/uc?export=download&id=1r0ro3xvIlLK1vp0WMXe1YgrcXTw2hFFz",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 1610,
    "y": 180,
    "wires": [
      [
        "ec5546f592b72447",
        "eb85a0c1adfe16db"
      ]
    ]
  },
  {
    "id": "9316a8f5ce74740e",
    "type": "inject",
    "z": "63ec5913b540d2a2",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "\"\"",
    "payloadType": "str",
    "x": 1590,
    "y": 140,
    "wires": [
      [
        "c003f5831e3d10f9"
      ]
    ]
  },
  {
    "id": "ec5546f592b72447",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "name": "debug 36",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1660,
    "y": 260,
    "wires": []
  },
  {
    "id": "2c9849ccc2a49658",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "name": "debug 45",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1400,
    "y": 1100,
    "wires": []
  },
  {
    "id": "5f9f40ecd95922d1",
    "type": "http request",
    "z": "63ec5913b540d2a2",
    "g": "6f9ef14b0674fee4",
    "name": "ML \ud83e\udd84",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://fn.dep.floodlabs.nyc/detect-flood",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [
      {
        "keyType": "other",
        "keyValue": "Content-Type",
        "valueType": "other",
        "valueValue": "application/json"
      }
    ],
    "x": 1070,
    "y": 620,
    "wires": [
      [
        "f318171a0ab559ee"
      ]
    ]
  },
  {
    "id": "f318171a0ab559ee",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "6f9ef14b0674fee4",
    "name": "add ml to table",
    "func": "const detections = msg.payload;\nif(Array.isArray(detections) && detections.length) {\n    const final = detections[detections.length - 1]\n    const mean = x => x.reduce((a, b) => a + b) / x.length;\n    let last = detections.slice(\n        Math.max(detections.length - 5, 0),\n        Math.max(detections.length - 1, 0),\n        )\n    msg.tables.depth_data.flood_detected = Math.min(mean(last), final)\n}\nelse {\n    node.warn(detections);\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1120,
    "y": 660,
    "wires": [
      [
        "698ea5522a9d3fa2"
      ]
    ]
  },
  {
    "id": "96e9dcdc4a2903e4",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "6f9ef14b0674fee4",
    "name": "window",
    "func": "const devid = msg.dev_id;\nconst depth = msg.tables.depth_data.depth_proc_mm;\n\nlet q = flow.get('getMLQueue')(devid);\nq.push(depth)\n\n// node.warn([devid, q.length, depth])\n\nreturn {\n    ...msg,\n    payload: JSON.stringify(Array.from(q))\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "// Code added here will be run once\n// whenever the node is started.\nclass Deque extends Array {\n    constructor(maxsize) {\n        super();\n        this.maxsize = maxsize;\n    }\n    push(x) {\n      super.push(x);\n      while(this.length > this.maxsize) {\n        this.shift();\n      }\n    }\n}\n\n\nconst qs = flow.get('mlQueues') || {};\nflow.set('mlQueues', qs);\nflow.set('getMLQueue', (devid, maxsize=128) => {\n    if(!qs[devid]) qs[devid] = new Deque(maxsize);\n    const q = qs[devid];\n    q.maxsize = maxsize;\n    return q;\n});",
    "finalize": "",
    "libs": [],
    "x": 1080,
    "y": 580,
    "wires": [
      [
        "5f9f40ecd95922d1"
      ]
    ]
  },
  {
    "id": "d417c629faa246db",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "6f9ef14b0674fee4",
    "name": "Filters \ud83c\udf08",
    "func": "// add as different field name\n// msg.payload[0].fields.depth_proc2_mm=msg.payload[0].fields.depth_proc_mm;\nconst devid = msg.dev_id;\nconst fbank = flow.get('getFilter')(devid)\nif(msg.historicalData && msg.historicalDataIndex === 0) {\n    fbank.clear();\n}\n\n// Filters applied!\nconst msgs = fbank.filter(msg)\n\n// for(let m of msgs) {\n//     const dist2 = m.payload.depth_data.depth_proc_mm;\n//     const dist = m.payload.depth_data.depth_filt_mm;\n//     m.payload.depth_data.depth_proc_dist_mm=((dist||0) - (dist2||0))\n// }\n\nreturn [ msgs ];",
    "outputs": 1,
    "noerr": 0,
    "initialize": "class Filter {\n    constructor({ name, depthField='depth_proc_mm', maxMins=6, nHistory=0, isRaining=null }={}) {\n        this.name = name;\n        this.state = {};\n\n        this.maxMs = maxMins*60*1000;\n        this.depthField = depthField;\n        this._isRaining = isRaining;\n        this.state.buffer = new Deque(nHistory+1);\n    }\n    clear() {\n        this.state.buffer.length = 0;\n    }\n    isRaining(t) {\n        return this._isRaining ? this._isRaining(t) : null;\n    }\n    isInvalid(msg, t) {\n        // check if the time difference between points is very large\n        // if they are, we're less confident about the filter rules\n        let [m1, d1, t1] = this.state.buffer[this.state.buffer.length-2];\n        let invalid = this.maxMs && (t - t1) > this.maxMs;\n        if(invalid) {\n            // if it's not raining we can afford to be a bit more \n            // lenient with the filters.\n            const rain = this.isRaining(t);\n            invalid = invalid && rain; // only invalid if raining too\n            this.log(\n                rain ?\n                `blip invalid because of time difference ${(t - t1)/1000/60}min > ${this.maxMs/1000/60}min and it's raining` :\n                `blip large time difference ${(t - t1)/1000/60}min > ${this.maxMs/1000/60}min but it is not raining`)\n            this.setReason(msg, rain ? `?${this.name}:cancelled-rain-time-diff` : `?${this.name}:no-rain-time-diff`)\n        }\n        return invalid;\n    }\n\n    \n    log(...args) { \n        node.warn(...args) \n    }\n    unpack(msg) {\n        const {tables: {depth_data}, timestamp} = msg;\n        let depth = depth_data[this.depthField];\n        depth = depth == null ? 0 : parseInt(depth);\n        // if(isNaN(depth)) {\n        //     this.log(`${this.name}: bad depth value ${fields[this.depthField]}`);\n        //     depth = 0;\n        // }\n        return [depth, parseFloat(timestamp)];\n    }\n    override(msg, depth, reason=null) {\n        msg.tables.depth_data[this.depthField] = depth;\n        reason && this.setReason(msg, reason);\n        return msg;\n    }\n    setReason(msg, reason) {\n        let prevReason = msg.tables.depth_data.depth_filt_stages_applied || '';\n        msg.tables.depth_data.depth_filt_stages_applied = prevReason + '|' + reason;\n        return msg;\n    }\n}\n\n\nclass RangeFilter extends Filter {\n    constructor({ height=null, noiseFloor=10, name='range' }={}) {\n        super({ name });\n        this.height = height;\n        this.noiseFloor = noiseFloor;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        const night_median = msg.night_median;\n        // values below this are likely just noise\n        if(depth > 0 && depth < this.noiseFloor) this.override(msg, 0, 'range:noise-floor');\n        // values above this are not possible\n        if(this.height && depth > this.height) this.override(msg, null, 'range:max-height');\n        // values above this are not possible\n        if(night_median && depth > night_median) this.override(msg, null, 'range:night-median');\n        return [msg];\n    }\n}\n\n\nclass GradFilter extends Filter {\n    constructor({ inchmin=10, spotty_coverage_height_ratio=0.05, name='gradient' }={}) {\n        super({ name, nHistory: 1 });\n        this.min_mmps = inchmin * 25.4 / 60 / 1000;\n        this.spotty_coverage_height_ratio = spotty_coverage_height_ratio\n    }\n    clear() { \n        super.clear();\n        this.state.filtering = false;\n        this.state.true_last_depth = null;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        this.state.buffer.push([msg, depth, t]);\n        if(this.state.buffer.length == 1) return [msg];\n\n        // get the rate of change from the last point\n        const [m1, d1, t1] = this.state.buffer[0];\n        if(Math.abs(t - t1) < 100) return [msg];\n        const dddt = (depth-d1) / Math.max(0.0001, t - t1);\n        // check that the change in depth isn't too fast/improbable\n        if (\n            dddt > this.min_mmps || \n            this.filtering && \n            this.state.true_last_depth && \n            Math.abs(depth - this.state.true_last_depth) / this.state.true_last_depth \n                < this.spotty_coverage_height_ratio\n        ) {\n            this.log(`gradient filtered ${d1} to ${depth}mm \u2206d/\u2206t=${dddt}mm/s`);\n            this.override(msg, d1, 'gradient');\n            this.state.buffer[this.state.buffer.length - 1][1] = d1;\n        }\n        else {\n            this.state.filtering = false;\n        }\n        this.state.true_last_depth = depth;\n        return [msg];\n    }\n}\n\n\nclass BlipFilter extends Filter {\n    constructor({ maxMins=6, blipMinDist=2, blipRatio=0.1, downwardBlips=false, isRaining=null, name='blip' }) {\n        super({ name, maxMins, isRaining, nHistory: 2 });\n        this.blipMinDist = blipMinDist;\n        this.blipRatio = blipRatio;\n        this.downwardBlips = downwardBlips;\n        this.clear();\n    }\n    clear() { \n        super.clear();\n        this.state.holding = false;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        this.state.buffer.push([msg, depth, t]);\n        if(this.state.buffer.length == 1) return [msg];\n\n        if(this.state.holding) {\n            let [[m1,d1,t1], [m2,d2,t2], [m3,d3,t3]] = this.state.buffer;\n            // If the blip jump is greater than some threshold and then it goes\n            // back down to close to the same value, set it as the average of the \n            // first and third values.\n            const baseDist = Math.abs(d1 - d3);\n            let blipDist = d2 - d1;\n            blipDist = this.downwardBlips ? Math.abs(blipDist) : blipDist;\n            if (\n                (blipDist > this.blipMinDist) && \n                (baseDist / blipDist < this.blipRatio) && \n                !this.isInvalid(msg, t)\n            ) {\n                this.log(`blip filtered ${[d1, d2, d3]}`);\n                this.override(m2, (d1+d3)/2, this.name);\n            }\n            // blips are only held for one value\n            this.state.holding = false;\n            return [m2, msg];\n        }\n\n        // check if it jumps up above the blip threshold\n        let dm1 = this.state.buffer[this.state.buffer.length-2][1];\n        if(depth - dm1 > this.blipMinDist) {\n            this.state.holding = true;\n            this.log(`blip hold ${dm1} ${depth}`);\n            return [];\n        }\n\n        return [msg];\n    }\n}\n\nclass BoxFilter extends Filter {\n    constructor({ boxRatio=0.05, maxMins=6, isRaining=null, name='box' }) {\n        super({ name, maxMins, isRaining, nHistory: 2 });\n        this.boxRatio = boxRatio;\n        this.state.initialBox = null;\n        this.state.boxStart = null;\n        this.clear();\n    }\n    clear() { \n        super.clear();\n        this.boxDiff = 0;\n        this.state.holding = false;\n        this.state.filtering = false;\n        this.state.initialBox = null;\n        this.state.boxStart = null;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        this.state.buffer.push([msg, depth, t])\n        if(this.state.buffer.length == 1) return [msg];\n\n        let [m2, d2, t2] = this.state.buffer[this.state.buffer.length-2];\n        if(this.state.filtering) {\n            // get the change between the last point\n            const dd = depth-d2;\n            // add it to the total box delta\n            this.state.boxDiff += dd;\n            // the the box conditions are met, squash it\n            if(\n                Math.abs(dd / this.state.boxJump) < this.boxRatio && \n                Math.abs(this.state.boxDiff / this.state.boxJump) < this.boxRatio  && \n                !this.isInvalid(t)\n            ) {\n                // hulk squash\n                this.log(`box filter ${this.state.initialBox} ... ${[d2, depth]} ${Math.abs(this.state.boxDiff)} / ${this.state.boxJump} > ${this.boxRatio}`);\n                if(this.holding) {\n                    this.override(m2, 0, this.name);\n                }\n                this.override(msg, 0, this.name);\n            } else {\n                // otherwise stop filtering\n                this.log(`box hold released ${this.state.initialBox} ... ${[d2, depth]} - ${(t-this.state.boxStart)/1000/60}mins`);\n                this.state.filtering = false;\n            }\n        } else {\n            // check if box conditions are met\n            if(d2 === 0 && depth > 0) {\n                this.log(`box hold ${[d2,  depth]}`);\n                this.state.boxDiff = 0;\n                this.state.holding = true;\n                this.state.filtering = true;\n                this.state.initialBox = [d2,  depth];\n                this.state.boxStart = t;\n                this.state.boxJump = depth - d2;\n                return [];\n            }\n        }\n\n        // if we are holding a value, make sure to send it\n        if(this.state.holding) {\n            this.state.holding = false;\n            return [m2, msg];\n        }\n\n        return [msg];\n    }\n}\n\n\nclass FilterBank {\n    constructor(filters) {\n        this.filters = filters;\n    }\n    filter(...msgs) {\n        return this.filters.reduce((msgs, f) => (\n            msgs.reduce((outputted, msg) => [...outputted, ...f.filter(msg)], [])\n        ), msgs);\n    }\n    clear() {\n        for(let f of this.filters) f.clear();\n    }\n}\n\n\nclass Deque extends Array {\n    constructor(maxsize) {\n        super();\n        this.maxsize = maxsize;\n    }\n    push(x) {\n      super.push(x);\n      while(this.length > this.maxsize) {\n        this.shift();\n      }\n    }\n}\n\nconst buildFBank = (opts={}) => {\n    const isRaining = (t) => {\n        const rain = global.get('rainQueue');\n        if(!rain || t < rain[0][1]) return false;\n        return rain && rain.anyRain();\n    }\n    return new FilterBank([\n        new RangeFilter({ ...opts }),\n        new GradFilter({ ...opts }),\n        new BlipFilter({ isRaining, ...opts }),\n        new BoxFilter({ isRaining, ...opts }),\n        new BlipFilter({ isRaining, ...opts}),\n    ]);\n}\n\nconst oldFbanks = flow.get('filterBanks') || {};\nconst fbanks = {};\nfor(let k in oldFbanks) {\n    fbanks[k] = buildFBank();\n    for(let i in fbanks[k].filters) {\n        const f=fbanks[k].filters[i];\n        const fOld=oldFbanks[k].filters[i];\n        f.state = {...f.state, ...fOld.state};\n    }\n}\nflow.set('filterBanks', fbanks);\n\nflow.set('getFilter', (devid, opts={}) => {\n    if(!fbanks[devid]) fbanks[devid] = buildFBank(opts);\n    return fbanks[devid];\n});",
    "finalize": "",
    "libs": [],
    "x": 1060,
    "y": 540,
    "wires": [
      [
        "96e9dcdc4a2903e4",
        "8d465086c3ef332a",
        "907eb2768e2bb846"
      ]
    ]
  },
  {
    "id": "4c8ddb9156f5c71d",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "6f9ef14b0674fee4",
    "name": "null",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "true",
    "targetType": "full",
    "statusVal": "deployment_id",
    "statusType": "msg",
    "x": 1230,
    "y": 540,
    "wires": []
  },
  {
    "id": "907eb2768e2bb846",
    "type": "switch",
    "z": "63ec5913b540d2a2",
    "g": "6f9ef14b0674fee4",
    "name": "null",
    "property": "tables.depth_data.depth_proc_mm",
    "propertyType": "msg",
    "rules": [
      {
        "t": "null"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 1230,
    "y": 520,
    "wires": [
      [
        "4c8ddb9156f5c71d"
      ],
      []
    ]
  },
  {
    "id": "8d465086c3ef332a",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "6f9ef14b0674fee4",
    "name": "depth filters",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "msg.payload.depth_data.depth_filt_mm \t& \" | \" & \tmsg.payload.depth_data.depth_proc_mm\t& \" | \" & \tmsg.payload.depth_data.depth_filt_stages_applied",
    "targetType": "jsonata",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1230,
    "y": 460,
    "wires": []
  },
  {
    "id": "62f132ed4b7660a9",
    "type": "http request",
    "z": "59b6ea3e0dab2122",
    "g": "b4ee31501a2a5cc6",
    "name": "MN request",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://api.nysmesonet.org/data/dynserv/coned/5min/nyc/{{{timerange}}}?{{{payload}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 550,
    "y": 100,
    "wires": [
      [
        "b84c28e164baf1e6"
      ]
    ]
  },
  {
    "id": "4f87538ceb946c0d",
    "type": "inject",
    "z": "59b6ea3e0dab2122",
    "g": "45f90142088df121",
    "name": "Inject MN station query",
    "props": [
      {
        "p": "timerange",
        "v": "$join(\t   [\t       $fromMillis($millis() - 240000),\t       $fromMillis($millis())\t   ],\t   '/'\t)",
        "vt": "jsonata"
      },
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "$join(\t   [\t       'variables[]=tair@degC',\t       'variables[]=tslo@degC',\t       'variables[]=relh@percent',\t       'variables[]=precip:incremental@mm',\t       'variables[]=precip@mm',\t       'variables[]=precip_local@mm',\t       'variables[]=precip_total@mm',\t       'variables[]=precip_max_intensity@mm/min',\t       'variables[]=winds_sonic@m/s',\t       'variables[]=srad@W/m^2',\t       'variables[]=pres@millibars',\t       'variables[]=snow_depth@mm',\t       'variables[]=lat@degrees',\t       'variables[]=lon@degrees'\t   ],\t   '&'\t)",
    "payloadType": "jsonata",
    "x": 280,
    "y": 120,
    "wires": [
      [
        "62f132ed4b7660a9"
      ]
    ]
  },
  {
    "id": "bf77b6cbe5bb5efb",
    "type": "csv",
    "z": "59b6ea3e0dab2122",
    "g": "b4ee31501a2a5cc6",
    "name": "",
    "sep": ",",
    "hdrin": true,
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 570,
    "y": 200,
    "wires": [
      [
        "c76e21c56c558be6"
      ]
    ]
  },
  {
    "id": "b84c28e164baf1e6",
    "type": "switch",
    "z": "59b6ea3e0dab2122",
    "g": "b4ee31501a2a5cc6",
    "name": "filter empty",
    "property": "payload",
    "propertyType": "msg",
    "rules": [
      {
        "t": "nempty"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 550,
    "y": 160,
    "wires": [
      [
        "bf77b6cbe5bb5efb"
      ]
    ]
  },
  {
    "id": "c76e21c56c558be6",
    "type": "function",
    "z": "59b6ea3e0dab2122",
    "g": "b4ee31501a2a5cc6",
    "name": "Check empty",
    "func": "const count = msg.payload.reduce(\n    (d, C) => C + Object.keys(d).length, 0);\n\nif (count == msg.payload.length * 4) {\n    return;\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 570,
    "y": 240,
    "wires": [
      [
        "3f60b54328ff9718"
      ]
    ]
  },
  {
    "id": "3f60b54328ff9718",
    "type": "switch",
    "z": "59b6ea3e0dab2122",
    "g": "b4ee31501a2a5cc6",
    "name": "filter empty",
    "property": "payload",
    "propertyType": "msg",
    "rules": [
      {
        "t": "nempty"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 570,
    "y": 280,
    "wires": [
      [
        "ed9c3a5a7b9aedf2"
      ]
    ]
  },
  {
    "id": "bba0e1b1684e109b",
    "type": "http request",
    "z": "59b6ea3e0dab2122",
    "g": "3ea6fd44faed79df",
    "name": "NWS request",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 550,
    "y": 480,
    "wires": [
      [
        "4c120bcceeb78769"
      ]
    ]
  },
  {
    "id": "4c120bcceeb78769",
    "type": "switch",
    "z": "59b6ea3e0dab2122",
    "g": "3ea6fd44faed79df",
    "name": "filter empty",
    "property": "payload['properties']['rawMessage']",
    "propertyType": "msg",
    "rules": [
      {
        "t": "nnull"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 570,
    "y": 520,
    "wires": [
      [
        "e5a534afcfdc4833"
      ]
    ]
  },
  {
    "id": "e5a534afcfdc4833",
    "type": "function",
    "z": "59b6ea3e0dab2122",
    "g": "5b30fca8667a9132",
    "name": "Setup NWS payload",
    "func": "const { \n    properties: { timestamp, rawMessage, ...data }, \n    geometry: { coordinates: [lng, lat] },\n} = msg.payload;\nconst station_id = rawMessage.slice(0,4).trim().toLowerCase();\nconst dev_id = `nws-${station_id}`;\nconst deployment_id = dev_id;\n\nconst INT = x => isNaN(x) ? undefined : Math.round(x);\nconst REAL = x => isNaN(x) ? undefined : x;\nreturn {\n    ...msg, dev_id, deployment_id,\n    payload: {\n        weather_data: {\n            time: Date.parse(timestamp),\n            temp_c: REAL(data.temperature.value),\n            wind_dir_deg: INT(data.windDirection.value),\n            wind_speed_kmh: REAL(data.windSpeed.value),\n            visibility: INT(+data.visibility.value),\n            baro_pres_pa: REAL(data.barometricPressure.value),\n            precip_last_hour_mm: INT(data.precipitationLastHour.value * 1000),\n            relhumid_percent: INT(+data.relativeHumidity.value),\n            windchill_c: REAL(+data.windChill.value),\n        },\n    },\n    updates: {\n        sensors: {\n            where: 'dev_id',\n            data: {\n                dev_id, \n                weather_group: 'nws',\n                sensor_types: 'temp,humid,precip,pres,wind',\n            }\n        },\n        deployments: {\n            where: 'deployment_id',\n            data: {\n                dev_id, deployment_id, lat, lng,\n                sensor_name: `NWS ${station_id.slice(1,4).toUpperCase()} Weather station (${station_id.toUpperCase()})`\n            }\n        },\n    }\n};\n// Quality control checks\n// https://madis.ncep.noaa.gov/madis_sfc_qc_notes.shtml",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 880,
    "y": 460,
    "wires": [
      [
        "c4043a60a1fec092"
      ]
    ]
  },
  {
    "id": "9f175b1da3175ea9",
    "type": "function",
    "z": "59b6ea3e0dab2122",
    "g": "10e31bf8eea8dbec",
    "name": "Setup MN payload",
    "func": "const data = msg.payload;\nconst station_id = data.station;\nconst dev_id = `nyc-micronet-${station_id.toLowerCase()}`;\nconst deployment_id = dev_id;\n\nconst INT = x => isNaN(x) ? undefined : Math.round(x);\nconst REAL = x => isNaN(x) ? undefined : x;\nreturn {\n    ...msg, dev_id,\n    payload: {\n        weather_data: {\n            time: Date.parse(data.datetime),\n            temp_c: REAL(data['temp_2m [degC]']),\n            temp_slow_c: REAL(data['tslo [degC]']),\n            wind_speed_kmh: REAL(data['avg_wind_speed_sonic [m/s]'] * 3.6),\n            baro_pres_pa: INT(data['station_pressure [millibars]'] * 100),\n            precip_increm_mm: INT(data['precip_incremental [mm]']),\n            max_precip_last_5min_mm_per_min: INT(data['precip_max_intensity [mm/min]']),\n            relhumid_percent: INT(data['relative_humidity [percent]']),\n            wind_dir_deg: INT(data['wind_direction_sonic [degrees]']),\n            solar_insol_wm2: INT(data['solar_insolation [W/m^2]']),\n            snow_depth_mm: INT(data['snow_depth [mm]']),\n        }\n    },\n    updates: {\n        sensors: {\n            where: 'dev_id',\n            data: {\n                dev_id,\n                weather_group: 'micronet',\n                sensor_types: 'temp,humid,precip,pres,wind,solar',\n            }\n        },\n        deployments: {\n            where: 'deployment_id',\n            data: {\n                dev_id, deployment_id, \n                lat: data['lat [degrees]'],\n                lng: data['lon [degrees]'],\n                sensor_name: `NYC Micronet weather station (${station_id})`\n            },\n        },\n    }\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 870,
    "y": 120,
    "wires": [
      [
        "47af552e8a39de77",
        "c4043a60a1fec092"
      ]
    ]
  },
  {
    "id": "ed9c3a5a7b9aedf2",
    "type": "split",
    "z": "59b6ea3e0dab2122",
    "g": "b4ee31501a2a5cc6",
    "name": "one by one",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 590,
    "y": 320,
    "wires": [
      [
        "9f175b1da3175ea9"
      ]
    ]
  },
  {
    "id": "4c44e3abc4fcd1eb",
    "type": "http request",
    "z": "59b6ea3e0dab2122",
    "g": "1865cd32a82dbefb",
    "name": "Open Weather API",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://api.openweathermap.org/data/2.5/onecall?lat={{{lat_lon.0}}}&lon={{{lat_lon.1}}}&exclude=hourly,daily&appid={{{appid}}}&units=metric",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 590,
    "y": 660,
    "wires": [
      [
        "f9137c59125d3c0d",
        "229868a1d9c9c2dd"
      ]
    ]
  },
  {
    "id": "c9f27f5d47a10a45",
    "type": "inject",
    "z": "59b6ea3e0dab2122",
    "g": "8ac34bda1f02e077",
    "name": "Inject OWM locations",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[\t   [40.680092,-74.014416],\t   [40.676195,-73.986974]\t]",
    "payloadType": "jsonata",
    "x": 280,
    "y": 620,
    "wires": [
      [
        "410c903622f6c8e2"
      ]
    ]
  },
  {
    "id": "0193d0cc4010e60f",
    "type": "function",
    "z": "59b6ea3e0dab2122",
    "g": "d49f1d8b8db525b7",
    "name": "Setup OWM payload",
    "func": "const { lat, lon: lng, current, minutely } = msg.owm;\nconst { osm_id, address } = msg.revgeocode;\nconst forecast_mins = 60;\nconst dev_id = `owm-${osm_id}`;\nconst sensor_name = `${address.neighbourhood} - openweathermap.org (${dev_id})`;\nconst deployment_id = dev_id;\n\nreturn {\n    ...msg, dev_id, deployment_id,\n    payload: {\n        weather_data: [\n            {\n                temp_c: current.temp,\n                baro_pres_pa: current.pressure * 1000,\n                relhumid_percent: current.humidity,\n                cloud_percent: current.clouds,\n                wind_speed_kmh: current.wind_speed * 3.6,\n                wind_dir_deg: current.wind_deg,\n                precip_last_hour_mm: current.rain ? current.rain['1h'] : undefined,\n                snow_last_hour_mm: current.snow ? current.snow['1h'] : undefined,\n                time: current['dt'] * 1000\n            },\n            ...(minutely ? minutely.filter((d, i) => i <= forecast_mins).map(m => ({\n                precip_forecast_last_min_mm: m.precipitation,\n                time: m.dt * 1000,\n            })) : null)\n        ],\n    },\n    updates: {\n        sensors: {\n            where: 'dev_id',\n            data: {\n                dev_id, \n                weather_group: 'open_weather_map_forecast',\n                sensor_types: 'temp,humid,precip,pres,wind,solar',\n            },\n        },\n        deployments: {\n            where: 'deployment_id',\n            data: {\n                dev_id, deployment_id,\n                sensor_name: sensor_name,\n                // address\n                lat, lng,\n                sensor_address_zip: address.postcode,\n                sensor_address_borough: address.suburb,\n                sensor_address_state: address.state,\n                sensor_address_country: address.country,\n                sensor_address_house_number: address.house_number,\n                sensor_address_street: address.road,\n                sensor_address_neighbourhood: address.neighbourhood,\n            },\n        },\n    }\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 880,
    "y": 620,
    "wires": [
      [
        "c4043a60a1fec092"
      ]
    ]
  },
  {
    "id": "f03ba767c129f69b",
    "type": "http request",
    "z": "59b6ea3e0dab2122",
    "g": "1865cd32a82dbefb",
    "name": "Rev geocode",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://nominatim.openstreetmap.org/reverse?format=json&lat={{{lat_lon.0}}}&lon={{{lat_lon.1}}}&zoom=18&addressdetails=1",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 610,
    "y": 780,
    "wires": [
      [
        "e45925d81c5ddfda"
      ]
    ]
  },
  {
    "id": "410c903622f6c8e2",
    "type": "split",
    "z": "59b6ea3e0dab2122",
    "g": "8ac34bda1f02e077",
    "name": "one by one",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 290,
    "y": 660,
    "wires": [
      [
        "8aa86b86eaddc827"
      ]
    ]
  },
  {
    "id": "8aa86b86eaddc827",
    "type": "delay",
    "z": "59b6ea3e0dab2122",
    "g": "8ac34bda1f02e077",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "50",
    "nbRateUnits": "1",
    "rateUnits": "minute",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "allowrate": false,
    "outputs": 1,
    "x": 300,
    "y": 700,
    "wires": [
      [
        "51effb339ea4f74e"
      ]
    ]
  },
  {
    "id": "20fd99b272aaccde",
    "type": "change",
    "z": "59b6ea3e0dab2122",
    "g": "1865cd32a82dbefb",
    "name": "save as owm",
    "rules": [
      {
        "t": "move",
        "p": "payload",
        "pt": "msg",
        "to": "owm",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 610,
    "y": 740,
    "wires": [
      [
        "f03ba767c129f69b"
      ]
    ]
  },
  {
    "id": "e45925d81c5ddfda",
    "type": "change",
    "z": "59b6ea3e0dab2122",
    "g": "1865cd32a82dbefb",
    "name": "save as revgeocode",
    "rules": [
      {
        "t": "move",
        "p": "payload",
        "pt": "msg",
        "to": "revgeocode",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 580,
    "y": 820,
    "wires": [
      [
        "0193d0cc4010e60f",
        "ad4b855dd756c616"
      ]
    ]
  },
  {
    "id": "51effb339ea4f74e",
    "type": "change",
    "z": "59b6ea3e0dab2122",
    "g": "8ac34bda1f02e077",
    "name": "move to lat_lon",
    "rules": [
      {
        "t": "move",
        "p": "payload",
        "pt": "msg",
        "to": "lat_lon",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 320,
    "y": 760,
    "wires": [
      [
        "e8f6d2b22d197f13"
      ]
    ]
  },
  {
    "id": "f9137c59125d3c0d",
    "type": "switch",
    "z": "59b6ea3e0dab2122",
    "g": "1865cd32a82dbefb",
    "name": "filter empty",
    "property": "payload.current",
    "propertyType": "msg",
    "rules": [
      {
        "t": "nempty"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 610,
    "y": 700,
    "wires": [
      [
        "20fd99b272aaccde"
      ]
    ]
  },
  {
    "id": "ceac54f342a9e889",
    "type": "function",
    "z": "59b6ea3e0dab2122",
    "g": "ef85790a3a4608f6",
    "name": "Fieldkit POST",
    "func": "msg.headers = {};\nmsg.method = \"POST\";\nmsg.url = 'https://api.fieldkit.org/ttn/webhook?token=33af8a9e936d2ec4c217de125ccfc4b9';\nmsg.headers[\"Content-Type\"]=\"application/json\";\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1160,
    "y": 160,
    "wires": [
      [
        "1948c11829f1050f"
      ]
    ]
  },
  {
    "id": "1948c11829f1050f",
    "type": "http request",
    "z": "59b6ea3e0dab2122",
    "g": "ef85790a3a4608f6",
    "name": "",
    "method": "use",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 1170,
    "y": 200,
    "wires": [
      [
        "821cdc05c82fbd0a"
      ]
    ]
  },
  {
    "id": "821cdc05c82fbd0a",
    "type": "function",
    "z": "59b6ea3e0dab2122",
    "g": "ef85790a3a4608f6",
    "name": "HTTP Status",
    "func": "if(msg.statusCode >= 200 && msg.statusCode < 300){\n    msg.response_fail = false;\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1190,
    "y": 240,
    "wires": [
      []
    ]
  },
  {
    "id": "634030652944940b",
    "type": "debug",
    "z": "59b6ea3e0dab2122",
    "g": "d49f1d8b8db525b7",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 910,
    "y": 660,
    "wires": []
  },
  {
    "id": "47af552e8a39de77",
    "type": "function",
    "z": "59b6ea3e0dab2122",
    "name": "Store if it's raining (for filters)",
    "func": "// node.warn(msg.payload[0].fields)\nconst rain = msg.payload.weather_data.max_precip_last_5min_mm_per_min;\nconst t = msg.payload.weather_data.time;\n\nglobal.get('rainQueue').push(rain, t);\n// node.warn(global.get('rainQueue'))\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "// Code added here will be run once\n// whenever the node is started.\nclass RainQueue extends Array {\n    constructor(maxage=60*60) {\n        super();\n        this.maxage = maxage;\n    }\n    push(rained, t) {\n        const now = Date.now()\n        \n        // append sorted\n        if(rained) {\n            if(!this.length || t > this[this.length-1][1]) {\n                super.push([rained, t]);\n            }\n            else {\n                let i=this.length-1;\n                for(;t > this[i][1] && i>0;i--) { }\n                this.splice(i, 0, [rained, t]);\n            }\n        }\n        \n        // trim off old samples\n        while(this.length && now - this[0][1] > this.maxage*1000) {\n            this.shift();\n        }\n    }\n    anyRain() { return this.some(r => r[0]) }\n}\n\n\nconst rainQ = global.get('rainQueue') || new RainQueue(60 * 60);\nglobal.set('rainQueue', rainQ)",
    "finalize": "",
    "libs": [],
    "x": 1180,
    "y": 80,
    "wires": [
      []
    ]
  },
  {
    "id": "742bda0e4b0972e6",
    "type": "inject",
    "z": "59b6ea3e0dab2122",
    "g": "e0b909d7e6cfeb76",
    "name": "Inject NWS station IDs",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[\t   'KJFK',\t   'KLGA',\t   'KNYC'\t]",
    "payloadType": "jsonata",
    "x": 280,
    "y": 460,
    "wires": [
      [
        "567665bec1f6ee11"
      ]
    ]
  },
  {
    "id": "567665bec1f6ee11",
    "type": "split",
    "z": "59b6ea3e0dab2122",
    "g": "e0b909d7e6cfeb76",
    "name": "one by one",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": true,
    "addname": "",
    "x": 330,
    "y": 500,
    "wires": [
      [
        "9ad7100c5363a7ec"
      ]
    ]
  },
  {
    "id": "9ad7100c5363a7ec",
    "type": "template",
    "z": "59b6ea3e0dab2122",
    "g": "3ea6fd44faed79df",
    "name": "as url",
    "field": "url",
    "fieldType": "msg",
    "format": "handlebars",
    "syntax": "mustache",
    "template": "https://api.weather.gov/stations/{{payload}}/observations/latest",
    "output": "str",
    "x": 530,
    "y": 440,
    "wires": [
      [
        "bba0e1b1684e109b"
      ]
    ]
  },
  {
    "id": "8155fc33af5f6c4d",
    "type": "debug",
    "z": "59b6ea3e0dab2122",
    "g": "5b30fca8667a9132",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 910,
    "y": 500,
    "wires": []
  },
  {
    "id": "e8f6d2b22d197f13",
    "type": "credentials",
    "z": "59b6ea3e0dab2122",
    "g": "1865cd32a82dbefb",
    "name": "OWAPI and G key store",
    "props": [
      {
        "value": "appid",
        "type": "msg"
      },
      {
        "value": "gapikey",
        "type": "msg"
      }
    ],
    "x": 580,
    "y": 620,
    "wires": [
      [
        "4c44e3abc4fcd1eb"
      ]
    ]
  },
  {
    "id": "41021ba21f7ab2ea",
    "type": "postgresql",
    "z": "59b6ea3e0dab2122",
    "g": "8e1edb810a78ebfc",
    "name": "",
    "query": "",
    "postgreSQLConfig": "ec8702db3a5c2dc7",
    "split": false,
    "rowsPerMsg": 1,
    "outputs": 1,
    "x": 1530,
    "y": 500,
    "wires": [
      []
    ]
  },
  {
    "id": "15a39f62b35e4b32",
    "type": "function",
    "z": "59b6ea3e0dab2122",
    "g": "8e1edb810a78ebfc",
    "name": "Prepare insert",
    "func": "const { \n    payload: tables,\n    dev_id, deployment_id\n} = msg;\n\nconst sqlInsertObject = ({ table, schema, data }) => {\n    if(!data || !table) return;\n    // get all the columns we're updating\n    const columns = Object.keys(data.reduce((d, o) => ({...o, ...d}), {}));\n    // collect the params as a flat list\n    let j = 1;\n    let params = []\n    const values = data.map((d, i) => \n        `\\n(${columns.map(c => {\n            params.push(d[c]);\n            return `$${j++}`;\n        }).join(', ')})`\n    ).join(', ');\n    // construct the query\n    const query = `INSERT INTO ${schema || 'public'}.${table} (${columns}) VALUES ${values};`\n    return [query, params]\n}\n\nlet queries = [];\n\nfor(let name in tables) {\n    let t = tables[name];\n    t = Array.isArray(t) ? t : [t];\n    let data = t.map(d => ({ \n        dev_id, deployment_id,\n        ...d, \n        time: new Date(parseInt(d.time)).toISOString(),\n    }))\n    \n    let [query, params] = sqlInsertObject({ \n        table: name,\n        schema: 'live',\n        data\n    })\n    if (params.length === 0) continue;\n    queries.push({ query, params });//, data\n}\n\n\n\nreturn [ queries ];",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1330,
    "y": 500,
    "wires": [
      [
        "41021ba21f7ab2ea"
      ]
    ]
  },
  {
    "id": "267cda52ff074b0c",
    "type": "debug",
    "z": "59b6ea3e0dab2122",
    "g": "8e1edb810a78ebfc",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1330,
    "y": 540,
    "wires": []
  },
  {
    "id": "7be1dbe3d89f8555",
    "type": "debug",
    "z": "59b6ea3e0dab2122",
    "g": "70f81c1a84a213ff",
    "name": "rain (5m)",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "payload.weather_data. max_precip_last_5min_mm_per_min",
    "targetType": "msg",
    "statusVal": "rain?",
    "statusType": "auto",
    "x": 1440,
    "y": 380,
    "wires": []
  },
  {
    "id": "b30e1006968d3d95",
    "type": "debug",
    "z": "59b6ea3e0dab2122",
    "g": "70f81c1a84a213ff",
    "name": "temp (C)",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "payload.weather_data.temp_c",
    "targetType": "msg",
    "statusVal": "rain?",
    "statusType": "auto",
    "x": 1580,
    "y": 380,
    "wires": []
  },
  {
    "id": "eb85b17b384607e1",
    "type": "debug",
    "z": "59b6ea3e0dab2122",
    "g": "70f81c1a84a213ff",
    "name": "wind (kmh)",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "payload.weather_data.wind_speed_kmh",
    "targetType": "msg",
    "statusVal": "rain?",
    "statusType": "auto",
    "x": 1730,
    "y": 380,
    "wires": []
  },
  {
    "id": "c4043a60a1fec092",
    "type": "function",
    "z": "59b6ea3e0dab2122",
    "name": "-",
    "func": "\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1110,
    "y": 380,
    "wires": [
      [
        "7be1dbe3d89f8555",
        "b30e1006968d3d95",
        "eb85b17b384607e1",
        "267cda52ff074b0c",
        "57dbb6a784f2eaca",
        "15a39f62b35e4b32"
      ]
    ]
  },
  {
    "id": "57dbb6a784f2eaca",
    "type": "debug",
    "z": "59b6ea3e0dab2122",
    "g": "70f81c1a84a213ff",
    "name": "dev_id",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "dev_id",
    "targetType": "msg",
    "statusVal": "rain?",
    "statusType": "auto",
    "x": 1290,
    "y": 380,
    "wires": []
  },
  {
    "id": "ad4b855dd756c616",
    "type": "debug",
    "z": "59b6ea3e0dab2122",
    "name": "debug 20",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 840,
    "y": 260,
    "wires": []
  },
  {
    "id": "229868a1d9c9c2dd",
    "type": "debug",
    "z": "59b6ea3e0dab2122",
    "name": "debug 21",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 860,
    "y": 360,
    "wires": []
  },
  {
    "id": "bc5fec93c252600b",
    "type": "debug",
    "z": "59b6ea3e0dab2122",
    "g": "8e1edb810a78ebfc",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "updates",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1330,
    "y": 600,
    "wires": []
  },
  {
    "id": "9637d78579cb1b2b",
    "type": "inject",
    "z": "e0603b84198efa0a",
    "g": "480b9506fde72aba",
    "name": "Inject station_ids",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "180",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[\t    8518750,\t    8516945,\t    8531680\t]",
    "payloadType": "jsonata",
    "x": 190,
    "y": 60,
    "wires": [
      [
        "690cfc0fd6894019"
      ]
    ]
  },
  {
    "id": "478c541fff4fedfa",
    "type": "http request",
    "z": "e0603b84198efa0a",
    "g": "480b9506fde72aba",
    "name": "NOAA tide API",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter?product=water_level&application=NOS.COOPS.TAC.WL&date=latest&datum=NAVD&station={{{payload}}}&time_zone=gmt&units=metric&format=json",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 200,
    "y": 140,
    "wires": [
      [
        "71134cb878e2e45b"
      ]
    ]
  },
  {
    "id": "690cfc0fd6894019",
    "type": "split",
    "z": "e0603b84198efa0a",
    "g": "480b9506fde72aba",
    "name": "one by one",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 210,
    "y": 100,
    "wires": [
      [
        "478c541fff4fedfa"
      ]
    ]
  },
  {
    "id": "71134cb878e2e45b",
    "type": "function",
    "z": "e0603b84198efa0a",
    "g": "480b9506fde72aba",
    "name": "payload",
    "func": "const { data: [ d ], metadata: m } = msg.payload;\nif (d === undefined){\n    msg.payload = null;\n    return msg;\n}\n\nvar station_id = m.id;\nvar dev_id = 'noaa-tidal-' + station_id;\nvar sensor_name = `${m.name}(${station_id})`;\nvar lat = parseFloat(m.lat);\nvar lng = parseFloat(m.lon);\nvar ts = Date.parse(d.t + ' GMT');\n\nreturn {\n    ...msg, lat, lng, dev_id,\n    sensor_data: [{\n        navd88_mm: parseFloat(d.v) * 1000 || undefined,\n        time: ts,\n    }],\n    update: {\n        sensor_id: dev_id, lat, lng,\n        sensor_types: 'tide',\n        sensor_name,\n    },\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 220,
    "y": 180,
    "wires": [
      [
        "7021700bfe7cd70a",
        "08ce9ebb98a5b0dd"
      ]
    ]
  },
  {
    "id": "bb63f3f9f599785f",
    "type": "inject",
    "z": "e0603b84198efa0a",
    "g": "71903805cd0d889c",
    "name": "Inject station_ids",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "180",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[\t   \"01311875\",\t   \"01311850\",\t   \"01311145\",\t   \"01376562\",\t   \"01311143\",\t   \"404609073452101\",\t   \"405119073551401\",\t   \"01310740\",\t   \"01396060\",\t   \"01310521\"\t]",
    "payloadType": "jsonata",
    "x": 170,
    "y": 320,
    "wires": [
      [
        "0dca1a125cfcdcdd"
      ]
    ]
  },
  {
    "id": "0dca1a125cfcdcdd",
    "type": "split",
    "z": "e0603b84198efa0a",
    "g": "71903805cd0d889c",
    "name": "one by one",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 190,
    "y": 360,
    "wires": [
      [
        "ae046715aba47672"
      ]
    ]
  },
  {
    "id": "ae046715aba47672",
    "type": "http request",
    "z": "e0603b84198efa0a",
    "g": "71903805cd0d889c",
    "name": "USGS tide API",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://waterservices.usgs.gov/nwis/iv/?format=json&sites={{{payload}}}&parameterCd=62620&siteStatus=all&period=PT1H",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 180,
    "y": 400,
    "wires": [
      [
        "f39edec5bd26aecf"
      ]
    ]
  },
  {
    "id": "7c9eefa386d25375",
    "type": "http request",
    "z": "e0603b84198efa0a",
    "g": "f0109ec522a5bc3d",
    "name": "NOAA VDATUM API",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://vdatum.noaa.gov/vdatumweb/api/convert?lon={{{lng}}}&lat={{{lat}}}&t_v_frame={{{payload}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 820,
    "y": 200,
    "wires": [
      [
        "560959ca8c8e9232"
      ]
    ]
  },
  {
    "id": "61d22faeaf35d53b",
    "type": "function",
    "z": "e0603b84198efa0a",
    "g": "e08057a01676213c",
    "name": "Check for match",
    "func": "const [payload] = msg.payload || [];\n// TODO: handle new device\nreturn { \n    ...msg, datums: [\"mhhw\", \"mllw\"], \n    deployment_id: payload ? payload.deployment_id : null, \n    payload\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 470,
    "y": 340,
    "wires": [
      [
        "3ebc70864470016e"
      ]
    ]
  },
  {
    "id": "a367f5783c8238ec",
    "type": "split",
    "z": "e0603b84198efa0a",
    "g": "f0109ec522a5bc3d",
    "name": "one by one",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 850,
    "y": 160,
    "wires": [
      [
        "7c9eefa386d25375"
      ]
    ]
  },
  {
    "id": "560959ca8c8e9232",
    "type": "join",
    "z": "e0603b84198efa0a",
    "g": "f0109ec522a5bc3d",
    "name": "re-combine",
    "mode": "auto",
    "build": "object",
    "property": "payload",
    "propertyType": "msg",
    "key": "topic",
    "joiner": "\\n",
    "joinerType": "str",
    "accumulate": true,
    "timeout": "",
    "count": "",
    "reduceRight": false,
    "reduceExp": "",
    "reduceInit": "",
    "reduceInitType": "",
    "reduceFixup": "",
    "x": 850,
    "y": 240,
    "wires": [
      [
        "cccf8d3138559f36"
      ]
    ]
  },
  {
    "id": "3ebc70864470016e",
    "type": "switch",
    "z": "e0603b84198efa0a",
    "g": "e08057a01676213c",
    "name": "no match?",
    "property": "payload.mhhw",
    "propertyType": "msg",
    "rules": [
      {
        "t": "null"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 550,
    "y": 380,
    "wires": [
      [],
      [
        "52169d2330339a26",
        "7d5ef9f277d6d75b"
      ]
    ]
  },
  {
    "id": "f39edec5bd26aecf",
    "type": "function",
    "z": "e0603b84198efa0a",
    "g": "71903805cd0d889c",
    "name": "payload",
    "func": "var data_payload = msg.payload.value.timeSeries[0];\nif (data_payload === undefined){\n    msg.payload = null;\n    return msg;\n}\nconst { \n    sourceInfo: { \n        siteName,\n        siteCode: [{ value: station_id }], \n        geoLocation: { geogLocation },\n    },\n    values\n} = data_payload;\n\nvar dev_id = `usgs-tidal-${station_id}`;\nconst lat = parseFloat(geogLocation.latitude);\nconst lng = parseFloat(geogLocation.longitude);\n\n// Get the correct values array idx as one is measured and the other is predicted\nconst values_idx = values[0].method[0].methodDescription.includes(\"prediction\") ? 1 : 0;\nreturn {\n    ...msg, lat, lng, dev_id,\n    sensor_data: data_payload.values[values_idx].value.map((d) => ({\n        navd88_mm: Math.round(parseFloat(d.value) * 304.8) || undefined,\n        time: Date.parse(d.dateTime),\n    })),\n    update: {\n        dev_id, lat, lng,\n        sensor_name: `${siteName}(${station_id})`\n    },\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 200,
    "y": 440,
    "wires": [
      [
        "7021700bfe7cd70a",
        "9bf57e6249c59ecd"
      ]
    ]
  },
  {
    "id": "7021700bfe7cd70a",
    "type": "switch",
    "z": "e0603b84198efa0a",
    "g": "e08057a01676213c",
    "name": "filter empty",
    "property": "sensor_data",
    "propertyType": "msg",
    "rules": [
      {
        "t": "nnull"
      },
      {
        "t": "null"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 470,
    "y": 220,
    "wires": [
      [
        "9a598d0b33faea12"
      ],
      []
    ]
  },
  {
    "id": "d6f6b3888bd06c8f",
    "type": "function",
    "z": "e0603b84198efa0a",
    "g": "dd8650625e800ec3",
    "name": "Fieldkit POST",
    "func": "msg.payload = [msg.payload];\n\n\nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = 'https://api.fieldkit.org/ttn/webhook?token=33af8a9e936d2ec4c217de125ccfc4b9';\nmsg.headers[\"Content-Type\"]=\"application/json\";\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1120,
    "y": 260,
    "wires": [
      [
        "f0ed6eec16d38a64"
      ]
    ]
  },
  {
    "id": "f0ed6eec16d38a64",
    "type": "http request",
    "z": "e0603b84198efa0a",
    "g": "dd8650625e800ec3",
    "name": "",
    "method": "use",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 1130,
    "y": 300,
    "wires": [
      [
        "98d5bacfccca5213"
      ]
    ]
  },
  {
    "id": "98d5bacfccca5213",
    "type": "function",
    "z": "e0603b84198efa0a",
    "g": "dd8650625e800ec3",
    "name": "HTTP Status",
    "func": "if(msg.statusCode >= 200 && msg.statusCode < 300){\n    msg.response_fail = false;\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1130,
    "y": 340,
    "wires": [
      []
    ]
  },
  {
    "id": "df20dc39e5cd477f",
    "type": "split",
    "z": "e0603b84198efa0a",
    "g": "dd8650625e800ec3",
    "name": "one by one",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 1110,
    "y": 220,
    "wires": [
      [
        "d6f6b3888bd06c8f"
      ]
    ]
  },
  {
    "id": "0f99a1526850ebce",
    "type": "change",
    "z": "e0603b84198efa0a",
    "g": "f0109ec522a5bc3d",
    "name": "datums as payload",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "datums",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 790,
    "y": 120,
    "wires": [
      [
        "a367f5783c8238ec"
      ]
    ]
  },
  {
    "id": "9a598d0b33faea12",
    "type": "postgresql",
    "z": "e0603b84198efa0a",
    "g": "e08057a01676213c",
    "name": "read datum",
    "query": "SELECT \nj.deployment_id, \n-- j.height_navd88_mm,\nj.mllw_navd88_offset_mm as mllw,\nj.mhhw_navd88_offset_mm as mhhw\nFROM sensors s\nLEFT JOIN LATERAL (\n\tSELECT *\n     FROM deployments d\n     WHERE d.dev_id = s.dev_id\n\t AND d.date_down IS NULL\n     ORDER BY d.date_deployed DESC LIMIT 1\n) j ON true\nWHERE s.dev_id = '{{{ msg.dev_id }}}'",
    "postgreSQLConfig": "ec8702db3a5c2dc7",
    "split": false,
    "rowsPerMsg": 1,
    "outputs": 1,
    "x": 470,
    "y": 280,
    "wires": [
      [
        "61d22faeaf35d53b"
      ]
    ]
  },
  {
    "id": "7c3270a21d74c18d",
    "type": "postgresql",
    "z": "e0603b84198efa0a",
    "g": "4c4f3a4a36bdf543",
    "name": "",
    "query": "",
    "postgreSQLConfig": "ec8702db3a5c2dc7",
    "split": false,
    "rowsPerMsg": 1,
    "outputs": 1,
    "x": 1310,
    "y": 440,
    "wires": [
      []
    ]
  },
  {
    "id": "dad809885188fc08",
    "type": "function",
    "z": "e0603b84198efa0a",
    "g": "4c4f3a4a36bdf543",
    "name": "Prepare insert",
    "func": "const { \n    payload: tables,\n    dev_id, deployment_id\n} = msg;\n\nconst sqlInsertObject = ({ table, schema, data }) => {\n    if(!data || !table) return;\n    // get all the columns we're updating\n    const columns = Object.keys(data.reduce((d, o) => ({...o, ...d}), {}));\n    // collect the params as a flat list\n    let j = 1;\n    let params = []\n    const values = data.map((d, i) => \n        `\\n(${columns.map(c => {\n            params.push(d[c]);\n            return `$${j++}`;\n        }).join(', ')})`\n    ).join(', ');\n    // construct the query\n    const query = `INSERT INTO ${schema || 'public'}.${table} (${columns}) VALUES ${values};`\n    return [query, params]\n}\n\nlet queries = [];\n\nfor(let name in tables) {\n    let t = tables[name];\n    t = Array.isArray(t) ? t : [t];\n    let data = t.map(d => ({ \n        dev_id, deployment_id,\n        ...d, \n        time: new Date(parseInt(d.time)).toISOString(),\n    }))\n    \n    let [query, params] = sqlInsertObject({ \n        table: name,\n        schema: 'live',\n        data\n    })\n    if (params.length === 0) continue;\n    queries.push({ query, params });//, data\n}\n\n\n\nreturn [ queries ];",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1110,
    "y": 440,
    "wires": [
      [
        "7c3270a21d74c18d"
      ]
    ]
  },
  {
    "id": "08ce9ebb98a5b0dd",
    "type": "debug",
    "z": "e0603b84198efa0a",
    "g": "480b9506fde72aba",
    "name": "dev_id",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "dev_id",
    "targetType": "msg",
    "statusVal": "dev_id",
    "statusType": "auto",
    "x": 210,
    "y": 220,
    "wires": []
  },
  {
    "id": "9bf57e6249c59ecd",
    "type": "debug",
    "z": "e0603b84198efa0a",
    "g": "71903805cd0d889c",
    "name": "dev_id",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "dev_id",
    "targetType": "msg",
    "statusVal": "dev_id",
    "statusType": "auto",
    "x": 210,
    "y": 480,
    "wires": []
  },
  {
    "id": "cccf8d3138559f36",
    "type": "function",
    "z": "e0603b84198efa0a",
    "g": "f0109ec522a5bc3d",
    "name": "get offsets",
    "func": "return {\n    ...msg,\n    // create object like {mllw: (mm), mhhw: (mm)}\n    prev: msg.payload,\n    payload: Object.fromEntries(msg.payload.map(d => [\n        d.t_v_frame, \n        parseFloat(d.t_z) * 1000,\n    ])),\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 850,
    "y": 280,
    "wires": [
      [
        "7d5ef9f277d6d75b",
        "7d0057e8e7cee19f",
        "e45b81a2eb2be9b4"
      ]
    ]
  },
  {
    "id": "7d0057e8e7cee19f",
    "type": "postgresql",
    "z": "e0603b84198efa0a",
    "g": "9352ad6f956a55e5",
    "name": "update offsets",
    "query": "UPDATE deployments SET \nmllw_navd88_offset_mm = \n    '{{{ msg.payload.mllw }}}',\nmhhw_navd88_offset_mm = \n    '{{{ msg.payload.mhhw }}}'\nWHERE deployment_id = '{{{ msg.deployment_id }}}';\n",
    "postgreSQLConfig": "ec8702db3a5c2dc7",
    "split": false,
    "rowsPerMsg": 1,
    "outputs": 1,
    "x": 1120,
    "y": 120,
    "wires": [
      []
    ]
  },
  {
    "id": "7d5ef9f277d6d75b",
    "type": "function",
    "z": "e0603b84198efa0a",
    "g": "c82e10aebf681f8e",
    "name": "Setup payload",
    "func": "return {\n    ...msg,\n    payload: {\n        tidal_data: msg.sensor_data.map((table) => {\n            if(table.navd88_mm !== undefined) {\n                msg.datums.forEach((name) => {\n                    table[`${name}_mm`] = table.navd88_mm + msg.payload[name];\n                })\n            }\n            return table;\n        }),\n    }\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 820,
    "y": 440,
    "wires": [
      [
        "dad809885188fc08"
      ]
    ]
  },
  {
    "id": "e45b81a2eb2be9b4",
    "type": "debug",
    "z": "e0603b84198efa0a",
    "g": "f0109ec522a5bc3d",
    "name": "new",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "true",
    "targetType": "full",
    "statusVal": "msg.dev_id\t& \" | \" & \tmsg.payload.mhhw\t& \" | \" & \tmsg.payload.mllw",
    "statusType": "jsonata",
    "x": 830,
    "y": 320,
    "wires": []
  },
  {
    "id": "52169d2330339a26",
    "type": "debug",
    "z": "e0603b84198efa0a",
    "g": "e08057a01676213c",
    "name": "existing",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "msg.dev_id\t& \" | \" & \tmsg.payload.mhhw\t& \" | \" & \tmsg.payload.mllw",
    "targetType": "jsonata",
    "statusVal": "msg.dev_id\t& \" | \" & \tmsg.payload.mhhw\t& \" | \" & \tmsg.payload.mllw",
    "statusType": "auto",
    "x": 560,
    "y": 420,
    "wires": []
  },
  {
    "id": "a333bbcff1929612",
    "type": "inject",
    "z": "e3941d68335018ed",
    "g": "26e52242665c9700",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "300",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payloadType": "date",
    "x": 270,
    "y": 60,
    "wires": [
      [
        "d08956275a10d893"
      ]
    ]
  },
  {
    "id": "6f0b53f20d15d5d8",
    "type": "http request",
    "z": "e3941d68335018ed",
    "g": "26e52242665c9700",
    "name": "GW ID GET",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://eu1.cloud.thethings.network/api/v3/users/{{{tti_user}}}/gateways",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 270,
    "y": 140,
    "wires": [
      [
        "cb2e8564e10f832a",
        "cc96019d0c315e65"
      ]
    ]
  },
  {
    "id": "cb2e8564e10f832a",
    "type": "change",
    "z": "e3941d68335018ed",
    "g": "26e52242665c9700",
    "name": "move gateways to payload",
    "rules": [
      {
        "t": "move",
        "p": "payload.gateways",
        "pt": "msg",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 220,
    "y": 180,
    "wires": [
      [
        "c53d8aedbedb0c01"
      ]
    ]
  },
  {
    "id": "c53d8aedbedb0c01",
    "type": "split",
    "z": "e3941d68335018ed",
    "g": "26e52242665c9700",
    "name": "one by one",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 270,
    "y": 220,
    "wires": [
      [
        "173f3a7cea0eb1df"
      ]
    ]
  },
  {
    "id": "d55cefb55950509e",
    "type": "http request",
    "z": "e3941d68335018ed",
    "g": "06b2d6dfc4c5fa10",
    "name": "GW stat GET",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://nam1.cloud.thethings.network/api/v3/gs/gateways/{{{payload.ids.gateway_id}}}/connection/stats",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 570,
    "y": 220,
    "wires": [
      [
        "bdb138bb6fe7fc89",
        "471f144e3736b7ed"
      ]
    ]
  },
  {
    "id": "173f3a7cea0eb1df",
    "type": "change",
    "z": "e3941d68335018ed",
    "g": "06b2d6dfc4c5fa10",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "gateway_id",
        "pt": "msg",
        "to": "payload.ids.gateway_id",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 540,
    "y": 140,
    "wires": [
      [
        "f5f13934eb8ab41d"
      ]
    ]
  },
  {
    "id": "bdb138bb6fe7fc89",
    "type": "function",
    "z": "e3941d68335018ed",
    "g": "54b2fd6f819586fd",
    "name": "Setup gateway payload",
    "func": "if (msg.statusCode == 404){\n    return undefined\n}\n\nvar gateway_id = msg.gateway_id;\nvar last_uplink_dt = Date.parse(msg.payload.last_uplink_received_at);\nvar uplink_cnt = parseInt(msg.payload.uplink_count);\nvar downlink_cnt = parseInt(msg.payload.downlink_count);\n\nvar status_object = msg.payload.last_status;\n\nvar lat;\nvar lng;\nvar altitude;\n\nnode.warn(status_object);\nif (typeof status_object.antenna_locations !== 'undefined'){\n    lat = status_object.antenna_locations[0].latitude || undefined;\n    lng = status_object.antenna_locations[0].longitude || undefined;\n    altitude = status_object.antenna_locations[0].altitude || undefined;\n}\n\nvar ip_addr;\n\nif (typeof status_object.ip !== 'undefined'){\n    ip_addr = status_object.ip[0] || undefined;\n}\n\nvar uplink_ok = status_object.metrics.rxok;\nvar uplink_recv = status_object.metrics.rxin;\nvar ack_recv = status_object.metrics.ackr;\nvar downlink_ok = status_object.metrics.txok;\nvar downlink_recv = status_object.metrics.txin;\n\nvar ts = Date.parse(status_object.time);\n\nvar fields = {\n            uplink_ok: uplink_ok || undefined,\n            uplink_recv: uplink_recv || undefined,\n            ack_recv: ack_recv || undefined,\n            downlink_ok: downlink_ok || undefined,\n            downlink_recv: downlink_recv || undefined,\n            last_uplink_dt: last_uplink_dt || undefined,\n            uplink_cnt: uplink_cnt || undefined,\n            downlink_cnt: downlink_cnt || undefined\n            \n        };\n        \nvar tags = {\n            gateway_id: gateway_id,\n            lat: lat,\n            lng: lng,\n            ip_addr: ip_addr || undefined,\n            // TODO: add human readable name to GW creation process scripts\n            gateway_name: undefined\n        };\n        \nmsg.payload = [\n    {\n        measurement: 'gateway',\n        fields,\n        tags,\n        timestamp: ts\n    }\n    ];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 850,
    "y": 180,
    "wires": [
      [
        "91c134739839b339"
      ]
    ]
  },
  {
    "id": "91c134739839b339",
    "type": "debug",
    "z": "e3941d68335018ed",
    "g": "54b2fd6f819586fd",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 1050,
    "y": 180,
    "wires": []
  },
  {
    "id": "d08956275a10d893",
    "type": "credentials",
    "z": "e3941d68335018ed",
    "g": "26e52242665c9700",
    "name": "TTI token store",
    "props": [
      {
        "value": "tti_user",
        "type": "msg"
      },
      {
        "value": "headers.Authorization",
        "type": "msg"
      }
    ],
    "x": 260,
    "y": 100,
    "wires": [
      [
        "6f0b53f20d15d5d8"
      ]
    ]
  },
  {
    "id": "f5f13934eb8ab41d",
    "type": "credentials",
    "z": "e3941d68335018ed",
    "g": "06b2d6dfc4c5fa10",
    "name": "TTI token store",
    "props": [
      {
        "value": "tti_user",
        "type": "msg"
      },
      {
        "value": "headers.Authorization",
        "type": "msg"
      }
    ],
    "x": 560,
    "y": 180,
    "wires": [
      [
        "d55cefb55950509e"
      ]
    ]
  },
  {
    "id": "cc96019d0c315e65",
    "type": "debug",
    "z": "e3941d68335018ed",
    "name": "debug 46",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 480,
    "y": 60,
    "wires": []
  },
  {
    "id": "471f144e3736b7ed",
    "type": "debug",
    "z": "e3941d68335018ed",
    "name": "debug 47",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 780,
    "y": 100,
    "wires": []
  },
  {
    "id": "8972b54cf9c1ada4",
    "type": "http request",
    "z": "fe39854b38341397",
    "g": "1cf976c69d3a9eae",
    "name": "TTN: POST identity server",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://eu1.cloud.thethings.network/api/v3/applications/{{{app_id}}}/devices",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 590,
    "y": 180,
    "wires": [
      [
        "cd641b9e72037852",
        "11d343eed6225d54"
      ]
    ]
  },
  {
    "id": "1aac4e4668e393a9",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "1cf976c69d3a9eae",
    "name": "TTN prepare network server",
    "func": "\nlet { dev_id, app_id, dev_eui, join_eui } = msg;\nreturn {\n   ...msg,\n   headers: { Authorization: msg.tti_token },\n   payload: {\n      \"end_device\":{\n         \"supports_join\": true,\n         \"supports_class_c\": true,\n       //   \"multicast\": true,\n         \"lorawan_version\": \"MAC_V1_0_3\",\n         \"ids\":{\n            \"device_id\": dev_id,\n            \"dev_eui\": dev_eui,\n            \"join_eui\": join_eui,\n            \"application_ids\":{\n               \"application_id\": app_id\n            }\n         },\n         \"frequency_plan_id\":\"US_902_928_FSB_2\",\n         \"lorawan_phy_version\":\"PHY_V1_0_3_REV_A\",\n         \"mac_settings\":{\n            \"class_c_timeout\":\"60s\",\n            \"supports_32_bit_f_cnt\": true\n         },\n         \"version_ids\":{\n             \"band_id\":\"US_902_928\"\n         }\n      },\n      \"field_mask\":{\n         \"paths\":[\n            \"supports_join\",\n            \"supports_class_c\",\n           //  \"multicast\",\n            \"lorawan_version\",\n            \"ids.device_id\",\n            \"ids.dev_eui\",\n            \"ids.join_eui\",\n            \"ids.application_ids.application_id\",\n            \"frequency_plan_id\",\n            \"lorawan_phy_version\",\n            \"mac_settings.class_c_timeout\",\n            \"mac_settings.supports_32_bit_f_cnt\",\n            \"version_ids.band_id\"\n         ]\n      }\n   }\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 300,
    "y": 260,
    "wires": [
      [
        "5a1b49e415ee35dc"
      ]
    ]
  },
  {
    "id": "5a1b49e415ee35dc",
    "type": "http request",
    "z": "fe39854b38341397",
    "g": "1cf976c69d3a9eae",
    "name": "TTN: POST network server",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://nam1.cloud.thethings.network/api/v3/ns/applications/{{{app_id}}}/devices",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 600,
    "y": 260,
    "wires": [
      [
        "cc48325095a80a21",
        "bb94c91755f77f01"
      ]
    ]
  },
  {
    "id": "c195ed1d211ff08d",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "1cf976c69d3a9eae",
    "name": "TTN: prepare identity server",
    "func": "let { dev_id, app_id, dev_eui, join_eui } = msg;\nreturn {\n   ...msg,\n   headers: { Authorization: msg.tti_token },\n   payload: {\n      \"end_device\":{\n         \"name\": dev_id,\n         \"description\": dev_id,\n         \"ids\":{\n            \"device_id\": dev_id,\n            \"dev_eui\": dev_eui,\n            \"join_eui\": join_eui\n         },\n         \"join_server_address\":\"nam1.cloud.thethings.network\",\n         \"network_server_address\":\"nam1.cloud.thethings.network\",\n         \"application_server_address\":\"nam1.cloud.thethings.network\",\n      },\n      \"field_mask\":{\n         \"paths\":[\n            \"ids.device_id\",\n            \"ids.dev_eui\",\n            \"ids.join_eui\",\n            \"join_server_address\",\n            \"network_server_address\",\n            \"application_server_address\"\n         ]\n      }\n   }\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 300,
    "y": 180,
    "wires": [
      [
        "8972b54cf9c1ada4"
      ]
    ]
  },
  {
    "id": "75b76071b07f2f23",
    "type": "http request",
    "z": "fe39854b38341397",
    "g": "1cf976c69d3a9eae",
    "name": "TTN: POST app server",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://nam1.cloud.thethings.network/api/v3/as/applications/{{{app_id}}}/devices",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 580,
    "y": 300,
    "wires": [
      [
        "a18955d77d8dcc75"
      ]
    ]
  },
  {
    "id": "4d07ac4996dc1d74",
    "type": "http request",
    "z": "fe39854b38341397",
    "g": "1cf976c69d3a9eae",
    "name": "TTN: POST join server",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://nam1.cloud.thethings.network/api/v3/js/applications/{{{app_id}}}/devices",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 580,
    "y": 220,
    "wires": [
      [
        "1aac4e4668e393a9",
        "722304fe9cce61a4"
      ]
    ]
  },
  {
    "id": "cc48325095a80a21",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "1cf976c69d3a9eae",
    "name": "TTN: prepare app server",
    "func": "let { dev_id, app_id, dev_eui, join_eui } = msg;\nreturn {\n   ...msg,\n   headers: { Authorization: msg.tti_token },\n   payload: {\n      \"end_device\":{\n         \"ids\":{\n            \"device_id\": dev_id,\n            \"dev_eui\": dev_eui,\n            \"join_eui\": join_eui,\n            \"application_ids\":{\n               \"application_id\": app_id\n            }\n         },\n         \"version_ids\": {}\n      },\n      \"field_mask\":{\n         \"paths\":[\n            \"ids.device_id\",\n            \"ids.dev_eui\",\n            \"ids.join_eui\",\n            \"ids.application_ids.application_id\",\n            \"version_ids\"\n         ]\n      }\n   },\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 310,
    "y": 300,
    "wires": [
      [
        "75b76071b07f2f23"
      ]
    ]
  },
  {
    "id": "bcfa2c297dc4e7cf",
    "type": "function",
    "z": "fe39854b38341397",
    "name": "",
    "func": "if (msg.statusCode == 200){\n    msg.payload = msg.dev_id + \" created successfully\";\n}\n\n\nlet dev_eui = msg.dev_eui.match(/.{1,2}/g);\nlet dev_eui_str = \"\";\nfor (let n=0, l=dev_eui.length; n<l; n++) {\n\tdev_eui_str += \"0x\" + dev_eui[n] + \", \";\n}\nmsg.dev_eui_str = dev_eui_str.replace(/,\\s*$/, \"\");\n\nlet join_eui = msg.join_eui.match(/.{1,2}/g);\nlet join_eui_str = \"\";\nfor (let n=0, l=join_eui.length; n<l; n++) {\n\tjoin_eui_str += \"0x\" + join_eui[n] + \", \";\n}\nmsg.join_eui_str = join_eui_str.replace(/,\\s*$/, \"\");\n\n\nlet app_key = msg.app_key.match(/.{1,2}/g);\nlet app_key_str = \"\";\nfor (let n=0, l=app_key.length; n<l; n++) {\n\tapp_key_str += \"0x\" + app_key[n] + \", \";\n}\nmsg.app_key_str = app_key_str.replace(/,\\s*$/, \"\");\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 2080,
    "y": 80,
    "wires": [
      []
    ]
  },
  {
    "id": "2934c4cac4f2c17e",
    "type": "credentials",
    "z": "fe39854b38341397",
    "name": "TTI token store",
    "props": [
      {
        "value": "tti_user",
        "type": "msg"
      },
      {
        "value": "tti_token",
        "type": "msg"
      }
    ],
    "x": 2076.000057220459,
    "y": 223.00000667572021,
    "wires": [
      [
        "f4e63a6eb1a0a4fd"
      ]
    ]
  },
  {
    "id": "11d343eed6225d54",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "1cf976c69d3a9eae",
    "name": "TTN: prepare join server",
    "func": "let { dev_id, app_id, dev_eui, join_eui, app_key } = msg;\nreturn {\n   ...msg,\n   headers: { Authorization: msg.tti_token },\n   payload: {\n      \"end_device\":{\n         \"ids\":{\n            \"device_id\": dev_id,\n            \"dev_eui\": dev_eui,\n            \"join_eui\": join_eui,\n            \"application_ids\":{\n                \"application_id\": app_id\n             }\n         },\n         \"network_server_address\": \"nam1.cloud.thethings.network\",\n         \"application_server_address\": \"nam1.cloud.thethings.network\",\n         \"root_keys\": {\n            \"app_key\": {\n              \"key\": app_key,\n            }\n         }\n      },\n      \"field_mask\":{\n         \"paths\":[\n            \"ids.device_id\",\n            \"ids.dev_eui\",\n            \"ids.join_eui\",\n            \"ids.application_ids.application_id\",\n            \"network_server_address\",\n            \"application_server_address\",\n            \"root_keys.app_key.key\"\n         ]\n      }\n   },\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 310,
    "y": 220,
    "wires": [
      [
        "4d07ac4996dc1d74"
      ]
    ]
  },
  {
    "id": "cb3ecea78d2cc2a3",
    "type": "http in",
    "z": "fe39854b38341397",
    "name": "",
    "url": "ping",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 1900,
    "y": 280,
    "wires": [
      [
        "17f3a0921f315ef9"
      ]
    ]
  },
  {
    "id": "ac822440259a4915",
    "type": "http response",
    "z": "fe39854b38341397",
    "name": "",
    "statusCode": "500",
    "headers": {},
    "x": 2220,
    "y": 280,
    "wires": []
  },
  {
    "id": "17f3a0921f315ef9",
    "type": "template",
    "z": "fe39854b38341397",
    "name": "",
    "field": "payload",
    "fieldType": "msg",
    "format": "handlebars",
    "syntax": "mustache",
    "template": "This is the payload: {{payload}} !",
    "output": "str",
    "x": 2060,
    "y": 280,
    "wires": [
      [
        "ac822440259a4915"
      ]
    ]
  },
  {
    "id": "f4e63a6eb1a0a4fd",
    "type": "function",
    "z": "fe39854b38341397",
    "name": "full",
    "func": "\nconst genRanHex = size => [...Array(size)].map(\n    () => Math.floor(Math.random() * 16).toString(16)\n).join('');\n\nconst str2hex = x => {\n    let out = \"\";\n    for (let n=0, l=x.length; n<l; n++) {\n    \tout += Number(x.charCodeAt(n)).toString(16);\n    }\n    return out;\n}\n\n// automatically get the field_mask\nconst getKeyListParams = (key, d) => {\n  return { [key]: d, \"field_mask\": { paths: getKeyList(d, []) } }\n}\nconst getKeyList = (d, keys, key) => {\n  if(d && typeof d === 'object') {\n    for(var k in d) {\n      getKeyList(d[k], keys, [...(key||[]), k]);\n    }\n  } else {\n    keys.push(key.join(\".\"));\n  }\n  return keys;\n}\n\n\n// Main Code\n\n\n\nconst { dev_id, app_id } = msg.req.query;\n// dev_eui is dev_id as a hex string\nlet dev_eui = str2hex(dev_id);\nconst join_eui = genRanHex(16).toUpperCase();\nconst app_key = genRanHex(32).toUpperCase();\n\nconst ns = \"nam1.cloud.thethings.network\";\n\nreturn {\n    ...msg,\n    dev_id, dev_eui, join_eui, app_id, app_key,\n    headers: { Authorization: msg.tti_token },\n    payload: {\n    //   \"end_device\":\n       ...getKeyListParams(\"end_device\", {\n          \"ids\":{\n             \"device_id\": dev_id,\n             \"dev_eui\": dev_eui,\n             \"join_eui\": join_eui,\n             \"application_ids\":{\n                \"application_id\": app_id\n             },\n          },\n\n          \"supports_join\": true,\n          \"supports_class_c\": true,\n          // \"multicast\": true,\n          \"lorawan_version\": \"MAC_V1_0_3\",\n          \"frequency_plan_id\":\"US_902_928_FSB_2\",\n          \"lorawan_phy_version\":\"PHY_V1_0_3_REV_A\",\n          \"mac_settings\":{\n             \"class_c_timeout\":\"60s\",\n             \"supports_32_bit_f_cnt\": true\n          },\n          \n          \"join_server_address\": ns,\n          \"network_server_address\": ns,\n          \"application_server_address\": ns,\n\n          \"root_keys\":{\n             \"app_key\":{\n                \"key\": app_key\n             }\n          },\n          \"version_ids\":{},\n       }),\n    //   \"field_mask\":{\n    //       \"paths\":[\n    //          \"ids.device_id\",\n    //          \"ids.dev_eui\",\n    //          \"ids.join_eui\",\n    //          \"ids.application_ids.application_id\",\n             \n    //          \"supports_join\",\n    //          \"supports_class_c\",\n    //         //  \"multicast\",\n    //          \"lorawan_version\",\n             \n    //          \"frequency_plan_id\",\n    //          \"lorawan_phy_version\",\n    //          \"mac_settings.class_c_timeout\",\n    //          \"mac_settings.supports_32_bit_f_cnt\",\n    //          \"version_ids.band_id\",\n             \n    //          \"join_server_address\",\n    //          \"network_server_address\",\n    //          \"application_server_address\",\n\n    //          \"root_keys.app_key.key\",\n    //         //  \"version_ids\",\n    //       ]\n    //   }\n    }\n};\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 2226.000057220459,
    "y": 223.00000667572021,
    "wires": [
      []
    ]
  },
  {
    "id": "9670a3a85547471d",
    "type": "http request",
    "z": "fe39854b38341397",
    "name": "TTN register",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://nam1.cloud.thethings.network/api/v3/js/applications/{{{app_id}}}/devices",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 2190,
    "y": 160,
    "wires": [
      [
        "2cc4e96be96168eb"
      ]
    ]
  },
  {
    "id": "cb31c20587ad4b50",
    "type": "inject",
    "z": "fe39854b38341397",
    "name": "fake device",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "req.query",
        "v": "{\"dev_id\":\"__-00001\",\"app_id\":\"floodnet-lab\"}",
        "vt": "json"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 1906.000057220459,
    "y": 223.00000667572021,
    "wires": [
      [
        "2934c4cac4f2c17e"
      ]
    ]
  },
  {
    "id": "2cc4e96be96168eb",
    "type": "debug",
    "z": "fe39854b38341397",
    "name": "debug 22",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 2380,
    "y": 140,
    "wires": []
  },
  {
    "id": "1aafda41b8c65617",
    "type": "debug",
    "z": "fe39854b38341397",
    "name": "debug 23",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 2380,
    "y": 220,
    "wires": []
  },
  {
    "id": "2064f658c826eb1b",
    "type": "comment",
    "z": "fe39854b38341397",
    "g": "1cf976c69d3a9eae",
    "name": "API Reference",
    "info": "[api reference](https://www.thethingsindustries.com/docs/reference/api/end_device/)",
    "x": 790,
    "y": 120,
    "wires": []
  },
  {
    "id": "561e043bbfa370da",
    "type": "comment",
    "z": "fe39854b38341397",
    "g": "1cf976c69d3a9eae",
    "name": "for some reason TTN requires you to manage 4 different servers - why this isn't all handled inside TTN is a mystery",
    "info": "",
    "x": 470,
    "y": 80,
    "wires": []
  },
  {
    "id": "bb968b24ab89c947",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "1cf976c69d3a9eae",
    "name": "generate keys/euis",
    "func": "const genRanHex = size => [...Array(size)].map(\n   () => Math.floor(Math.random() * 16).toString(16)\n).join('');\n\nnode.warn(msg);\nlet { dev_id, app_id } = msg.req.query;\nconst join_eui = genRanHex(16).toUpperCase();\nconst app_key = genRanHex(32).toUpperCase();\n\nlet dev_eui = \"\";\nfor (let n=0, l=dev_id.length; n<l; n++) {\n   dev_eui += Number(dev_id.charCodeAt(n)).toString(16);\n}\n\nreturn {\n    ...msg,\n    dev_id, dev_eui, join_eui, app_id, app_key,\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 590,
    "y": 120,
    "wires": [
      [
        "c195ed1d211ff08d"
      ]
    ]
  },
  {
    "id": "4829dc56da8fd1d7",
    "type": "credentials",
    "z": "fe39854b38341397",
    "g": "1cf976c69d3a9eae",
    "name": "TTI token store",
    "props": [
      {
        "value": "tti_user",
        "type": "msg"
      },
      {
        "value": "tti_token",
        "type": "msg"
      }
    ],
    "x": 340,
    "y": 120,
    "wires": [
      [
        "bb968b24ab89c947"
      ]
    ]
  },
  {
    "id": "fd0171a459e6f5ed",
    "type": "inject",
    "z": "fe39854b38341397",
    "g": "1cf976c69d3a9eae",
    "name": "fake device",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "req.query",
        "v": "{\"dev_id\":\"xx-00001\",\"app_id\":\"floodnet-lab\"}",
        "vt": "json"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 150,
    "y": 120,
    "wires": [
      [
        "4829dc56da8fd1d7"
      ]
    ]
  },
  {
    "id": "330e6aa1411bc491",
    "type": "http request",
    "z": "fe39854b38341397",
    "g": "f199da2ee9eab818",
    "name": "TTN: DELETE identity server",
    "method": "DELETE",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://eu1.cloud.thethings.network/api/v3/applications/{{{app_id}}}/devices/{{{dev_id}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 620,
    "y": 880,
    "wires": [
      [
        "1b4c7a76277cce57"
      ]
    ]
  },
  {
    "id": "4bf1b91d550a7e66",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "f199da2ee9eab818",
    "name": "TTN prepare network server",
    "func": "let { dev_id, app_id } = msg;\nreturn {\n   ...msg,\n   headers: { Authorization: msg.tti_token },\n   payload: {\n      \"end_device\":{\n         \"ids\":{\n            \"device_id\": dev_id,\n            \"application_ids\":{\n               \"application_id\": app_id\n            }\n         },\n      },\n      \"field_mask\":{\n         \"paths\":[\n            \"ids.device_id\",\n            \"ids.application_ids.application_id\",\n         ]\n      }\n   },\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 321,
    "y": 766,
    "wires": [
      [
        "75bc547a50c24d7f"
      ]
    ]
  },
  {
    "id": "75bc547a50c24d7f",
    "type": "http request",
    "z": "fe39854b38341397",
    "g": "f199da2ee9eab818",
    "name": "TTN: DELETE network server",
    "method": "DELETE",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://nam1.cloud.thethings.network/api/v3/ns/applications/{{{app_id}}}/devices/{{{dev_id}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 621,
    "y": 766,
    "wires": [
      [
        "76258b5d225eef93",
        "b4ddb89eb73e270f"
      ]
    ]
  },
  {
    "id": "04f42ae208164718",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "f199da2ee9eab818",
    "name": "TTN: prepare identity server",
    "func": "let { dev_id, app_id } = msg;\nreturn {\n   ...msg,\n   headers: { Authorization: msg.tti_token },\n   payload: {\n      \"end_device\":{\n         \"ids\":{\n            \"device_id\": dev_id,\n            \"application_ids\":{\n               \"application_id\": app_id\n            }\n         },\n      },\n      \"field_mask\":{\n         \"paths\":[\n            \"ids.device_id\",\n            \"ids.application_ids.application_id\",\n         ]\n      }\n   },\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 320,
    "y": 880,
    "wires": [
      [
        "330e6aa1411bc491"
      ]
    ]
  },
  {
    "id": "94cd72125ea59ee9",
    "type": "http request",
    "z": "fe39854b38341397",
    "g": "f199da2ee9eab818",
    "name": "TTN: DELETE join server",
    "method": "DELETE",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://nam1.cloud.thethings.network/api/v3/js/applications/{{{app_id}}}/devices/{{{dev_id}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 612,
    "y": 823,
    "wires": [
      [
        "04f42ae208164718",
        "51f7a7d068d61421"
      ]
    ]
  },
  {
    "id": "8d53f43b7fe37105",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "f199da2ee9eab818",
    "name": "TTN: prepare app server",
    "func": "let { dev_id, app_id } = msg;\nreturn {\n   ...msg,\n   headers: { Authorization: msg.tti_token },\n   payload: {\n      \"end_device\":{\n         \"ids\":{\n            \"device_id\": dev_id,\n            \"application_ids\":{\n               \"application_id\": app_id\n            }\n         },\n      },\n      \"field_mask\":{\n         \"paths\":[\n            \"ids.device_id\",\n            \"ids.application_ids.application_id\",\n         ]\n      }\n   },\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 330,
    "y": 712,
    "wires": [
      [
        "8cb24cc3cde02efb"
      ]
    ]
  },
  {
    "id": "76258b5d225eef93",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "f199da2ee9eab818",
    "name": "TTN: prepare join server",
    "func": "let { dev_id, app_id } = msg;\nreturn {\n   ...msg,\n   headers: { Authorization: msg.tti_token },\n   payload: {\n      \"end_device\":{\n         \"ids\":{\n            \"device_id\": dev_id,\n            \"application_ids\":{\n               \"application_id\": app_id\n            }\n         },\n      },\n      \"field_mask\":{\n         \"paths\":[\n            \"ids.device_id\",\n            \"ids.application_ids.application_id\",\n         ]\n      }\n   },\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 332,
    "y": 823,
    "wires": [
      [
        "94cd72125ea59ee9"
      ]
    ]
  },
  {
    "id": "24f3e2b4cf9f9bec",
    "type": "comment",
    "z": "fe39854b38341397",
    "g": "f199da2ee9eab818",
    "name": "for some reason TTN requires you to manage 4 different servers - why this isn't all handled inside TTN is a mystery",
    "info": "",
    "x": 470,
    "y": 620,
    "wires": []
  },
  {
    "id": "489e4891d55db9c8",
    "type": "comment",
    "z": "fe39854b38341397",
    "g": "f199da2ee9eab818",
    "name": "API Reference",
    "info": "[api reference](https://www.thethingsindustries.com/docs/reference/api/end_device/)",
    "x": 810,
    "y": 658,
    "wires": []
  },
  {
    "id": "8cb24cc3cde02efb",
    "type": "http request",
    "z": "fe39854b38341397",
    "g": "f199da2ee9eab818",
    "name": "TTN: DELETE app server",
    "method": "DELETE",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://nam1.cloud.thethings.network/api/v3/as/applications/{{{app_id}}}/devices/{{{dev_id}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 610,
    "y": 712,
    "wires": [
      [
        "4bf1b91d550a7e66",
        "7b34c483c70614a6"
      ]
    ]
  },
  {
    "id": "0c3df681268e55ce",
    "type": "credentials",
    "z": "fe39854b38341397",
    "g": "f199da2ee9eab818",
    "name": "TTI token store",
    "props": [
      {
        "value": "tti_user",
        "type": "msg"
      },
      {
        "value": "tti_token",
        "type": "msg"
      }
    ],
    "x": 360,
    "y": 658,
    "wires": [
      [
        "0e6bf01e8f93c81f"
      ]
    ]
  },
  {
    "id": "2227da1c40b541d1",
    "type": "inject",
    "z": "fe39854b38341397",
    "g": "f199da2ee9eab818",
    "name": "fake device",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "req.query",
        "v": "{\"dev_id\":\"xx-00001\",\"app_id\":\"floodnet-lab\"}",
        "vt": "json"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 150,
    "y": 660,
    "wires": [
      [
        "0c3df681268e55ce"
      ]
    ]
  },
  {
    "id": "cd641b9e72037852",
    "type": "debug",
    "z": "fe39854b38341397",
    "g": "1cf976c69d3a9eae",
    "name": "debug 24",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 840,
    "y": 180,
    "wires": []
  },
  {
    "id": "722304fe9cce61a4",
    "type": "debug",
    "z": "fe39854b38341397",
    "g": "1cf976c69d3a9eae",
    "name": "debug 25",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 840,
    "y": 220,
    "wires": []
  },
  {
    "id": "bb94c91755f77f01",
    "type": "debug",
    "z": "fe39854b38341397",
    "g": "1cf976c69d3a9eae",
    "name": "debug 26",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 840,
    "y": 260,
    "wires": []
  },
  {
    "id": "a18955d77d8dcc75",
    "type": "debug",
    "z": "fe39854b38341397",
    "g": "1cf976c69d3a9eae",
    "name": "debug 27",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 840,
    "y": 300,
    "wires": []
  },
  {
    "id": "1daa01f9df6dccb9",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "fc41ebbc44e32af4",
    "name": "TTN: prepare get device",
    "func": "let { dev_id, app_id } = msg.req.query;\nreturn {\n   ...msg,\n   dev_id, app_id,\n   headers: { Authorization: msg.tti_token },\n   payload: {\n    //   \"field_mask\": {\n    //       \"paths\": [\n    //           \"name\",\n    //           \"description\",\n    //           \"ids.join_eui\"\n    //         ]\n    //   },\n   },\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 350,
    "y": 460,
    "wires": [
      [
        "7e05410a88fb294a",
        "cdf98f20a89fc891",
        "cad9920d725d4528",
        "62b8693abdab8ada"
      ]
    ]
  },
  {
    "id": "dc82d3698ed4a8b3",
    "type": "inject",
    "z": "fe39854b38341397",
    "g": "fc41ebbc44e32af4",
    "name": "fake device",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "req.query",
        "v": "{\"dev_id\":\"xx-00001\",\"app_id\":\"floodnet-lab\"}",
        "vt": "json"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 150,
    "y": 400,
    "wires": [
      [
        "2dd0310cf0b80452"
      ]
    ]
  },
  {
    "id": "2dd0310cf0b80452",
    "type": "credentials",
    "z": "fe39854b38341397",
    "g": "fc41ebbc44e32af4",
    "name": "TTI token store",
    "props": [
      {
        "value": "tti_user",
        "type": "msg"
      },
      {
        "value": "tti_token",
        "type": "msg"
      }
    ],
    "x": 340,
    "y": 400,
    "wires": [
      [
        "1daa01f9df6dccb9"
      ]
    ]
  },
  {
    "id": "7e05410a88fb294a",
    "type": "http request",
    "z": "fe39854b38341397",
    "g": "fc41ebbc44e32af4",
    "name": "TTN: GET identity server",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://eu1.cloud.thethings.network/api/v3/applications/{{{app_id}}}/devices/{{{dev_id}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 630,
    "y": 400,
    "wires": [
      [
        "cc642b6f259125fa"
      ]
    ]
  },
  {
    "id": "cc642b6f259125fa",
    "type": "debug",
    "z": "fe39854b38341397",
    "g": "fc41ebbc44e32af4",
    "name": "debug 28",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 840,
    "y": 400,
    "wires": []
  },
  {
    "id": "cdf98f20a89fc891",
    "type": "http request",
    "z": "fe39854b38341397",
    "g": "fc41ebbc44e32af4",
    "name": "TTN: GET join server",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://eu1.cloud.thethings.network/api/v3/js/applications/{{{app_id}}}/devices/{{{dev_id}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 620,
    "y": 440,
    "wires": [
      [
        "6bac2e834bbec4b6"
      ]
    ]
  },
  {
    "id": "6bac2e834bbec4b6",
    "type": "debug",
    "z": "fe39854b38341397",
    "g": "fc41ebbc44e32af4",
    "name": "debug 29",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 840,
    "y": 440,
    "wires": []
  },
  {
    "id": "cad9920d725d4528",
    "type": "http request",
    "z": "fe39854b38341397",
    "g": "fc41ebbc44e32af4",
    "name": "TTN: GET network server",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://eu1.cloud.thethings.network/api/v3/ns/applications/{{{app_id}}}/devices/{{{dev_id}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 630,
    "y": 480,
    "wires": [
      [
        "00e48a3a2e2532bc"
      ]
    ]
  },
  {
    "id": "00e48a3a2e2532bc",
    "type": "debug",
    "z": "fe39854b38341397",
    "g": "fc41ebbc44e32af4",
    "name": "debug 30",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 840,
    "y": 480,
    "wires": []
  },
  {
    "id": "62b8693abdab8ada",
    "type": "http request",
    "z": "fe39854b38341397",
    "g": "fc41ebbc44e32af4",
    "name": "TTN: GET app server",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://eu1.cloud.thethings.network/api/v3/as/applications/{{{app_id}}}/devices/{{{dev_id}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 620,
    "y": 520,
    "wires": [
      [
        "ae2864e069ca751d"
      ]
    ]
  },
  {
    "id": "ae2864e069ca751d",
    "type": "debug",
    "z": "fe39854b38341397",
    "g": "fc41ebbc44e32af4",
    "name": "debug 31",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 840,
    "y": 520,
    "wires": []
  },
  {
    "id": "7b34c483c70614a6",
    "type": "debug",
    "z": "fe39854b38341397",
    "g": "f199da2ee9eab818",
    "name": "debug 32",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 840,
    "y": 700,
    "wires": []
  },
  {
    "id": "b4ddb89eb73e270f",
    "type": "debug",
    "z": "fe39854b38341397",
    "g": "f199da2ee9eab818",
    "name": "debug 33",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 840,
    "y": 760,
    "wires": []
  },
  {
    "id": "51f7a7d068d61421",
    "type": "debug",
    "z": "fe39854b38341397",
    "g": "f199da2ee9eab818",
    "name": "debug 34",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 840,
    "y": 820,
    "wires": []
  },
  {
    "id": "1b4c7a76277cce57",
    "type": "debug",
    "z": "fe39854b38341397",
    "g": "f199da2ee9eab818",
    "name": "debug 35",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 840,
    "y": 880,
    "wires": []
  },
  {
    "id": "0e6bf01e8f93c81f",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "f199da2ee9eab818",
    "name": "generate keys/euis",
    "func": "\nlet { dev_id, app_id } = msg.req.query;\n\nreturn {\n    ...msg,\n    dev_id, app_id,\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 610,
    "y": 660,
    "wires": [
      [
        "8d53f43b7fe37105"
      ]
    ]
  },
  {
    "id": "742fd0ca758c426e",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "83bbbdad52aaa4ce",
    "name": "",
    "func": "\nconst search = (results, loc_type) => {\n    return results.find(({ types }) => (types.includes(loc_type)))\n}\n\n// const addr1 = msg.payload.results[0].address_components;\nconst addr = (search(msg.payload.results, 'street_address') || msg.payload.results[0])?.address_components;\nreturn {\n    ...msg,\n    payload: {\n        // .address_components[0].short_name\n        neighborhood: search(search(msg.payload.results, 'neighborhood').address_components, 'neighborhood')?.short_name,\n        street_number: search(addr, 'street_number')?.short_name,\n        street: search(addr, 'route')?.short_name,\n        borough: search(addr, 'sublocality_level_1')?.short_name,\n        state: search(addr, 'administrative_area_level_1')?.short_name,\n        zip: search(addr, 'postal_code')?.short_name,\n    },\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 580,
    "y": 1280,
    "wires": [
      [
        "bb441687fdbc16c1"
      ]
    ]
  },
  {
    "id": "7cc08d9f36ba2acb",
    "type": "inject",
    "z": "fe39854b38341397",
    "g": "83bbbdad52aaa4ce",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 500,
    "y": 980,
    "wires": [
      [
        "a43a206e49d61a13"
      ]
    ]
  },
  {
    "id": "bb441687fdbc16c1",
    "type": "debug",
    "z": "fe39854b38341397",
    "g": "83bbbdad52aaa4ce",
    "name": "debug 37",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 740,
    "y": 1280,
    "wires": []
  },
  {
    "id": "149c457e4c868202",
    "type": "debug",
    "z": "fe39854b38341397",
    "g": "83bbbdad52aaa4ce",
    "name": "debug 38",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 380,
    "y": 1360,
    "wires": []
  },
  {
    "id": "a43a206e49d61a13",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "83bbbdad52aaa4ce",
    "name": "function 1",
    "func": "// POINT(-73.98722313369241 40.69493606331184)\n// msg.lat = 40.694109010393106;//40.69277301420232;\n// msg.lon = -73.98567607830985;//-73.98729382788447;\nmsg.lat = 40.69493606331184;\nmsg.lon = -73.98722313369241;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 500,
    "y": 1040,
    "wires": [
      [
        "ce34743f0495640b"
      ]
    ]
  },
  {
    "id": "1dcf11b2e5bebeb4",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "83bbbdad52aaa4ce",
    "name": "function 2",
    "func": "\nreturn {\n    payload: {\n    \"plus_code\": {\n      \"compound_code\": \"M2V7+434 New York, NY, USA\",\n      \"global_code\": \"87G8M2V7+434\"\n    },\n    \"results\": [\n      {\n        \"address_components\": [\n          {\n            \"long_name\": \"Jay St/Willoughby St\",\n            \"short_name\": \"Jay St/Willoughby St\",\n            \"types\": [\n              \"establishment\",\n              \"point_of_interest\",\n              \"transit_station\"\n            ]\n          },\n          {\n            \"long_name\": \"Downtown Brooklyn\",\n            \"short_name\": \"Downtown Brooklyn\",\n            \"types\": [\n              \"neighborhood\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"Brooklyn\",\n            \"short_name\": \"Brooklyn\",\n            \"types\": [\n              \"political\",\n              \"sublocality\",\n              \"sublocality_level_1\"\n            ]\n          },\n          {\n            \"long_name\": \"Kings County\",\n            \"short_name\": \"Kings County\",\n            \"types\": [\n              \"administrative_area_level_2\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"New York\",\n            \"short_name\": \"NY\",\n            \"types\": [\n              \"administrative_area_level_1\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"United States\",\n            \"short_name\": \"US\",\n            \"types\": [\n              \"country\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"11201\",\n            \"short_name\": \"11201\",\n            \"types\": [\n              \"postal_code\"\n            ]\n          }\n        ],\n        \"formatted_address\": \"Jay St/Willoughby St, Brooklyn, NY 11201, USA\",\n        \"geometry\": {\n          \"location\": {\n            \"lat\": 40.692661,\n            \"lng\": -73.98718300000002\n          },\n          \"location_type\": \"GEOMETRIC_CENTER\",\n          \"viewport\": {\n            \"northeast\": {\n              \"lat\": 40.6940099802915,\n              \"lng\": -73.98583401970852\n            },\n            \"southwest\": {\n              \"lat\": 40.6913120197085,\n              \"lng\": -73.98853198029153\n            }\n          }\n        },\n        \"place_id\": \"ChIJjy6GlUtawokRbL7ScD7h7R0\",\n        \"plus_code\": {\n          \"compound_code\": \"M2V7+34 New York, NY, USA\",\n          \"global_code\": \"87G8M2V7+34\"\n        },\n        \"types\": [\n          \"establishment\",\n          \"point_of_interest\",\n          \"transit_station\"\n        ]\n      },\n      {\n        \"address_components\": [\n          {\n            \"long_name\": \"367\",\n            \"short_name\": \"367\",\n            \"types\": [\n              \"street_number\"\n            ]\n          },\n          {\n            \"long_name\": \"Jay Street\",\n            \"short_name\": \"Jay St\",\n            \"types\": [\n              \"route\"\n            ]\n          },\n          {\n            \"long_name\": \"Downtown Brooklyn\",\n            \"short_name\": \"Downtown Brooklyn\",\n            \"types\": [\n              \"neighborhood\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"Brooklyn\",\n            \"short_name\": \"Brooklyn\",\n            \"types\": [\n              \"political\",\n              \"sublocality\",\n              \"sublocality_level_1\"\n            ]\n          },\n          {\n            \"long_name\": \"Kings County\",\n            \"short_name\": \"Kings County\",\n            \"types\": [\n              \"administrative_area_level_2\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"New York\",\n            \"short_name\": \"NY\",\n            \"types\": [\n              \"administrative_area_level_1\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"United States\",\n            \"short_name\": \"US\",\n            \"types\": [\n              \"country\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"11201\",\n            \"short_name\": \"11201\",\n            \"types\": [\n              \"postal_code\"\n            ]\n          }\n        ],\n        \"formatted_address\": \"367 Jay St, Brooklyn, NY 11201, USA\",\n        \"geometry\": {\n          \"location\": {\n            \"lat\": 40.6926658,\n            \"lng\": -73.9871761\n          },\n          \"location_type\": \"ROOFTOP\",\n          \"viewport\": {\n            \"northeast\": {\n              \"lat\": 40.6940147802915,\n              \"lng\": -73.9858271197085\n            },\n            \"southwest\": {\n              \"lat\": 40.6913168197085,\n              \"lng\": -73.98852508029151\n            }\n          }\n        },\n        \"place_id\": \"ChIJr0Fnr0tawokRkMmbdMCuL40\",\n        \"plus_code\": {\n          \"compound_code\": \"M2V7+34 Brooklyn, NY, USA\",\n          \"global_code\": \"87G8M2V7+34\"\n        },\n        \"types\": [\n          \"street_address\"\n        ]\n      },\n      {\n        \"address_components\": [\n          {\n            \"long_name\": \"367\",\n            \"short_name\": \"367\",\n            \"types\": [\n              \"street_number\"\n            ]\n          },\n          {\n            \"long_name\": \"Jay Street\",\n            \"short_name\": \"Jay St\",\n            \"types\": [\n              \"route\"\n            ]\n          },\n          {\n            \"long_name\": \"Downtown Brooklyn\",\n            \"short_name\": \"Downtown Brooklyn\",\n            \"types\": [\n              \"neighborhood\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"Brooklyn\",\n            \"short_name\": \"Brooklyn\",\n            \"types\": [\n              \"political\",\n              \"sublocality\",\n              \"sublocality_level_1\"\n            ]\n          },\n          {\n            \"long_name\": \"Kings County\",\n            \"short_name\": \"Kings County\",\n            \"types\": [\n              \"administrative_area_level_2\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"New York\",\n            \"short_name\": \"NY\",\n            \"types\": [\n              \"administrative_area_level_1\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"United States\",\n            \"short_name\": \"US\",\n            \"types\": [\n              \"country\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"11201\",\n            \"short_name\": \"11201\",\n            \"types\": [\n              \"postal_code\"\n            ]\n          }\n        ],\n        \"formatted_address\": \"367 Jay St, Brooklyn, NY 11201, USA\",\n        \"geometry\": {\n          \"location\": {\n            \"lat\": 40.6926658,\n            \"lng\": -73.9871761\n          },\n          \"location_type\": \"ROOFTOP\",\n          \"viewport\": {\n            \"northeast\": {\n              \"lat\": 40.6940147802915,\n              \"lng\": -73.9858271197085\n            },\n            \"southwest\": {\n              \"lat\": 40.6913168197085,\n              \"lng\": -73.98852508029151\n            }\n          }\n        },\n        \"place_id\": \"ChIJ8Y1lQeVbwokRimmZyUZnaWo\",\n        \"plus_code\": {\n          \"compound_code\": \"M2V7+34 New York, NY, USA\",\n          \"global_code\": \"87G8M2V7+34\"\n        },\n        \"types\": [\n          \"doctor\",\n          \"establishment\",\n          \"health\",\n          \"point_of_interest\"\n        ]\n      },\n      {\n        \"address_components\": [\n          {\n            \"long_name\": \"365\",\n            \"short_name\": \"365\",\n            \"types\": [\n              \"street_number\"\n            ]\n          },\n          {\n            \"long_name\": \"Jay Street\",\n            \"short_name\": \"Jay St\",\n            \"types\": [\n              \"route\"\n            ]\n          },\n          {\n            \"long_name\": \"Downtown Brooklyn\",\n            \"short_name\": \"Downtown Brooklyn\",\n            \"types\": [\n              \"neighborhood\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"Brooklyn\",\n            \"short_name\": \"Brooklyn\",\n            \"types\": [\n              \"political\",\n              \"sublocality\",\n              \"sublocality_level_1\"\n            ]\n          },\n          {\n            \"long_name\": \"Kings County\",\n            \"short_name\": \"Kings County\",\n            \"types\": [\n              \"administrative_area_level_2\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"New York\",\n            \"short_name\": \"NY\",\n            \"types\": [\n              \"administrative_area_level_1\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"United States\",\n            \"short_name\": \"US\",\n            \"types\": [\n              \"country\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"11201\",\n            \"short_name\": \"11201\",\n            \"types\": [\n              \"postal_code\"\n            ]\n          }\n        ],\n        \"formatted_address\": \"365 Jay St, Brooklyn, NY 11201, USA\",\n        \"geometry\": {\n          \"bounds\": {\n            \"northeast\": {\n              \"lat\": 40.6927949,\n              \"lng\": -73.9867573\n            },\n            \"southwest\": {\n              \"lat\": 40.692654,\n              \"lng\": -73.9871861\n            }\n          },\n          \"location\": {\n            \"lat\": 40.6926938,\n            \"lng\": -73.9868875\n          },\n          \"location_type\": \"ROOFTOP\",\n          \"viewport\": {\n            \"northeast\": {\n              \"lat\": 40.6940734302915,\n              \"lng\": -73.98562271970849\n            },\n            \"southwest\": {\n              \"lat\": 40.6913754697085,\n              \"lng\": -73.9883206802915\n            }\n          }\n        },\n        \"place_id\": \"ChIJod3BvUtawokRsgo_85Q-0Yw\",\n        \"types\": [\n          \"premise\"\n        ]\n      },\n      {\n        \"address_components\": [\n          {\n            \"long_name\": \"365-357\",\n            \"short_name\": \"365-357\",\n            \"types\": [\n              \"street_number\"\n            ]\n          },\n          {\n            \"long_name\": \"Jay Street\",\n            \"short_name\": \"Jay St\",\n            \"types\": [\n              \"route\"\n            ]\n          },\n          {\n            \"long_name\": \"Downtown Brooklyn\",\n            \"short_name\": \"Downtown Brooklyn\",\n            \"types\": [\n              \"neighborhood\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"Brooklyn\",\n            \"short_name\": \"Brooklyn\",\n            \"types\": [\n              \"political\",\n              \"sublocality\",\n              \"sublocality_level_1\"\n            ]\n          },\n          {\n            \"long_name\": \"Kings County\",\n            \"short_name\": \"Kings County\",\n            \"types\": [\n              \"administrative_area_level_2\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"New York\",\n            \"short_name\": \"NY\",\n            \"types\": [\n              \"administrative_area_level_1\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"United States\",\n            \"short_name\": \"US\",\n            \"types\": [\n              \"country\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"11201\",\n            \"short_name\": \"11201\",\n            \"types\": [\n              \"postal_code\"\n            ]\n          }\n        ],\n        \"formatted_address\": \"365-357 Jay St, Brooklyn, NY 11201, USA\",\n        \"geometry\": {\n          \"bounds\": {\n            \"northeast\": {\n              \"lat\": 40.6929364,\n              \"lng\": -73.98726529999999\n            },\n            \"southwest\": {\n              \"lat\": 40.6927123,\n              \"lng\": -73.9872782\n            }\n          },\n          \"location\": {\n            \"lat\": 40.6928244,\n            \"lng\": -73.98727180000002\n          },\n          \"location_type\": \"GEOMETRIC_CENTER\",\n          \"viewport\": {\n            \"northeast\": {\n              \"lat\": 40.6941733302915,\n              \"lng\": -73.98592276970851\n            },\n            \"southwest\": {\n              \"lat\": 40.69147536970851,\n              \"lng\": -73.98862073029152\n            }\n          }\n        },\n        \"place_id\": \"ChIJvz4jv0tawokRLvfhxnE4EQ8\",\n        \"types\": [\n          \"route\"\n        ]\n      },\n      {\n        \"address_components\": [\n          {\n            \"long_name\": \"M2V7+43\",\n            \"short_name\": \"M2V7+43\",\n            \"types\": [\n              \"plus_code\"\n            ]\n          },\n          {\n            \"long_name\": \"New York\",\n            \"short_name\": \"New York\",\n            \"types\": [\n              \"locality\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"New York\",\n            \"short_name\": \"NY\",\n            \"types\": [\n              \"administrative_area_level_1\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"United States\",\n            \"short_name\": \"US\",\n            \"types\": [\n              \"country\",\n              \"political\"\n            ]\n          }\n        ],\n        \"formatted_address\": \"M2V7+43 New York, NY, USA\",\n        \"geometry\": {\n          \"bounds\": {\n            \"northeast\": {\n              \"lat\": 40.692875,\n              \"lng\": -73.98725\n            },\n            \"southwest\": {\n              \"lat\": 40.69275,\n              \"lng\": -73.987375\n            }\n          },\n          \"location\": {\n            \"lat\": 40.692773,\n            \"lng\": -73.9872938\n          },\n          \"location_type\": \"GEOMETRIC_CENTER\",\n          \"viewport\": {\n            \"northeast\": {\n              \"lat\": 40.6941614802915,\n              \"lng\": -73.98596351970849\n            },\n            \"southwest\": {\n              \"lat\": 40.69146351970851,\n              \"lng\": -73.98866148029151\n            }\n          }\n        },\n        \"place_id\": \"GhIJoUYhyaxYREARyqJV0i9_UsA\",\n        \"plus_code\": {\n          \"compound_code\": \"M2V7+43 New York, NY, USA\",\n          \"global_code\": \"87G8M2V7+43\"\n        },\n        \"types\": [\n          \"plus_code\"\n        ]\n      },\n      {\n        \"address_components\": [\n          {\n            \"long_name\": \"Downtown Brooklyn\",\n            \"short_name\": \"Downtown Brooklyn\",\n            \"types\": [\n              \"neighborhood\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"Brooklyn\",\n            \"short_name\": \"Brooklyn\",\n            \"types\": [\n              \"political\",\n              \"sublocality\",\n              \"sublocality_level_1\"\n            ]\n          },\n          {\n            \"long_name\": \"Kings County\",\n            \"short_name\": \"Kings County\",\n            \"types\": [\n              \"administrative_area_level_2\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"New York\",\n            \"short_name\": \"NY\",\n            \"types\": [\n              \"administrative_area_level_1\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"United States\",\n            \"short_name\": \"US\",\n            \"types\": [\n              \"country\",\n              \"political\"\n            ]\n          }\n        ],\n        \"formatted_address\": \"Downtown Brooklyn, Brooklyn, NY, USA\",\n        \"geometry\": {\n          \"bounds\": {\n            \"northeast\": {\n              \"lat\": 40.7059085,\n              \"lng\": -73.9785862\n            },\n            \"southwest\": {\n              \"lat\": 40.6864741,\n              \"lng\": -73.99172399999999\n            }\n          },\n          \"location\": {\n            \"lat\": 40.6960679,\n            \"lng\": -73.9845407\n          },\n          \"location_type\": \"APPROXIMATE\",\n          \"viewport\": {\n            \"northeast\": {\n              \"lat\": 40.7059085,\n              \"lng\": -73.9785862\n            },\n            \"southwest\": {\n              \"lat\": 40.6864741,\n              \"lng\": -73.99172399999999\n            }\n          }\n        },\n        \"place_id\": \"ChIJAwIqikpawokRUQiYFdoX9N8\",\n        \"types\": [\n          \"neighborhood\",\n          \"political\"\n        ]\n      },\n      {\n        \"address_components\": [\n          {\n            \"long_name\": \"11201\",\n            \"short_name\": \"11201\",\n            \"types\": [\n              \"postal_code\"\n            ]\n          },\n          {\n            \"long_name\": \"Brooklyn Heights\",\n            \"short_name\": \"Brooklyn Heights\",\n            \"types\": [\n              \"neighborhood\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"New York\",\n            \"short_name\": \"New York\",\n            \"types\": [\n              \"locality\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"New York\",\n            \"short_name\": \"NY\",\n            \"types\": [\n              \"administrative_area_level_1\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"United States\",\n            \"short_name\": \"US\",\n            \"types\": [\n              \"country\",\n              \"political\"\n            ]\n          }\n        ],\n        \"formatted_address\": \"Brooklyn Heights, NY 11201, USA\",\n        \"geometry\": {\n          \"bounds\": {\n            \"northeast\": {\n              \"lat\": 40.710594,\n              \"lng\": -73.9688331\n            },\n            \"southwest\": {\n              \"lat\": 40.6835594,\n              \"lng\": -74.006444\n            }\n          },\n          \"location\": {\n            \"lat\": 40.6986772,\n            \"lng\": -73.9859414\n          },\n          \"location_type\": \"APPROXIMATE\",\n          \"viewport\": {\n            \"northeast\": {\n              \"lat\": 40.710594,\n              \"lng\": -73.9688331\n            },\n            \"southwest\": {\n              \"lat\": 40.6835594,\n              \"lng\": -74.006444\n            }\n          }\n        },\n        \"place_id\": \"ChIJ10KLdUlawokRxmIQu1GuCHk\",\n        \"postcode_localities\": [\n          \"Brooklyn\",\n          \"Brooklyn Heights\"\n        ],\n        \"types\": [\n          \"postal_code\"\n        ]\n      },\n      {\n        \"address_components\": [\n          {\n            \"long_name\": \"Kings County\",\n            \"short_name\": \"Kings County\",\n            \"types\": [\n              \"administrative_area_level_2\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"Brooklyn\",\n            \"short_name\": \"Brooklyn\",\n            \"types\": [\n              \"political\",\n              \"sublocality\",\n              \"sublocality_level_1\"\n            ]\n          },\n          {\n            \"long_name\": \"New York\",\n            \"short_name\": \"NY\",\n            \"types\": [\n              \"administrative_area_level_1\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"United States\",\n            \"short_name\": \"US\",\n            \"types\": [\n              \"country\",\n              \"political\"\n            ]\n          }\n        ],\n        \"formatted_address\": \"Kings County, Brooklyn, NY, USA\",\n        \"geometry\": {\n          \"bounds\": {\n            \"northeast\": {\n              \"lat\": 40.7394209,\n              \"lng\": -73.8330411\n            },\n            \"southwest\": {\n              \"lat\": 40.551042,\n              \"lng\": -74.05663\n            }\n          },\n          \"location\": {\n            \"lat\": 40.6528762,\n            \"lng\": -73.95949399999999\n          },\n          \"location_type\": \"APPROXIMATE\",\n          \"viewport\": {\n            \"northeast\": {\n              \"lat\": 40.7394209,\n              \"lng\": -73.8330411\n            },\n            \"southwest\": {\n              \"lat\": 40.551042,\n              \"lng\": -74.05663\n            }\n          }\n        },\n        \"place_id\": \"ChIJOwE7_GTtwokRs75rhW4_I6M\",\n        \"types\": [\n          \"administrative_area_level_2\",\n          \"political\"\n        ]\n      },\n      {\n        \"address_components\": [\n          {\n            \"long_name\": \"Brooklyn\",\n            \"short_name\": \"Brooklyn\",\n            \"types\": [\n              \"political\",\n              \"sublocality\",\n              \"sublocality_level_1\"\n            ]\n          },\n          {\n            \"long_name\": \"Kings County\",\n            \"short_name\": \"Kings County\",\n            \"types\": [\n              \"administrative_area_level_2\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"New York\",\n            \"short_name\": \"NY\",\n            \"types\": [\n              \"administrative_area_level_1\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"United States\",\n            \"short_name\": \"US\",\n            \"types\": [\n              \"country\",\n              \"political\"\n            ]\n          }\n        ],\n        \"formatted_address\": \"Brooklyn, NY, USA\",\n        \"geometry\": {\n          \"bounds\": {\n            \"northeast\": {\n              \"lat\": 40.739446,\n              \"lng\": -73.8333651\n            },\n            \"southwest\": {\n              \"lat\": 40.551042,\n              \"lng\": -74.05663\n            }\n          },\n          \"location\": {\n            \"lat\": 40.6781784,\n            \"lng\": -73.9441579\n          },\n          \"location_type\": \"APPROXIMATE\",\n          \"viewport\": {\n            \"northeast\": {\n              \"lat\": 40.739446,\n              \"lng\": -73.8333651\n            },\n            \"southwest\": {\n              \"lat\": 40.551042,\n              \"lng\": -74.05663\n            }\n          }\n        },\n        \"place_id\": \"ChIJCSF8lBZEwokRhngABHRcdoI\",\n        \"types\": [\n          \"political\",\n          \"sublocality\",\n          \"sublocality_level_1\"\n        ]\n      },\n      {\n        \"address_components\": [\n          {\n            \"long_name\": \"New York\",\n            \"short_name\": \"New York\",\n            \"types\": [\n              \"locality\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"New York\",\n            \"short_name\": \"NY\",\n            \"types\": [\n              \"administrative_area_level_1\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"United States\",\n            \"short_name\": \"US\",\n            \"types\": [\n              \"country\",\n              \"political\"\n            ]\n          }\n        ],\n        \"formatted_address\": \"New York, NY, USA\",\n        \"geometry\": {\n          \"bounds\": {\n            \"northeast\": {\n              \"lat\": 40.9175771,\n              \"lng\": -73.70027209999999\n            },\n            \"southwest\": {\n              \"lat\": 40.4773991,\n              \"lng\": -74.25908989999999\n            }\n          },\n          \"location\": {\n            \"lat\": 40.7127753,\n            \"lng\": -74.0059728\n          },\n          \"location_type\": \"APPROXIMATE\",\n          \"viewport\": {\n            \"northeast\": {\n              \"lat\": 40.9175771,\n              \"lng\": -73.70027209999999\n            },\n            \"southwest\": {\n              \"lat\": 40.4773991,\n              \"lng\": -74.25908989999999\n            }\n          }\n        },\n        \"place_id\": \"ChIJOwg_06VPwokRYv534QaPC8g\",\n        \"types\": [\n          \"locality\",\n          \"political\"\n        ]\n      },\n      {\n        \"address_components\": [\n          {\n            \"long_name\": \"New York\",\n            \"short_name\": \"NY\",\n            \"types\": [\n              \"administrative_area_level_1\",\n              \"political\"\n            ]\n          },\n          {\n            \"long_name\": \"United States\",\n            \"short_name\": \"US\",\n            \"types\": [\n              \"country\",\n              \"political\"\n            ]\n          }\n        ],\n        \"formatted_address\": \"New York, USA\",\n        \"geometry\": {\n          \"bounds\": {\n            \"northeast\": {\n              \"lat\": 45.015861,\n              \"lng\": -71.777491\n            },\n            \"southwest\": {\n              \"lat\": 40.4773991,\n              \"lng\": -79.7625901\n            }\n          },\n          \"location\": {\n            \"lat\": 43.2994285,\n            \"lng\": -74.21793260000001\n          },\n          \"location_type\": \"APPROXIMATE\",\n          \"viewport\": {\n            \"northeast\": {\n              \"lat\": 45.015861,\n              \"lng\": -71.777491\n            },\n            \"southwest\": {\n              \"lat\": 40.4773991,\n              \"lng\": -79.7625901\n            }\n          }\n        },\n        \"place_id\": \"ChIJqaUj8fBLzEwRZ5UY3sHGz90\",\n        \"types\": [\n          \"administrative_area_level_1\",\n          \"political\"\n        ]\n      },\n      {\n        \"address_components\": [\n          {\n            \"long_name\": \"United States\",\n            \"short_name\": \"US\",\n            \"types\": [\n              \"country\",\n              \"political\"\n            ]\n          }\n        ],\n        \"formatted_address\": \"United States\",\n        \"geometry\": {\n          \"bounds\": {\n            \"northeast\": {\n              \"lat\": 74.071038,\n              \"lng\": -66.885417\n            },\n            \"southwest\": {\n              \"lat\": 18.7763,\n              \"lng\": 166.9999999\n            }\n          },\n          \"location\": {\n            \"lat\": 37.09024,\n            \"lng\": -95.712891\n          },\n          \"location_type\": \"APPROXIMATE\",\n          \"viewport\": {\n            \"northeast\": {\n              \"lat\": 74.071038,\n              \"lng\": -66.885417\n            },\n            \"southwest\": {\n              \"lat\": 18.7763,\n              \"lng\": 166.9999999\n            }\n          }\n        },\n        \"place_id\": \"ChIJCzYy5IS16lQRQrfeQ5K5Oxw\",\n        \"types\": [\n          \"country\",\n          \"political\"\n        ]\n      }\n    ],\n    \"status\": \"OK\"\n  }\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 1200,
    "wires": [
      [
        "742fd0ca758c426e",
        "149c457e4c868202",
        "98c65f3e45a46b93"
      ]
    ]
  },
  {
    "id": "7b08a7dce836a455",
    "type": "inject",
    "z": "fe39854b38341397",
    "g": "83bbbdad52aaa4ce",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 320,
    "y": 1120,
    "wires": [
      [
        "1dcf11b2e5bebeb4"
      ]
    ]
  },
  {
    "id": "98c65f3e45a46b93",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "83bbbdad52aaa4ce",
    "name": "function 3",
    "func": "let loc_results = msg.payload.results;\n\nfor (let n=0, l=loc_results.length; n<l; n++) {\n    let loc_el = loc_results[n];\n    \n    if (loc_el.types[0] == \"neighborhood\"){\n        msg.sensor_address_neighborhood = loc_el.address_components[0].short_name;\n        flow.set('sensor_address_neighborhood', msg.sensor_address_neighborhood);\n        break;\n    }\n}\n\nlet loc_parts = msg.payload.results[0].address_components;\n\nfor (let n=0, l=loc_parts.length; n<l; n++) {\n    if (loc_parts[n].types[0] == \"street_number\"){\n        msg.sensor_address_street_number = loc_parts[n].short_name;\n        flow.set('sensor_address_street_number', msg.sensor_address_street_number);\n    }\n    else if (loc_parts[n].types[0] == \"route\"){\n        msg.sensor_address_street = loc_parts[n].short_name;\n        flow.set('sensor_address_street', msg.sensor_address_street);\n    }\n    else if (loc_parts[n].types[2] == \"sublocality_level_1\"){\n        msg.sensor_address_borough = loc_parts[n].short_name;\n        flow.set('sensor_address_borough', msg.sensor_address_borough);\n    }\n    else if (loc_parts[n].types[0] == \"administrative_area_level_1\"){\n        msg.sensor_address_state = loc_parts[n].short_name;\n        flow.set('sensor_address_state', msg.sensor_address_state);\n    }\n    else if (loc_parts[n].types[0] == \"postal_code\"){\n        msg.sensor_address_zip = loc_parts[n].short_name;\n        flow.set('sensor_address_zip', msg.sensor_address_zip);\n    }\n\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 580,
    "y": 1340,
    "wires": [
      [
        "a3e19baa2808cc17"
      ]
    ]
  },
  {
    "id": "a3e19baa2808cc17",
    "type": "debug",
    "z": "fe39854b38341397",
    "g": "83bbbdad52aaa4ce",
    "name": "debug 39",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 740,
    "y": 1340,
    "wires": []
  },
  {
    "id": "c4024349c6b9e17e",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "83bbbdad52aaa4ce",
    "name": "function 4",
    "func": "\nreturn {\n    payload: {\n  \"plus_code\": {\n    \"compound_code\": \"M2V7+JPW New York, NY, USA\",\n    \"global_code\": \"87G8M2V7+JPW\"\n  },\n  \"results\": [\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"304-328\",\n          \"short_name\": \"304-328\",\n          \"types\": [\n            \"street_number\"\n          ]\n        },\n        {\n          \"long_name\": \"Bridge Street\",\n          \"short_name\": \"Bridge St\",\n          \"types\": [\n            \"route\"\n          ]\n        },\n        {\n          \"long_name\": \"Downtown Brooklyn\",\n          \"short_name\": \"Downtown Brooklyn\",\n          \"types\": [\n            \"neighborhood\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"Brooklyn\",\n          \"short_name\": \"Brooklyn\",\n          \"types\": [\n            \"political\",\n            \"sublocality\",\n            \"sublocality_level_1\"\n          ]\n        },\n        {\n          \"long_name\": \"Kings County\",\n          \"short_name\": \"Kings County\",\n          \"types\": [\n            \"administrative_area_level_2\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"11201\",\n          \"short_name\": \"11201\",\n          \"types\": [\n            \"postal_code\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"304-328 Bridge St, Brooklyn, NY 11201, USA\",\n      \"geometry\": {\n        \"location\": {\n          \"lat\": 40.694133,\n          \"lng\": -73.985674\n        },\n        \"location_type\": \"ROOFTOP\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.6954819802915,\n            \"lng\": -73.9843250197085\n          },\n          \"southwest\": {\n            \"lat\": 40.6927840197085,\n            \"lng\": -73.98702298029151\n          }\n        }\n      },\n      \"place_id\": \"ChIJpe0M-UpawokRFvnFn2MuHjM\",\n      \"plus_code\": {\n        \"compound_code\": \"M2V7+MP New York, NY, USA\",\n        \"global_code\": \"87G8M2V7+MP\"\n      },\n      \"types\": [\n        \"street_address\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"2\",\n          \"short_name\": \"2\",\n          \"types\": [\n            \"street_number\"\n          ]\n        },\n        {\n          \"long_name\": \"MetroTech Center\",\n          \"short_name\": \"MetroTech Center\",\n          \"types\": [\n            \"route\"\n          ]\n        },\n        {\n          \"long_name\": \"Downtown Brooklyn\",\n          \"short_name\": \"Downtown Brooklyn\",\n          \"types\": [\n            \"neighborhood\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"Brooklyn\",\n          \"short_name\": \"Brooklyn\",\n          \"types\": [\n            \"political\",\n            \"sublocality\",\n            \"sublocality_level_1\"\n          ]\n        },\n        {\n          \"long_name\": \"Kings County\",\n          \"short_name\": \"Kings County\",\n          \"types\": [\n            \"administrative_area_level_2\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"11201\",\n          \"short_name\": \"11201\",\n          \"types\": [\n            \"postal_code\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"2 MetroTech Center, Brooklyn, NY 11201, USA\",\n      \"geometry\": {\n        \"location\": {\n          \"lat\": 40.6941697,\n          \"lng\": -73.9857577\n        },\n        \"location_type\": \"ROOFTOP\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.69551868029149,\n            \"lng\": -73.98440871970848\n          },\n          \"southwest\": {\n            \"lat\": 40.69282071970849,\n            \"lng\": -73.9871066802915\n          }\n        }\n      },\n      \"place_id\": \"ChIJtbNF-UpawokRe-dMsyUekU4\",\n      \"plus_code\": {\n        \"compound_code\": \"M2V7+MM Brooklyn, NY, USA\",\n        \"global_code\": \"87G8M2V7+MM\"\n      },\n      \"types\": [\n        \"establishment\",\n        \"point_of_interest\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"5\",\n          \"short_name\": \"5\",\n          \"types\": [\n            \"street_number\"\n          ]\n        },\n        {\n          \"long_name\": \"MetroTech Center\",\n          \"short_name\": \"MetroTech Center\",\n          \"types\": [\n            \"route\"\n          ]\n        },\n        {\n          \"long_name\": \"Downtown Brooklyn\",\n          \"short_name\": \"Downtown Brooklyn\",\n          \"types\": [\n            \"neighborhood\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"Brooklyn\",\n          \"short_name\": \"Brooklyn\",\n          \"types\": [\n            \"political\",\n            \"sublocality\",\n            \"sublocality_level_1\"\n          ]\n        },\n        {\n          \"long_name\": \"Kings County\",\n          \"short_name\": \"Kings County\",\n          \"types\": [\n            \"administrative_area_level_2\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"11201\",\n          \"short_name\": \"11201\",\n          \"types\": [\n            \"postal_code\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"5 MetroTech Center, Brooklyn, NY 11201, USA\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 40.6948218,\n            \"lng\": -73.9852549\n          },\n          \"southwest\": {\n            \"lat\": 40.6944273,\n            \"lng\": -73.98602129999999\n          }\n        },\n        \"location\": {\n          \"lat\": 40.6945463,\n          \"lng\": -73.98567179999999\n        },\n        \"location_type\": \"ROOFTOP\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.6959735302915,\n            \"lng\": -73.98428911970849\n          },\n          \"southwest\": {\n            \"lat\": 40.6932755697085,\n            \"lng\": -73.9869870802915\n          }\n        }\n      },\n      \"place_id\": \"ChIJAcQE9EpawokR-oEfTDYEznQ\",\n      \"types\": [\n        \"premise\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"76\",\n          \"short_name\": \"76\",\n          \"types\": [\n            \"street_number\"\n          ]\n        },\n        {\n          \"long_name\": \"Lawrence Street\",\n          \"short_name\": \"Lawrence St\",\n          \"types\": [\n            \"route\"\n          ]\n        },\n        {\n          \"long_name\": \"Downtown Brooklyn\",\n          \"short_name\": \"Downtown Brooklyn\",\n          \"types\": [\n            \"neighborhood\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"Brooklyn\",\n          \"short_name\": \"Brooklyn\",\n          \"types\": [\n            \"political\",\n            \"sublocality\",\n            \"sublocality_level_1\"\n          ]\n        },\n        {\n          \"long_name\": \"Kings County\",\n          \"short_name\": \"Kings County\",\n          \"types\": [\n            \"administrative_area_level_2\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"11201\",\n          \"short_name\": \"11201\",\n          \"types\": [\n            \"postal_code\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"76 Lawrence St, Brooklyn, NY 11201, USA\",\n      \"geometry\": {\n        \"location\": {\n          \"lat\": 40.6941158,\n          \"lng\": -73.98615079999999\n        },\n        \"location_type\": \"RANGE_INTERPOLATED\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.6954647802915,\n            \"lng\": -73.98480181970848\n          },\n          \"southwest\": {\n            \"lat\": 40.6927668197085,\n            \"lng\": -73.9874997802915\n          }\n        }\n      },\n      \"place_id\": \"Eic3NiBMYXdyZW5jZSBTdCwgQnJvb2tseW4sIE5ZIDExMjAxLCBVU0EiGhIYChQKEgmHP0xUSlrCiRGpo4DF9uwNPxBM\",\n      \"types\": [\n        \"street_address\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"M2V7+JP\",\n          \"short_name\": \"M2V7+JP\",\n          \"types\": [\n            \"plus_code\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"New York\",\n          \"types\": [\n            \"locality\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"M2V7+JP New York, NY, USA\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 40.694125,\n            \"lng\": -73.985625\n          },\n          \"southwest\": {\n            \"lat\": 40.694,\n            \"lng\": -73.98575\n          }\n        },\n        \"location\": {\n          \"lat\": 40.694109,\n          \"lng\": -73.98567609999999\n        },\n        \"location_type\": \"GEOMETRIC_CENTER\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.6954114802915,\n            \"lng\": -73.98433851970849\n          },\n          \"southwest\": {\n            \"lat\": 40.6927135197085,\n            \"lng\": -73.9870364802915\n          }\n        }\n      },\n      \"place_id\": \"GhIJ_G1PkNhYREARuXw1URV_UsA\",\n      \"plus_code\": {\n        \"compound_code\": \"M2V7+JP New York, NY, USA\",\n        \"global_code\": \"87G8M2V7+JP\"\n      },\n      \"types\": [\n        \"plus_code\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"Metrotech Walk\",\n          \"short_name\": \"Metrotech Walk\",\n          \"types\": [\n            \"route\"\n          ]\n        },\n        {\n          \"long_name\": \"Downtown Brooklyn\",\n          \"short_name\": \"Downtown Brooklyn\",\n          \"types\": [\n            \"neighborhood\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"Brooklyn\",\n          \"short_name\": \"Brooklyn\",\n          \"types\": [\n            \"political\",\n            \"sublocality\",\n            \"sublocality_level_1\"\n          ]\n        },\n        {\n          \"long_name\": \"Kings County\",\n          \"short_name\": \"Kings County\",\n          \"types\": [\n            \"administrative_area_level_2\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"11201\",\n          \"short_name\": \"11201\",\n          \"types\": [\n            \"postal_code\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"Metrotech Walk, Brooklyn, NY 11201, USA\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 40.694226,\n            \"lng\": -73.9851688\n          },\n          \"southwest\": {\n            \"lat\": 40.6942051,\n            \"lng\": -73.9857387\n          }\n        },\n        \"location\": {\n          \"lat\": 40.6942156,\n          \"lng\": -73.9854537\n        },\n        \"location_type\": \"GEOMETRIC_CENTER\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.6955645302915,\n            \"lng\": -73.9841047697085\n          },\n          \"southwest\": {\n            \"lat\": 40.6928665697085,\n            \"lng\": -73.9868027302915\n          }\n        }\n      },\n      \"place_id\": \"ChIJWweV-UpawokRykO6ioxUfD0\",\n      \"types\": [\n        \"route\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"Downtown Brooklyn\",\n          \"short_name\": \"Downtown Brooklyn\",\n          \"types\": [\n            \"neighborhood\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"Brooklyn\",\n          \"short_name\": \"Brooklyn\",\n          \"types\": [\n            \"political\",\n            \"sublocality\",\n            \"sublocality_level_1\"\n          ]\n        },\n        {\n          \"long_name\": \"Kings County\",\n          \"short_name\": \"Kings County\",\n          \"types\": [\n            \"administrative_area_level_2\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"Downtown Brooklyn, Brooklyn, NY, USA\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 40.7059085,\n            \"lng\": -73.9785862\n          },\n          \"southwest\": {\n            \"lat\": 40.6864741,\n            \"lng\": -73.99172399999999\n          }\n        },\n        \"location\": {\n          \"lat\": 40.6960679,\n          \"lng\": -73.9845407\n        },\n        \"location_type\": \"APPROXIMATE\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.7059085,\n            \"lng\": -73.9785862\n          },\n          \"southwest\": {\n            \"lat\": 40.6864741,\n            \"lng\": -73.99172399999999\n          }\n        }\n      },\n      \"place_id\": \"ChIJAwIqikpawokRUQiYFdoX9N8\",\n      \"types\": [\n        \"neighborhood\",\n        \"political\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"11201\",\n          \"short_name\": \"11201\",\n          \"types\": [\n            \"postal_code\"\n          ]\n        },\n        {\n          \"long_name\": \"Brooklyn Heights\",\n          \"short_name\": \"Brooklyn Heights\",\n          \"types\": [\n            \"neighborhood\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"New York\",\n          \"types\": [\n            \"locality\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"Brooklyn Heights, NY 11201, USA\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 40.710594,\n            \"lng\": -73.9688331\n          },\n          \"southwest\": {\n            \"lat\": 40.6835594,\n            \"lng\": -74.006444\n          }\n        },\n        \"location\": {\n          \"lat\": 40.6986772,\n          \"lng\": -73.9859414\n        },\n        \"location_type\": \"APPROXIMATE\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.710594,\n            \"lng\": -73.9688331\n          },\n          \"southwest\": {\n            \"lat\": 40.6835594,\n            \"lng\": -74.006444\n          }\n        }\n      },\n      \"place_id\": \"ChIJ10KLdUlawokRxmIQu1GuCHk\",\n      \"postcode_localities\": [\n        \"Brooklyn\",\n        \"Brooklyn Heights\"\n      ],\n      \"types\": [\n        \"postal_code\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"Kings County\",\n          \"short_name\": \"Kings County\",\n          \"types\": [\n            \"administrative_area_level_2\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"Brooklyn\",\n          \"short_name\": \"Brooklyn\",\n          \"types\": [\n            \"political\",\n            \"sublocality\",\n            \"sublocality_level_1\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"Kings County, Brooklyn, NY, USA\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 40.7394209,\n            \"lng\": -73.8330411\n          },\n          \"southwest\": {\n            \"lat\": 40.551042,\n            \"lng\": -74.05663\n          }\n        },\n        \"location\": {\n          \"lat\": 40.6528762,\n          \"lng\": -73.95949399999999\n        },\n        \"location_type\": \"APPROXIMATE\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.7394209,\n            \"lng\": -73.8330411\n          },\n          \"southwest\": {\n            \"lat\": 40.551042,\n            \"lng\": -74.05663\n          }\n        }\n      },\n      \"place_id\": \"ChIJOwE7_GTtwokRs75rhW4_I6M\",\n      \"types\": [\n        \"administrative_area_level_2\",\n        \"political\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"Brooklyn\",\n          \"short_name\": \"Brooklyn\",\n          \"types\": [\n            \"political\",\n            \"sublocality\",\n            \"sublocality_level_1\"\n          ]\n        },\n        {\n          \"long_name\": \"Kings County\",\n          \"short_name\": \"Kings County\",\n          \"types\": [\n            \"administrative_area_level_2\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"Brooklyn, NY, USA\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 40.739446,\n            \"lng\": -73.8333651\n          },\n          \"southwest\": {\n            \"lat\": 40.551042,\n            \"lng\": -74.05663\n          }\n        },\n        \"location\": {\n          \"lat\": 40.6781784,\n          \"lng\": -73.9441579\n        },\n        \"location_type\": \"APPROXIMATE\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.739446,\n            \"lng\": -73.8333651\n          },\n          \"southwest\": {\n            \"lat\": 40.551042,\n            \"lng\": -74.05663\n          }\n        }\n      },\n      \"place_id\": \"ChIJCSF8lBZEwokRhngABHRcdoI\",\n      \"types\": [\n        \"political\",\n        \"sublocality\",\n        \"sublocality_level_1\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"New York\",\n          \"types\": [\n            \"locality\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"New York, NY, USA\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 40.9175771,\n            \"lng\": -73.70027209999999\n          },\n          \"southwest\": {\n            \"lat\": 40.4773991,\n            \"lng\": -74.25908989999999\n          }\n        },\n        \"location\": {\n          \"lat\": 40.7127753,\n          \"lng\": -74.0059728\n        },\n        \"location_type\": \"APPROXIMATE\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.9175771,\n            \"lng\": -73.70027209999999\n          },\n          \"southwest\": {\n            \"lat\": 40.4773991,\n            \"lng\": -74.25908989999999\n          }\n        }\n      },\n      \"place_id\": \"ChIJOwg_06VPwokRYv534QaPC8g\",\n      \"types\": [\n        \"locality\",\n        \"political\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"New York, USA\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 45.015861,\n            \"lng\": -71.777491\n          },\n          \"southwest\": {\n            \"lat\": 40.4773991,\n            \"lng\": -79.7625901\n          }\n        },\n        \"location\": {\n          \"lat\": 43.2994285,\n          \"lng\": -74.21793260000001\n        },\n        \"location_type\": \"APPROXIMATE\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 45.015861,\n            \"lng\": -71.777491\n          },\n          \"southwest\": {\n            \"lat\": 40.4773991,\n            \"lng\": -79.7625901\n          }\n        }\n      },\n      \"place_id\": \"ChIJqaUj8fBLzEwRZ5UY3sHGz90\",\n      \"types\": [\n        \"administrative_area_level_1\",\n        \"political\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"United States\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 74.071038,\n            \"lng\": -66.885417\n          },\n          \"southwest\": {\n            \"lat\": 18.7763,\n            \"lng\": 166.9999999\n          }\n        },\n        \"location\": {\n          \"lat\": 37.09024,\n          \"lng\": -95.712891\n        },\n        \"location_type\": \"APPROXIMATE\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 74.071038,\n            \"lng\": -66.885417\n          },\n          \"southwest\": {\n            \"lat\": 18.7763,\n            \"lng\": 166.9999999\n          }\n        }\n      },\n      \"place_id\": \"ChIJCzYy5IS16lQRQrfeQ5K5Oxw\",\n      \"types\": [\n        \"country\",\n        \"political\"\n      ]\n    }\n  ],\n  \"status\": \"OK\"\n}\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 1260,
    "wires": [
      [
        "149c457e4c868202",
        "742fd0ca758c426e",
        "98c65f3e45a46b93"
      ]
    ]
  },
  {
    "id": "f82a17c2e2a455be",
    "type": "inject",
    "z": "fe39854b38341397",
    "g": "83bbbdad52aaa4ce",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 140,
    "y": 1200,
    "wires": [
      [
        "c4024349c6b9e17e"
      ]
    ]
  },
  {
    "id": "5ab932c7379a007b",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "83bbbdad52aaa4ce",
    "name": "function 5",
    "func": "\nreturn {\n    payload: {\n  \"plus_code\": {\n    \"compound_code\": \"M2V7+X4C New York, NY, USA\",\n    \"global_code\": \"87G8M2V7+X4C\"\n  },\n  \"results\": [\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"320\",\n          \"short_name\": \"320\",\n          \"types\": [\n            \"street_number\"\n          ]\n        },\n        {\n          \"long_name\": \"Tech Place\",\n          \"short_name\": \"Tech Pl\",\n          \"types\": [\n            \"route\"\n          ]\n        },\n        {\n          \"long_name\": \"Downtown Brooklyn\",\n          \"short_name\": \"Downtown Brooklyn\",\n          \"types\": [\n            \"neighborhood\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"Brooklyn\",\n          \"short_name\": \"Brooklyn\",\n          \"types\": [\n            \"political\",\n            \"sublocality\",\n            \"sublocality_level_1\"\n          ]\n        },\n        {\n          \"long_name\": \"Kings County\",\n          \"short_name\": \"Kings County\",\n          \"types\": [\n            \"administrative_area_level_2\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"11201\",\n          \"short_name\": \"11201\",\n          \"types\": [\n            \"postal_code\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"320 Tech Pl, Brooklyn, NY 11201, USA\",\n      \"geometry\": {\n        \"location\": {\n          \"lat\": 40.6948805,\n          \"lng\": -73.98740640000001\n        },\n        \"location_type\": \"ROOFTOP\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.6962294802915,\n            \"lng\": -73.98605741970852\n          },\n          \"southwest\": {\n            \"lat\": 40.6935315197085,\n            \"lng\": -73.98875538029152\n          }\n        }\n      },\n      \"place_id\": \"ChIJHWyqQEpawokRIcMJuZ7rTF0\",\n      \"plus_code\": {\n        \"compound_code\": \"M2V7+X2 Brooklyn, NY, USA\",\n        \"global_code\": \"87G8M2V7+X2\"\n      },\n      \"types\": [\n        \"street_address\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"320\",\n          \"short_name\": \"320\",\n          \"types\": [\n            \"street_number\"\n          ]\n        },\n        {\n          \"long_name\": \"Tech Place\",\n          \"short_name\": \"Tech Pl\",\n          \"types\": [\n            \"route\"\n          ]\n        },\n        {\n          \"long_name\": \"Downtown Brooklyn\",\n          \"short_name\": \"Downtown Brooklyn\",\n          \"types\": [\n            \"neighborhood\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"Brooklyn\",\n          \"short_name\": \"Brooklyn\",\n          \"types\": [\n            \"political\",\n            \"sublocality\",\n            \"sublocality_level_1\"\n          ]\n        },\n        {\n          \"long_name\": \"Kings County\",\n          \"short_name\": \"Kings County\",\n          \"types\": [\n            \"administrative_area_level_2\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"11201\",\n          \"short_name\": \"11201\",\n          \"types\": [\n            \"postal_code\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"320 Tech Pl, Brooklyn, NY 11201, USA\",\n      \"geometry\": {\n        \"location\": {\n          \"lat\": 40.6948805,\n          \"lng\": -73.98740640000001\n        },\n        \"location_type\": \"ROOFTOP\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.6962294802915,\n            \"lng\": -73.98605741970852\n          },\n          \"southwest\": {\n            \"lat\": 40.6935315197085,\n            \"lng\": -73.98875538029152\n          }\n        }\n      },\n      \"place_id\": \"ChIJg3ilF0pawokR-v1yaeu4eas\",\n      \"plus_code\": {\n        \"compound_code\": \"M2V7+X2 New York, NY, USA\",\n        \"global_code\": \"87G8M2V7+X2\"\n      },\n      \"types\": [\n        \"establishment\",\n        \"point_of_interest\",\n        \"university\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"300\",\n          \"short_name\": \"300\",\n          \"types\": [\n            \"street_number\"\n          ]\n        },\n        {\n          \"long_name\": \"Jay Street\",\n          \"short_name\": \"Jay St\",\n          \"types\": [\n            \"route\"\n          ]\n        },\n        {\n          \"long_name\": \"Downtown Brooklyn\",\n          \"short_name\": \"Downtown Brooklyn\",\n          \"types\": [\n            \"neighborhood\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"Brooklyn\",\n          \"short_name\": \"Brooklyn\",\n          \"types\": [\n            \"political\",\n            \"sublocality\",\n            \"sublocality_level_1\"\n          ]\n        },\n        {\n          \"long_name\": \"Kings County\",\n          \"short_name\": \"Kings County\",\n          \"types\": [\n            \"administrative_area_level_2\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"11201\",\n          \"short_name\": \"11201\",\n          \"types\": [\n            \"postal_code\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"300 Jay St, Brooklyn, NY 11201, USA\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 40.6959519,\n            \"lng\": -73.98729430000002\n          },\n          \"southwest\": {\n            \"lat\": 40.6950648,\n            \"lng\": -73.9881523\n          }\n        },\n        \"location\": {\n          \"lat\": 40.6950954,\n          \"lng\": -73.9875339\n        },\n        \"location_type\": \"ROOFTOP\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.6968573302915,\n            \"lng\": -73.98637431970849\n          },\n          \"southwest\": {\n            \"lat\": 40.69415936970851,\n            \"lng\": -73.98907228029151\n          }\n        }\n      },\n      \"place_id\": \"ChIJUy6-FkpawokRTW-Vi_tQTAk\",\n      \"types\": [\n        \"premise\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"318-330\",\n          \"short_name\": \"318-330\",\n          \"types\": [\n            \"street_number\"\n          ]\n        },\n        {\n          \"long_name\": \"Jay Street\",\n          \"short_name\": \"Jay St\",\n          \"types\": [\n            \"route\"\n          ]\n        },\n        {\n          \"long_name\": \"Downtown Brooklyn\",\n          \"short_name\": \"Downtown Brooklyn\",\n          \"types\": [\n            \"neighborhood\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"Brooklyn\",\n          \"short_name\": \"Brooklyn\",\n          \"types\": [\n            \"political\",\n            \"sublocality\",\n            \"sublocality_level_1\"\n          ]\n        },\n        {\n          \"long_name\": \"Kings County\",\n          \"short_name\": \"Kings County\",\n          \"types\": [\n            \"administrative_area_level_2\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"11201\",\n          \"short_name\": \"11201\",\n          \"types\": [\n            \"postal_code\"\n          ]\n        },\n        {\n          \"long_name\": \"2935\",\n          \"short_name\": \"2935\",\n          \"types\": [\n            \"postal_code_suffix\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"318-330 Jay St, Brooklyn, NY 11201, USA\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 40.6949665,\n            \"lng\": -73.9871666\n          },\n          \"southwest\": {\n            \"lat\": 40.69469369999999,\n            \"lng\": -73.9871801\n          }\n        },\n        \"location\": {\n          \"lat\": 40.6948301,\n          \"lng\": -73.9871734\n        },\n        \"location_type\": \"GEOMETRIC_CENTER\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.6961790802915,\n            \"lng\": -73.9858243697085\n          },\n          \"southwest\": {\n            \"lat\": 40.6934811197085,\n            \"lng\": -73.9885223302915\n          }\n        }\n      },\n      \"place_id\": \"ChIJSaxIRkpawokRYlp2yBYy8DM\",\n      \"types\": [\n        \"route\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"M2V7+X4\",\n          \"short_name\": \"M2V7+X4\",\n          \"types\": [\n            \"plus_code\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"New York\",\n          \"types\": [\n            \"locality\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"M2V7+X4 New York, NY, USA\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 40.695,\n            \"lng\": -73.98712499999999\n          },\n          \"southwest\": {\n            \"lat\": 40.694875,\n            \"lng\": -73.98725\n          }\n        },\n        \"location\": {\n          \"lat\": 40.6949361,\n          \"lng\": -73.9872231\n        },\n        \"location_type\": \"GEOMETRIC_CENTER\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.69628648029149,\n            \"lng\": -73.9858385197085\n          },\n          \"southwest\": {\n            \"lat\": 40.6935885197085,\n            \"lng\": -73.9885364802915\n          }\n        }\n      },\n      \"place_id\": \"GhIJpyeHqvNYREARxBbMqS5_UsA\",\n      \"plus_code\": {\n        \"compound_code\": \"M2V7+X4 New York, NY, USA\",\n        \"global_code\": \"87G8M2V7+X4\"\n      },\n      \"types\": [\n        \"plus_code\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"Downtown Brooklyn\",\n          \"short_name\": \"Downtown Brooklyn\",\n          \"types\": [\n            \"neighborhood\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"Brooklyn\",\n          \"short_name\": \"Brooklyn\",\n          \"types\": [\n            \"political\",\n            \"sublocality\",\n            \"sublocality_level_1\"\n          ]\n        },\n        {\n          \"long_name\": \"Kings County\",\n          \"short_name\": \"Kings County\",\n          \"types\": [\n            \"administrative_area_level_2\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"Downtown Brooklyn, Brooklyn, NY, USA\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 40.7059085,\n            \"lng\": -73.9785862\n          },\n          \"southwest\": {\n            \"lat\": 40.6864741,\n            \"lng\": -73.99172399999999\n          }\n        },\n        \"location\": {\n          \"lat\": 40.6960679,\n          \"lng\": -73.9845407\n        },\n        \"location_type\": \"APPROXIMATE\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.7059085,\n            \"lng\": -73.9785862\n          },\n          \"southwest\": {\n            \"lat\": 40.6864741,\n            \"lng\": -73.99172399999999\n          }\n        }\n      },\n      \"place_id\": \"ChIJAwIqikpawokRUQiYFdoX9N8\",\n      \"types\": [\n        \"neighborhood\",\n        \"political\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"11201\",\n          \"short_name\": \"11201\",\n          \"types\": [\n            \"postal_code\"\n          ]\n        },\n        {\n          \"long_name\": \"Brooklyn Heights\",\n          \"short_name\": \"Brooklyn Heights\",\n          \"types\": [\n            \"neighborhood\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"New York\",\n          \"types\": [\n            \"locality\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"Brooklyn Heights, NY 11201, USA\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 40.710594,\n            \"lng\": -73.9688331\n          },\n          \"southwest\": {\n            \"lat\": 40.6835594,\n            \"lng\": -74.006444\n          }\n        },\n        \"location\": {\n          \"lat\": 40.6986772,\n          \"lng\": -73.9859414\n        },\n        \"location_type\": \"APPROXIMATE\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.710594,\n            \"lng\": -73.9688331\n          },\n          \"southwest\": {\n            \"lat\": 40.6835594,\n            \"lng\": -74.006444\n          }\n        }\n      },\n      \"place_id\": \"ChIJ10KLdUlawokRxmIQu1GuCHk\",\n      \"postcode_localities\": [\n        \"Brooklyn\",\n        \"Brooklyn Heights\"\n      ],\n      \"types\": [\n        \"postal_code\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"Kings County\",\n          \"short_name\": \"Kings County\",\n          \"types\": [\n            \"administrative_area_level_2\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"Brooklyn\",\n          \"short_name\": \"Brooklyn\",\n          \"types\": [\n            \"political\",\n            \"sublocality\",\n            \"sublocality_level_1\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"Kings County, Brooklyn, NY, USA\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 40.7394209,\n            \"lng\": -73.8330411\n          },\n          \"southwest\": {\n            \"lat\": 40.551042,\n            \"lng\": -74.05663\n          }\n        },\n        \"location\": {\n          \"lat\": 40.6528762,\n          \"lng\": -73.95949399999999\n        },\n        \"location_type\": \"APPROXIMATE\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.7394209,\n            \"lng\": -73.8330411\n          },\n          \"southwest\": {\n            \"lat\": 40.551042,\n            \"lng\": -74.05663\n          }\n        }\n      },\n      \"place_id\": \"ChIJOwE7_GTtwokRs75rhW4_I6M\",\n      \"types\": [\n        \"administrative_area_level_2\",\n        \"political\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"Brooklyn\",\n          \"short_name\": \"Brooklyn\",\n          \"types\": [\n            \"political\",\n            \"sublocality\",\n            \"sublocality_level_1\"\n          ]\n        },\n        {\n          \"long_name\": \"Kings County\",\n          \"short_name\": \"Kings County\",\n          \"types\": [\n            \"administrative_area_level_2\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"Brooklyn, NY, USA\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 40.739446,\n            \"lng\": -73.8333651\n          },\n          \"southwest\": {\n            \"lat\": 40.551042,\n            \"lng\": -74.05663\n          }\n        },\n        \"location\": {\n          \"lat\": 40.6781784,\n          \"lng\": -73.9441579\n        },\n        \"location_type\": \"APPROXIMATE\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.739446,\n            \"lng\": -73.8333651\n          },\n          \"southwest\": {\n            \"lat\": 40.551042,\n            \"lng\": -74.05663\n          }\n        }\n      },\n      \"place_id\": \"ChIJCSF8lBZEwokRhngABHRcdoI\",\n      \"types\": [\n        \"political\",\n        \"sublocality\",\n        \"sublocality_level_1\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"New York\",\n          \"types\": [\n            \"locality\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"New York, NY, USA\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 40.9175771,\n            \"lng\": -73.70027209999999\n          },\n          \"southwest\": {\n            \"lat\": 40.4773991,\n            \"lng\": -74.25908989999999\n          }\n        },\n        \"location\": {\n          \"lat\": 40.7127753,\n          \"lng\": -74.0059728\n        },\n        \"location_type\": \"APPROXIMATE\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 40.9175771,\n            \"lng\": -73.70027209999999\n          },\n          \"southwest\": {\n            \"lat\": 40.4773991,\n            \"lng\": -74.25908989999999\n          }\n        }\n      },\n      \"place_id\": \"ChIJOwg_06VPwokRYv534QaPC8g\",\n      \"types\": [\n        \"locality\",\n        \"political\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"New York\",\n          \"short_name\": \"NY\",\n          \"types\": [\n            \"administrative_area_level_1\",\n            \"political\"\n          ]\n        },\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"New York, USA\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 45.015861,\n            \"lng\": -71.777491\n          },\n          \"southwest\": {\n            \"lat\": 40.4773991,\n            \"lng\": -79.7625901\n          }\n        },\n        \"location\": {\n          \"lat\": 43.2994285,\n          \"lng\": -74.21793260000001\n        },\n        \"location_type\": \"APPROXIMATE\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 45.015861,\n            \"lng\": -71.777491\n          },\n          \"southwest\": {\n            \"lat\": 40.4773991,\n            \"lng\": -79.7625901\n          }\n        }\n      },\n      \"place_id\": \"ChIJqaUj8fBLzEwRZ5UY3sHGz90\",\n      \"types\": [\n        \"administrative_area_level_1\",\n        \"political\"\n      ]\n    },\n    {\n      \"address_components\": [\n        {\n          \"long_name\": \"United States\",\n          \"short_name\": \"US\",\n          \"types\": [\n            \"country\",\n            \"political\"\n          ]\n        }\n      ],\n      \"formatted_address\": \"United States\",\n      \"geometry\": {\n        \"bounds\": {\n          \"northeast\": {\n            \"lat\": 74.071038,\n            \"lng\": -66.885417\n          },\n          \"southwest\": {\n            \"lat\": 18.7763,\n            \"lng\": 166.9999999\n          }\n        },\n        \"location\": {\n          \"lat\": 37.09024,\n          \"lng\": -95.712891\n        },\n        \"location_type\": \"APPROXIMATE\",\n        \"viewport\": {\n          \"northeast\": {\n            \"lat\": 74.071038,\n            \"lng\": -66.885417\n          },\n          \"southwest\": {\n            \"lat\": 18.7763,\n            \"lng\": 166.9999999\n          }\n        }\n      },\n      \"place_id\": \"ChIJCzYy5IS16lQRQrfeQ5K5Oxw\",\n      \"types\": [\n        \"country\",\n        \"political\"\n      ]\n    }\n  ],\n  \"status\": \"OK\"\n}\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 320,
    "y": 1460,
    "wires": [
      [
        "149c457e4c868202",
        "742fd0ca758c426e",
        "98c65f3e45a46b93"
      ]
    ]
  },
  {
    "id": "32ebb8a8020979af",
    "type": "inject",
    "z": "fe39854b38341397",
    "g": "83bbbdad52aaa4ce",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 260,
    "y": 1520,
    "wires": [
      [
        "5ab932c7379a007b"
      ]
    ]
  },
  {
    "id": "2c42bc741c4c1f58",
    "type": "http request",
    "z": "fe39854b38341397",
    "g": "83bbbdad52aaa4ce",
    "name": "Rev geocode",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://maps.googleapis.com/maps/api/geocode/json?latlng={{lat}},{{lon}}&key={{gkey}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 530,
    "y": 1160,
    "wires": [
      [
        "742fd0ca758c426e",
        "149c457e4c868202"
      ]
    ]
  },
  {
    "id": "ce34743f0495640b",
    "type": "credentials",
    "z": "fe39854b38341397",
    "g": "83bbbdad52aaa4ce",
    "name": "",
    "props": [
      {
        "value": "gkey",
        "type": "msg"
      }
    ],
    "x": 530,
    "y": 1100,
    "wires": [
      [
        "2c42bc741c4c1f58"
      ]
    ]
  },
  {
    "id": "87a626e75ed5293a",
    "type": "http request",
    "z": "fe39854b38341397",
    "g": "e794c152f8008813",
    "name": "Rev geocode",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://atlas.microsoft.com/search/address/reverse/crossStreet/json?api-version=1.0&query={{req.query.lat}},{{req.query.lon}}&subscription-key={{azurekey}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 1350,
    "y": 480,
    "wires": [
      [
        "445ec0d3a1314011"
      ]
    ]
  },
  {
    "id": "9cb52c9249da41a4",
    "type": "credentials",
    "z": "fe39854b38341397",
    "g": "e794c152f8008813",
    "name": "azure",
    "props": [
      {
        "value": "azurekey",
        "type": "msg"
      }
    ],
    "x": 1330,
    "y": 440,
    "wires": [
      [
        "87a626e75ed5293a"
      ]
    ]
  },
  {
    "id": "43352a4b209a452f",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "e794c152f8008813",
    "name": "parse",
    "func": "const { addresses } = msg.payload;\nconst addr = (addresses || [])[0]?.address;\n\nconst BoroughNames = {\n    \"Brooklyn\": \"BK\",\n    \"Manhattan\": \"M\",\n    \"Queens\": \"Q\",\n    \"Bronx\": \"BX\",\n    \"Staten Island\": \"SI\",\n}\n\nlet borough = addr.municipalitySubdivision;\nlet cross = addr.streetName.split(' & ').map(x => x.split(', ')[0].trim());\nlet name = `${BoroughNames[borough]||borough} - ${cross.join('/')}`\nreturn {\n    ...msg,\n    payload: {\n        name,\n        // neighborhood: ,\n        // street_number: ,\n        street: addr.street,\n        borough,\n        state: addr.countrySubdivisionName,\n        zip_code: addr.postalCode,\n    }\n};\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1330,
    "y": 560,
    "wires": [
      [
        "85db5203b4cf700b"
      ]
    ]
  },
  {
    "id": "44a765fc3366ca02",
    "type": "inject",
    "z": "fe39854b38341397",
    "g": "e794c152f8008813",
    "name": "manual lat/lon",
    "props": [
      {
        "p": "req",
        "v": "{\"query\":{\"lat\":40.69493606331184,\"lon\":-73.98722313369241}}",
        "vt": "json"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 1130,
    "y": 400,
    "wires": [
      [
        "9cb52c9249da41a4"
      ]
    ]
  },
  {
    "id": "770f9dbf85886698",
    "type": "http in",
    "z": "fe39854b38341397",
    "g": "e794c152f8008813",
    "name": "",
    "url": "/rev_geocode_name",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 1110,
    "y": 440,
    "wires": [
      [
        "9cb52c9249da41a4"
      ]
    ]
  },
  {
    "id": "36d094443c87dd31",
    "type": "http response",
    "z": "fe39854b38341397",
    "g": "e794c152f8008813",
    "name": "",
    "statusCode": "200",
    "headers": {
      "Content-Type": "application/json"
    },
    "x": 1540,
    "y": 600,
    "wires": []
  },
  {
    "id": "85db5203b4cf700b",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "e794c152f8008813",
    "name": "JSON",
    "func": "\nreturn { ...msg, payload: JSON.stringify(msg.payload) };",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1330,
    "y": 600,
    "wires": [
      [
        "36d094443c87dd31"
      ]
    ]
  },
  {
    "id": "445ec0d3a1314011",
    "type": "switch",
    "z": "fe39854b38341397",
    "g": "e794c152f8008813",
    "name": "check error",
    "property": "payload",
    "propertyType": "msg",
    "rules": [
      {
        "t": "hask",
        "v": "error",
        "vt": "str"
      },
      {
        "t": "hask",
        "v": "addresses",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 1350,
    "y": 520,
    "wires": [
      [
        "44248f3fd06df86b"
      ],
      [
        "43352a4b209a452f"
      ]
    ]
  },
  {
    "id": "44248f3fd06df86b",
    "type": "http response",
    "z": "fe39854b38341397",
    "g": "e794c152f8008813",
    "name": "",
    "statusCode": "500",
    "headers": {
      "Content-Type": "application/json"
    },
    "x": 1540,
    "y": 520,
    "wires": []
  },
  {
    "id": "05306c2848c4de07",
    "type": "inject",
    "z": "fe39854b38341397",
    "g": "74f40edae93c2de2",
    "name": "",
    "props": [],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 1070,
    "y": 80,
    "wires": [
      [
        "66ed7c4c80f4386e"
      ]
    ]
  },
  {
    "id": "a340971b5beb0434",
    "type": "http request",
    "z": "fe39854b38341397",
    "g": "74f40edae93c2de2",
    "name": "",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://api.fieldkit.org/ttn/webhook?token={{{fk_token}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": true,
    "headers": [
      {
        "keyType": "other",
        "keyValue": "Content-Type",
        "valueType": "other",
        "valueValue": "application/json"
      }
    ],
    "x": 1190,
    "y": 220,
    "wires": [
      [
        "087dbb635efd79a6"
      ]
    ]
  },
  {
    "id": "087dbb635efd79a6",
    "type": "debug",
    "z": "fe39854b38341397",
    "g": "74f40edae93c2de2",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1230,
    "y": 260,
    "wires": []
  },
  {
    "id": "4d7c990d3e3d8b5a",
    "type": "credentials",
    "z": "fe39854b38341397",
    "g": "74f40edae93c2de2",
    "name": "Fieldkit token store",
    "props": [
      {
        "value": "fk_token",
        "type": "msg"
      }
    ],
    "x": 1170,
    "y": 180,
    "wires": [
      [
        "a340971b5beb0434"
      ]
    ]
  },
  {
    "id": "66ed7c4c80f4386e",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "74f40edae93c2de2",
    "name": "set data",
    "func": "const fields = {\n    \"name\": \"sensor_display_name\"\n}\n\n\nreturn {\n    payload: {\n        \"sensor_display_name\": \"BK - Junius St/Sutter Ave\",\n        \"design_ver\": \"nyu_mk2.5\",\n        \"built_by\": \"floodnet\",\n        \"sensor_address_borough\": \"Brooklyn\",\n        \"sensor_address_neighborhood\": \"Brownsville\",\n        \"sensor_address_zip\": 11212,\n        \"sensor_address_state\": \"NY\",\n        \"date_deployed\": \"2023-05-24T12:00:00-05:00\",\n        \"date_down\": \"\",\n        \"deployment_id\": \"lovely_helped_lamb\",\n        \"sensor_types\": [\n            \"range\"\n        ],\n        \"lat\": 40.6687423,\n        \"lon\": -73.9026575,\n        \"deploy_type\": \"pluvial\",\n        \"nearest_weather_station\": \"nyc-micronet-bkbrow\",\n        \"nearest_tidal_id\": \"usgs-tidal-01311875\",\n        \"community_contact_name\": \"\",\n        \"sensor_state\": \"started\",\n        \"sensor_agg\": \"median\",\n        \"sensor_sleep_s\": 60,\n        \"sensor_meas_delta_ms\": 150,\n        \"sensor_reading_count\": 7,\n        \"app_name\": \"floodnet-live\",\n        \"mounted_over\": \"Sidewalk\",\n        \"sensor_mount\": \"Street signpost\",\n        \"deployed_by\": \"FloodNet\",\n        \"sensor_status\": \"up\",\n        \"fk_status\": \"visible\"\n    }\n};\n\n// {\n//   \"sensor_display_name\": \"SI - Willow Rd E/Nina Ave\",\n//   \"design_ver\": \"nyu_mk3\",\n//   \"built_by\": \"floodnet_psc\", \n//   \"sensor_address_borough\": \"Staten Island\",\n//   \"sensor_address_neighborhood\": \"Graniteville\",\n//   \"sensor_address_zip\": 10314,\n//   \"sensor_address_state\": \"NY\",\n//   \"date_deployed\": \"2022-07-22T17:00:00-05:00\",\n//   \"date_down\": \"\",\n//   \"deployment_id\": \"asleep_apricot_bedbug\",\n//   \"sensor_types\": [\"range\"],\n//   \"lat\": 40.61133023,\n//   \"lon\": -74.1510578,\n//   \"deploy_type\": \"pluvial\",\n//   \"nearest_weather_station\": \"nyc-micronet-sifkil\",\n//   \"nearest_tidal_id\": \"\",\n//   \"community_contact_name\": \"\",\n//   \"sensor_state\": \"started\",\n//   \"sensor_agg\": \"median\",\n//   \"sensor_sleep_s\": 60,\n//   \"sensor_meas_delta_ms\": 150,\n//   \"sensor_reading_count\": 5,\n//   \"app_name\": \"floodnet-live\",\n//   \"mounted_over\": \"Sidewalk\",\n//   \"sensor_mount\": \"Street signpost\",\n//   \"deployed_by\": \"FloodNet\",\n//   \"sensor_status\": \"up\",\n//   \"fk_status\": \"visible\"\n// }",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1080,
    "y": 120,
    "wires": [
      [
        "4d7c990d3e3d8b5a"
      ]
    ]
  },
  {
    "id": "36cd5f343bf51096",
    "type": "http in",
    "z": "fe39854b38341397",
    "g": "74f40edae93c2de2",
    "name": "",
    "url": "/deployment_change",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 1310,
    "y": 80,
    "wires": [
      [
        "cd9cbe4ffaed2441"
      ]
    ]
  },
  {
    "id": "cd9cbe4ffaed2441",
    "type": "function",
    "z": "fe39854b38341397",
    "g": "74f40edae93c2de2",
    "name": "format data",
    "func": "const {\n    payload,\n    keys: [deployment_id, ...keys]\n} = msg.req.body;\nnode.warn([deployment_id, payload])\n\nif(!deployment_id || !Object.keys(payload).length) {\n    return;\n}\n\nreturn {\n    payload: {\n        deployment_id,\n        ...payload\n    }\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1310,
    "y": 120,
    "wires": [
      [
        "4d7c990d3e3d8b5a"
      ]
    ]
  },
  {
    "id": "eabb009cedb873fb",
    "type": "function",
    "z": "fe39854b38341397",
    "name": "parse",
    "func": "\nreturn {\n    ...msg,\n    payload: msg.req.body,\n    asdf:  5,\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 2110,
    "y": 460,
    "wires": [
      [
        "d8e82aad12ed3e0d",
        "45a277907854ac03"
      ]
    ]
  },
  {
    "id": "45a277907854ac03",
    "type": "debug",
    "z": "fe39854b38341397",
    "name": "debug 44",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 2280,
    "y": 420,
    "wires": []
  },
  {
    "id": "d8e82aad12ed3e0d",
    "type": "http response",
    "z": "fe39854b38341397",
    "name": "",
    "statusCode": "",
    "headers": {},
    "x": 2270,
    "y": 460,
    "wires": []
  },
  {
    "id": "fe96db35d8d7d0a0",
    "type": "http in",
    "z": "fe39854b38341397",
    "name": "",
    "url": "/deployment_changex",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 2050,
    "y": 420,
    "wires": [
      []
    ]
  },
  {
    "id": "97a92550bb51b952",
    "type": "inject",
    "z": "65e69383a183aa51",
    "g": "44b9cc0aad40ed79",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "15 05 * * *",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[\t   'floodnet-live'\t]",
    "payloadType": "jsonata",
    "x": 130,
    "y": 120,
    "wires": [
      [
        "0d93778db11fa758"
      ]
    ]
  },
  {
    "id": "93083f815ba539af",
    "type": "function",
    "z": "65e69383a183aa51",
    "g": "44b9cc0aad40ed79",
    "name": "Create query",
    "func": "var bucket_name = msg.payload;\nvar app_name = bucket_name.split('-')[1];\n\nvar lookback_days = 3;\n\nvar std_limit = 10.0;\nvar max_val_filt = 4000;\n\nvar st_hour = 22;\nvar en_hour = 5;\n\nvar meas_name = 'flood-sensor';\nvar field_name = 'dist_mm';\n\nvar st_ts = new Date();\nst_ts.setDate(st_ts.getDate() - lookback_days);\nst_ts.setHours(st_hour);\nst_ts.setMinutes(0);\nst_ts.setSeconds(0);\nst_ts.setMilliseconds(0);\n\nvar en_ts = new Date();\nen_ts.setHours(en_hour);\nen_ts.setMinutes(0);\nen_ts.setSeconds(0);\nen_ts.setMilliseconds(0);\n\nvar tz_offset = new Date().getTimezoneOffset() / 60;\nvar st_hour_utc = (st_ts.getHours() + tz_offset) % 24;\nvar en_hour_utc = (en_ts.getHours() + tz_offset) % 24;\n\nreturn {\n    ...msg,\n    query: `\n-- top-level query lets us filter down using stddev\nselect \n    deployment_id, \n    median_height_mm\nfrom (\n\t\tselect \n\t\t    -- calc stddev to filter out potential floods/misleading nights\n\t\t\tstddev(\"${field_name}\") as dist_std,\n\t\t\t\n\t\t\t-- get median\n\t\t\tPERCENTILE_CONT(0.5) \n\t\t\t    WITHIN GROUP(ORDER BY \"${field_name}\") \n\t\t\t    as median_height_mm,\n\n\t\t\tdeployment_id\n\t\tfrom ${app_name}.depth_data\n\t\twhere \n\t\t    -- filter last N days\n\t\t\t(time between\n\t\t\t    to_timestamp(${st_ts.getTime() / 1000}) and \n\t\t\t    to_timestamp(${en_ts.getTime() / 1000})\n\t\t\t) and \n\n            -- filter by time of day\t\t\t\n\t\t\t(extract(hour from time) not between \n\t\t\t    ${st_hour_utc} and ${en_hour_utc}\n\t\t\t) and \n\n\t\t\t-- filter out out-of-range data\n\t\t\t\"${field_name}\" < ${max_val_filt}\n\t\tgroup by deployment_id\n) s\nwhere dist_std < ${std_limit}\n`\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 190,
    "y": 200,
    "wires": [
      [
        "d44fa3133fc3a99e",
        "aec269bf5d046e8e"
      ]
    ]
  },
  {
    "id": "0d93778db11fa758",
    "type": "split",
    "z": "65e69383a183aa51",
    "g": "44b9cc0aad40ed79",
    "name": "",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 150,
    "y": 160,
    "wires": [
      [
        "93083f815ba539af"
      ]
    ]
  },
  {
    "id": "d44fa3133fc3a99e",
    "type": "debug",
    "z": "65e69383a183aa51",
    "g": "44b9cc0aad40ed79",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 190,
    "y": 240,
    "wires": []
  },
  {
    "id": "8744e043d5b34f18",
    "type": "debug",
    "z": "65e69383a183aa51",
    "g": "44b9cc0aad40ed79",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 550,
    "y": 140,
    "wires": []
  },
  {
    "id": "aec269bf5d046e8e",
    "type": "postgresql",
    "z": "65e69383a183aa51",
    "g": "44b9cc0aad40ed79",
    "name": "calc median",
    "query": "",
    "postgreSQLConfig": "ec8702db3a5c2dc7",
    "split": false,
    "rowsPerMsg": 1,
    "outputs": 1,
    "x": 370,
    "y": 200,
    "wires": [
      [
        "a2443c2774b1616d",
        "8744e043d5b34f18"
      ]
    ]
  },
  {
    "id": "a2443c2774b1616d",
    "type": "split",
    "z": "65e69383a183aa51",
    "g": "44b9cc0aad40ed79",
    "name": "",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 530,
    "y": 200,
    "wires": [
      [
        "f8c82157c0baeb1f"
      ]
    ]
  },
  {
    "id": "f8c82157c0baeb1f",
    "type": "postgresql",
    "z": "65e69383a183aa51",
    "g": "44b9cc0aad40ed79",
    "name": "update median",
    "query": "update deployments\nset median_height_mm = '{{{ payload.median_height_mm }}}'\nwhere deployment_id = '{{{ payload.deployment_id }}}'",
    "postgreSQLConfig": "ec8702db3a5c2dc7",
    "split": false,
    "rowsPerMsg": 1,
    "outputs": 1,
    "x": 560,
    "y": 260,
    "wires": [
      []
    ]
  }
]