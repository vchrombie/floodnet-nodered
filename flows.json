[
  {
    "id": "b8f9c9a92652ae8e",
    "type": "tab",
    "label": "Sensor ingestion",
    "disabled": false,
    "info": ""
  },
  {
    "id": "63ec5913b540d2a2",
    "type": "tab",
    "label": "Sensor Ingestion Timescale",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "59b6ea3e0dab2122",
    "type": "tab",
    "label": "Weather ingestion",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "e0603b84198efa0a",
    "type": "tab",
    "label": "Tidal ingestion",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "54e1edf44c387788",
    "type": "tab",
    "label": "Sensor calibration",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "e3941d68335018ed",
    "type": "tab",
    "label": "Gateway ingestion",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "101718428de70120",
    "type": "tab",
    "label": "Sensor creation",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "767ee0c79d6fcca5",
    "type": "tab",
    "label": "Sensor deploy",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "e63e21ac547645de",
    "type": "tab",
    "label": "Sensor manage",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "41b751a153893032",
    "type": "tab",
    "label": "Dev",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "50d1ba0730ca6bda",
    "type": "tab",
    "label": "Flow 1",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "10294d398bc578d5",
    "type": "tab",
    "label": "Flow 2",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "f2fd5cb1b92ed0e0",
    "type": "tab",
    "label": "Field N/w Testing",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "884a48d5a0e9bd19",
    "type": "tab",
    "label": "Sensor Ingestion New",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "a9b09a3b.5bb118",
    "type": "tab",
    "label": "Sensor Application change and Control Dashboard",
    "disabled": false,
    "info": ""
  },
  {
    "id": "888786c5.d5aab8",
    "type": "subflow",
    "name": "FIFO",
    "info": "# FIFO\n## First in First Out subflow\nThis flow receives a series of msg.payloads and builds a queue using FIFO (First in First out) method. The LIFO size is configurabe through subflow enviroment variables.\n\n### Input\n`msg.topic == put`\nWill add the `msg.payload` to the end of the array. Everytime a new item is received the second output sends the complete queue.\n\n`msg.topic == get`\nWill remove the first item of the stack and will send it in the first output\n\n`msg.topic == list`\nSends the complete list on the second output.\n\n### Output 1\nThe first item on the top of the stack. It is sent only when `msg.topic == get`.\n\n### Output 2\nThe complete queue in Array format. It is sent everytime a new item is added, removed or when `msg.topic == list`\n\n### Status\nAlways show the queue size.\n\n### Enviroment Variables\n`Buffer_Size` defines the size of the queue. If a new item arrives and the queue is full, the oldest item will be removed.",
    "category": "",
    "in": [
      {
        "x": 140,
        "y": 120,
        "wires": [
          {
            "id": "5ce94b12.5c1c44"
          }
        ]
      }
    ],
    "out": [
      {
        "x": 720,
        "y": 60,
        "wires": [
          {
            "id": "a6ca9e09.83012",
            "port": 0
          }
        ]
      },
      {
        "x": 900,
        "y": 100,
        "wires": [
          {
            "id": "d22ee914.d446d8",
            "port": 0
          }
        ]
      }
    ],
    "env": [
      {
        "name": "Buffer_Size",
        "type": "num",
        "value": "6"
      }
    ],
    "icon": "font-awesome/fa-ellipsis-v",
    "status": {
      "x": 1040,
      "y": 140,
      "wires": [
        {
          "id": "ad0059b4.1b2978",
          "port": 0
        }
      ]
    }
  },
  {
    "id": "49d4aa47d32b30f6",
    "type": "group",
    "z": "63ec5913b540d2a2",
    "name": "Incoming Messages",
    "style": {
      "label": true
    },
    "nodes": [
      "816fd82a0451d618",
      "eb571e78cd85f70a",
      "20923d20ec88e910",
      "ea8cbeac5dbcd8a6",
      "421b22866c92b131",
      "7a34dea54b35c817",
      "cf5ad217a5345e45",
      "b43cfa81b9314d3c"
    ],
    "x": 134,
    "y": 79,
    "w": 592,
    "h": 262
  },
  {
    "id": "58545360d7955b4b",
    "type": "group",
    "z": "63ec5913b540d2a2",
    "name": "Message Parsing",
    "style": {
      "label": true
    },
    "nodes": [
      "13740863fdc9d238",
      "b10b2f38b737ef92",
      "847b9dd076743050",
      "a1a6cca40ff40590",
      "4b0a1d9dcedab4d0",
      "d417c629faa246db",
      "4e78e8e1cd3dffa7",
      "eb83bf9179f7b4c0",
      "698ea5522a9d3fa2",
      "030599a254594890",
      "3156963a24f356d5",
      "fa04e5bc9d60a061",
      "8d465086c3ef332a",
      "dc63b3fdfca9e21b",
      "3b863b4807cf0453",
      "071ee8aa8bd88a27",
      "037e6e65201aee12",
      "dd9bc5bb190f5dc0",
      "3b99b5dd48f7315b",
      "907eb2768e2bb846",
      "4c8ddb9156f5c71d"
    ],
    "x": 134,
    "y": 419,
    "w": 1092,
    "h": 582
  },
  {
    "id": "9adc6d7359c13beb",
    "type": "group",
    "z": "63ec5913b540d2a2",
    "name": "Insert Timescale",
    "style": {
      "label": true
    },
    "nodes": [
      "5d2cac28a29c5ed6",
      "d4c9d6d5b6d2e143",
      "3b2123d7c7dd611f"
    ],
    "x": 1324,
    "y": 499,
    "w": 592,
    "h": 82
  },
  {
    "id": "c4537d577aa94bdd",
    "type": "group",
    "z": "63ec5913b540d2a2",
    "name": "Insert Fieldkit",
    "style": {
      "label": true
    },
    "nodes": [
      "8aa5a2865387f144",
      "c6910763e995f76a",
      "3d8a84cc2f94b50e",
      "400d9dcee3aaabc1"
    ],
    "x": 1324,
    "y": 399,
    "w": 712,
    "h": 82
  },
  {
    "id": "7d248c59cea6eb8f",
    "type": "group",
    "z": "63ec5913b540d2a2",
    "name": "Insert Sensor Table",
    "style": {
      "label": true
    },
    "nodes": [
      "a70eea6c2d3ac2ef",
      "de4b529a60542204",
      "15c0295a79c1f759"
    ],
    "x": 1324,
    "y": 599,
    "w": 592,
    "h": 82
  },
  {
    "id": "4aa8585e6cc1a05a",
    "type": "group",
    "z": "63ec5913b540d2a2",
    "name": "Get Deployment Info",
    "style": {
      "label": true
    },
    "nodes": [
      "3f263f0736505839",
      "c4864b55d9c06278",
      "c5d3a19919464f9a",
      "4d56fb87f74cc417",
      "54748c0a68261926",
      "61bebd9f7ff1dde8",
      "08aa1fc2c62337f9"
    ],
    "x": 754,
    "y": 99,
    "w": 892,
    "h": 202
  },
  {
    "id": "f462968d96dbebc6",
    "type": "group",
    "z": "884a48d5a0e9bd19",
    "name": "Incoming Messages",
    "style": {
      "label": true
    },
    "nodes": [
      "9bc3d2b53c6dfc53",
      "39fe476b6b1f2f11",
      "3fbb7a83ef7098e8",
      "2ff15761b3d184a4",
      "b176583e46a3b2e7",
      "f5f4b00fb97364b6",
      "1c5d44bb9051e829",
      "3dd9b900f21d120f"
    ],
    "x": 134,
    "y": 79,
    "w": 592,
    "h": 262
  },
  {
    "id": "70bad69eb790cf80",
    "type": "group",
    "z": "884a48d5a0e9bd19",
    "name": "Message Parsing",
    "style": {
      "label": true
    },
    "nodes": [
      "d467987369115eb8",
      "64aee1367461a493",
      "5817b03984e756db",
      "b5cb7e639d01255b",
      "e4659d9c4f1b9041",
      "6adae992fa59bc5e",
      "0a29de6456b38fde",
      "3657d76dcc1e88c4",
      "50ea9931cb42a103",
      "37340486b357d0c3",
      "edae1419b5229ed7",
      "0dca511fed6d8a5a",
      "e60b543ebe263d3f",
      "5cd12833cfddaa24",
      "d39d67f31d57fd21",
      "293369d48d6a5ea4",
      "778ca656b7965c11",
      "dd2a17305b62987a",
      "abcf03a9d076fa07",
      "1c757055c91f8935",
      "4903bab99db32591",
      "96e9dcdc4a2903e4",
      "5f9f40ecd95922d1",
      "f318171a0ab559ee"
    ],
    "x": 134,
    "y": 419,
    "w": 1092,
    "h": 582
  },
  {
    "id": "387e62e846db79d0",
    "type": "group",
    "z": "884a48d5a0e9bd19",
    "name": "Insert Fieldkit",
    "style": {
      "label": true
    },
    "nodes": [
      "e389034fdc680f86",
      "ca21428bdad7582b",
      "6e39030ce2cadb5e",
      "f4119c7e8f910d33"
    ],
    "x": 1274,
    "y": 439,
    "w": 712,
    "h": 82
  },
  {
    "id": "40aef3d94983c233",
    "type": "group",
    "z": "884a48d5a0e9bd19",
    "name": "Insert Sensor Table",
    "style": {
      "label": true
    },
    "nodes": [
      "dddbf0e01423f8fa",
      "e174b27b30d98b03",
      "6f7bad6310a72c9e"
    ],
    "x": 1264,
    "y": 799,
    "w": 592,
    "h": 82
  },
  {
    "id": "262c4f8632065040",
    "type": "group",
    "z": "884a48d5a0e9bd19",
    "name": "Get Deployment Info",
    "style": {
      "label": true
    },
    "nodes": [
      "2d278aabda8957dc",
      "5bbdb458560051ce",
      "3596f5efeaa637bf",
      "54270a1d03ac8262",
      "22b3f2d7c1becf54",
      "3201044a929ff3d8",
      "5b185b42ad1cb6a4",
      "bc502be75595dbb4"
    ],
    "x": 754,
    "y": 39,
    "w": 672,
    "h": 262
  },
  {
    "id": "a18e44a4e8d519d0",
    "type": "group",
    "z": "884a48d5a0e9bd19",
    "name": "Insert Timescale",
    "style": {
      "label": true
    },
    "nodes": [
      "9cdd702ebcc3f775",
      "a5d0b357c855bdca",
      "040ad2c88b16741f"
    ],
    "x": 1264,
    "y": 619,
    "w": 582,
    "h": 82
  },
  {
    "id": "8f7859036b247ff4",
    "type": "mqtt-broker",
    "name": "floodnet-live",
    "broker": "nam1.cloud.thethings.network",
    "port": "8883",
    "tls": "4ad802e2463acc54",
    "clientid": "",
    "autoConnect": true,
    "usetls": true,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "sessionExpiry": ""
  },
  {
    "id": "4ad802e2463acc54",
    "type": "tls-config",
    "name": "",
    "cert": "",
    "key": "",
    "ca": "",
    "certname": "",
    "keyname": "",
    "caname": "",
    "servername": "",
    "verifyservercert": true,
    "alpnprotocol": ""
  },
  {
    "id": "4b9a03aed4358412",
    "type": "influxdb",
    "hostname": "127.0.0.1",
    "port": "8086",
    "protocol": "http",
    "database": "database",
    "name": "",
    "usetls": false,
    "tls": "4ad802e2463acc54",
    "influxdbVersion": "2.0",
    "url": "http://influxdb:8086",
    "rejectUnauthorized": true
  },
  {
    "id": "b34078e6.e60df8",
    "type": "ui_tab",
    "z": "101718428de70120",
    "name": "Create",
    "icon": "dashboard",
    "order": 1,
    "disabled": false,
    "hidden": false
  },
  {
    "id": "ebb68a36bf8edca2",
    "type": "ui_base",
    "theme": {
      "name": "theme-dark",
      "lightTheme": {
        "default": "#0094CE",
        "baseColor": "#0094CE",
        "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
        "edited": true,
        "reset": false
      },
      "darkTheme": {
        "default": "#097479",
        "baseColor": "#097479",
        "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
        "edited": true,
        "reset": false
      },
      "customTheme": {
        "name": "Untitled Theme 1",
        "default": "#4B7930",
        "baseColor": "#4B7930",
        "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
      },
      "themeState": {
        "base-color": {
          "default": "#097479",
          "value": "#097479",
          "edited": false
        },
        "page-titlebar-backgroundColor": {
          "value": "#097479",
          "edited": false
        },
        "page-backgroundColor": {
          "value": "#111111",
          "edited": false
        },
        "page-sidebar-backgroundColor": {
          "value": "#333333",
          "edited": false
        },
        "group-textColor": {
          "value": "#0eb8c0",
          "edited": false
        },
        "group-borderColor": {
          "value": "#555555",
          "edited": false
        },
        "group-backgroundColor": {
          "value": "#333333",
          "edited": false
        },
        "widget-textColor": {
          "value": "#eeeeee",
          "edited": false
        },
        "widget-backgroundColor": {
          "value": "#097479",
          "edited": false
        },
        "widget-borderColor": {
          "value": "#333333",
          "edited": false
        },
        "base-font": {
          "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
        }
      },
      "angularTheme": {
        "primary": "indigo",
        "accents": "blue",
        "warn": "red",
        "background": "grey",
        "palette": "light"
      }
    },
    "site": {
      "name": "Node-RED Dashboard",
      "hideToolbar": "false",
      "allowSwipe": "false",
      "lockMenu": "false",
      "allowTempTheme": "true",
      "dateFormat": "DD/MM/YYYY",
      "sizes": {
        "sx": 48,
        "sy": 48,
        "gx": 6,
        "gy": 6,
        "cx": 6,
        "cy": 6,
        "px": 0,
        "py": 0
      }
    }
  },
  {
    "id": "f4b50fc6dae783b8",
    "type": "ui_group",
    "name": "Create sensor",
    "tab": "b34078e6.e60df8",
    "order": 2,
    "disp": true,
    "width": "6",
    "collapse": false,
    "className": ""
  },
  {
    "id": "803f2d085a7b80f8",
    "type": "ui_group",
    "name": "Deploy sensor",
    "tab": "4f7beffc6bad8cca",
    "order": 3,
    "disp": true,
    "width": "6",
    "collapse": false,
    "className": ""
  },
  {
    "id": "a8ccca99870fd736",
    "type": "ui_group",
    "name": "New sensor keys",
    "tab": "b34078e6.e60df8",
    "order": 3,
    "disp": true,
    "width": "6",
    "collapse": false,
    "className": ""
  },
  {
    "id": "b0e7be89053d38f6",
    "type": "ui_tab",
    "name": "Quality control",
    "icon": "dashboard",
    "order": 2,
    "disabled": false,
    "hidden": false
  },
  {
    "id": "4f7beffc6bad8cca",
    "type": "ui_tab",
    "name": "Deploy",
    "icon": "dashboard",
    "order": 3,
    "disabled": false,
    "hidden": false
  },
  {
    "id": "afaab3096b157a9b",
    "type": "ui_group",
    "name": "Quality control",
    "tab": "b0e7be89053d38f6",
    "order": 4,
    "disp": true,
    "width": "6",
    "collapse": false,
    "className": ""
  },
  {
    "id": "15cc5b5e815472cf",
    "type": "ui_group",
    "name": "Rev geocode",
    "tab": "4f7beffc6bad8cca",
    "order": 2,
    "disp": true,
    "width": "6",
    "collapse": false,
    "className": ""
  },
  {
    "id": "a8bf5499468b4017",
    "type": "ui_group",
    "name": "Locate",
    "tab": "4f7beffc6bad8cca",
    "order": 1,
    "disp": true,
    "width": "6",
    "collapse": false,
    "className": ""
  },
  {
    "id": "b0207c7b4d5ca6a1",
    "type": "ui_group",
    "name": "Manage",
    "tab": "5cbcc75ca3ef874c",
    "order": 1,
    "disp": true,
    "width": "6",
    "collapse": false,
    "className": ""
  },
  {
    "id": "5cbcc75ca3ef874c",
    "type": "ui_tab",
    "name": "Manage",
    "icon": "dashboard",
    "disabled": false,
    "hidden": false
  },
  {
    "id": "69a33419a2453bea",
    "type": "mqtt-broker",
    "name": "floodnet-lab",
    "broker": "nam1.cloud.thethings.network",
    "port": "8883",
    "tls": "4ad802e2463acc54",
    "clientid": "",
    "autoConnect": true,
    "usetls": true,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "sessionExpiry": ""
  },
  {
    "id": "16f395ad93e105b8",
    "type": "mqtt-broker",
    "name": "floodnet-test",
    "broker": "nam1.cloud.thethings.network",
    "port": "8883",
    "tls": "4ad802e2463acc54",
    "clientid": "",
    "autoConnect": true,
    "usetls": true,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "sessionExpiry": ""
  },
  {
    "id": "232424bf32c1529c",
    "type": "mqtt-broker",
    "name": "nyu-production",
    "broker": "nam1.cloud.thethings.network",
    "port": "8883",
    "tls": "4ad802e2463acc54",
    "clientid": "",
    "autoConnect": true,
    "usetls": true,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "sessionExpiry": ""
  },
  {
    "id": "ec8702db3a5c2dc7",
    "type": "postgreSQLConfig",
    "name": "timescale",
    "host": "timescale",
    "hostFieldType": "str",
    "port": "5432",
    "portFieldType": "num",
    "database": "floodnet",
    "databaseFieldType": "str",
    "ssl": "false",
    "sslFieldType": "bool",
    "applicationName": "",
    "applicationNameType": "str",
    "max": "20",
    "maxFieldType": "num",
    "idle": "1000",
    "idleFieldType": "num",
    "connectionTimeout": "10000",
    "connectionTimeoutFieldType": "num",
    "user": "POSTGRES_USER",
    "userFieldType": "env",
    "password": "POSTGRES_PASS",
    "passwordFieldType": "env"
  },
  {
    "id": "9f8b0ea4.a9dba",
    "type": "ui_group",
    "name": "From App",
    "tab": "89bcb8eb.d62e58",
    "order": 1,
    "disp": true,
    "width": "6",
    "collapse": false
  },
  {
    "id": "ce726dd8.7cde2",
    "type": "ui_group",
    "name": "Move To",
    "tab": "89bcb8eb.d62e58",
    "order": 4,
    "disp": true,
    "width": "6",
    "collapse": false
  },
  {
    "id": "41d23a0e.83e764",
    "type": "ui_group",
    "name": "Confirm",
    "tab": "89bcb8eb.d62e58",
    "order": 5,
    "disp": true,
    "width": "6",
    "collapse": false
  },
  {
    "id": "2e8b4d74.d00942",
    "type": "ui_group",
    "name": "Control Panel",
    "tab": "dd24a415.bfd938",
    "order": 1,
    "disp": true,
    "width": "6",
    "collapse": false
  },
  {
    "id": "89bcb8eb.d62e58",
    "type": "ui_tab",
    "name": "Change Application",
    "icon": "dashboard",
    "disabled": false,
    "hidden": false
  },
  {
    "id": "dd24a415.bfd938",
    "type": "ui_tab",
    "name": "Control Panel",
    "icon": "dashboard",
    "disabled": false,
    "hidden": false
  },
  {
    "id": "5ce94b12.5c1c44",
    "type": "switch",
    "z": "888786c5.d5aab8",
    "name": "Topic",
    "property": "topic",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "get",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "put",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "list",
        "vt": "str"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 4,
    "x": 270,
    "y": 120,
    "wires": [
      [
        "a6ca9e09.83012"
      ],
      [
        "feb761ec.4c293"
      ],
      [
        "d22ee914.d446d8"
      ],
      [
        "d22ee914.d446d8"
      ]
    ]
  },
  {
    "id": "feb761ec.4c293",
    "type": "function",
    "z": "888786c5.d5aab8",
    "name": "put",
    "func": "var queue = flow.get(\"queue\")\n\n\nif (!Array.isArray(queue)){\n    queue = [];\n}else if ( queue.length >= env.get(\"Buffer_Size\") ){\n    queue.pop(1);\n}\n\nqueue.unshift(msg.payload);\n\nflow.set(\"queue\", queue);\nmsg.payload = queue;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 550,
    "y": 100,
    "wires": [
      [
        "d22ee914.d446d8"
      ]
    ]
  },
  {
    "id": "a6ca9e09.83012",
    "type": "function",
    "z": "888786c5.d5aab8",
    "name": "get",
    "func": "var queue = flow.get(\"queue\")\nvar item;\n\nif (!Array.isArray(queue)){\n    queue = [];\n}else{\n    item = queue.pop(1);\n}\n\n\nflow.set(\"queue\", queue)\nmsg.payload = item;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 550,
    "y": 60,
    "wires": [
      [
        "d22ee914.d446d8"
      ]
    ]
  },
  {
    "id": "d22ee914.d446d8",
    "type": "change",
    "z": "888786c5.d5aab8",
    "name": "list",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "queue",
        "tot": "flow"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 750,
    "y": 140,
    "wires": [
      [
        "ad0059b4.1b2978"
      ]
    ]
  },
  {
    "id": "ad0059b4.1b2978",
    "type": "change",
    "z": "888786c5.d5aab8",
    "name": "Count",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "$count(msg.payload)\t",
        "tot": "jsonata"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 930,
    "y": 140,
    "wires": [
      []
    ]
  },
  {
    "id": "d5ace342b009a2b0",
    "type": "mqtt in",
    "z": "b8f9c9a92652ae8e",
    "name": "floodnet-live",
    "topic": "#",
    "qos": "0",
    "datatype": "json",
    "broker": "8f7859036b247ff4",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 90,
    "y": 20,
    "wires": [
      [
        "d4dd1fb1.22cae",
        "013cba75aa7ab39c",
        "aa88a6d7549e05c8"
      ]
    ]
  },
  {
    "id": "d4dd1fb1.22cae",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "TTN V3 JSON processor",
    "func": "if(msg.payload.downlink_nack !== undefined || msg.payload['uplink_message'] == undefined){\n    // Its a downlink, ignore but should probably log these at some point\n    return;\n}\n\nvar uplink_info = msg.payload['uplink_message'];\n\nif (typeof uplink_info == undefined)\n    return undefined;\n\nif (msg.payload['join_accept'])\n    return undefined;\n\nvar dev_info = msg.payload['end_device_ids'];\nvar tags = {\n            dev_id: dev_info['device_id'],\n            app_name: dev_info['application_ids']['application_id'],\n            dev_addr: dev_info['dev_addr'],\n            dev_eui: dev_info['dev_eui'],\n            network: 'ttn',\n            bw_hz: '' + uplink_info['settings']['data_rate']['lora']['bandwidth'],\n            sf: '' + uplink_info['settings']['data_rate']['lora']['spreading_factor'],\n            coding_rate: uplink_info.settings.data_rate.lora.coding_rate,\n            f_port: '' + uplink_info['f_port']\n        };\n\nvar fields = {\n            lora_freq_hz: parseInt(uplink_info['settings']['frequency']) + 'i',\n            airtime_s: parseFloat(uplink_info['consumed_airtime'].replace('s', ''))\n            \n        };\n\nif (uplink_info['f_cnt'] + 'i' != 'undefinedi'){\n    fields.f_cnt = uplink_info['f_cnt'] + 'i'\n}\n\n// Sort gateway data by RSSI strength\ngw_object = uplink_info['rx_metadata'];\ngw_object_sorted = gw_object.sort(function(a, b) {\n    return parseFloat(b.rssi) - parseFloat(a.rssi);\n});\n\nconst gw_keys = Object.keys(gw_object_sorted);\n\nvar gw_cnt = 0;\nfor (var gw_key of gw_keys) {\n    if (gw_object_sorted[gw_key].hasOwnProperty('packet_broker'))\n        continue;\n    gw_cnt += 1;\n    tags['gw_' + gw_cnt + '_id'] = gw_object_sorted[gw_key]['gateway_ids']['gateway_id'];\n    fields['gw_' + gw_cnt + '_rssi_dbm'] = gw_object_sorted[gw_key]['rssi'] + 'i';\n    fields['gw_' + gw_cnt + '_snr_db'] = gw_object_sorted[gw_key]['snr'];\n    \n}\n\nraw_payload = uplink_info['frm_payload'];\n\nif (!raw_payload){\n    msg.app_type = undefined;\n    return msg;\n}else{\n    msg.app_type = dev_info['device_id'].slice(0, 2);\n}\n\nvar binary_string = Buffer.from(raw_payload, \"base64\").toString('hex').match(/.{1,2}/g);\nvar len = binary_string.length;\nvar b = new Uint8Array(len);\nfor (var i = 0; i < len; i++) {\n    b[i] = parseInt(binary_string[i], 16);\n}\n\nvar errorFlag = b[0];\n\nif (errorFlag == 255) {\n    // Payload is Sensor cfg update\n    /*\n    CFG update uplink Format:\n    | Error Flag  |   sensor_sleep   |    sensor_agg     |   sensor_meas_delta     | sensor_reading_count   |    sensor_state   |    fw_ver       |\n    |    255 (FF) |     2 bytes      |      1 byte       |          2 bytes        |          1 byte        |        1 byte     |    6 bytes      |\n    \n    Sensor State:\n    |  Start  |   Stop  |  Reset  |\n    |   's'   |   'x'   |   'r'   |\n    \n    */\n    \n    // Duty cycle\n    var sensor_sleep = (b[2]<< 8) | b[1];\n    tags['sensor_sleep_s'] = '' + '' + sensor_sleep;\n    \n    // Sensor Mode\n    var sensor_agg = b[3];\n    tags['sensor_agg'] = '' + sensor_agg;\n    \n    // Sensor Sampling Rate\n    var sensor_meas_delta = (b[5] << 8) | b[4];\n    tags['sensor_meas_delta_ms'] = '' + sensor_meas_delta;\n    \n    // Sensor number of readings per measurement\n    var sensor_reading_count = b[6];\n    tags['sensor_reading_count'] = '' + sensor_reading_count;\n    \n    // Sensor State\n    var sensor_state = b[7].toString();\n    \n    if (sensor_state == \"115\"){\n      sensor_state = \"Sensing\";\n    } else if (sensor_state == \"120\"){\n      sensor_state = \"CFG Update\";\n    } else if (sensor_state == \"114\"){\n      sensor_state = \"Reset\";\n    }\n    tags['sensor_state'] = '' + sensor_state;\n    \n    // Firmware Version\n    let major = b[8].toString();\n    let minor = b[9].toString();\n    let patch = b[10].toString();\n    let v = \"v\";\n    let dot = \".\";\n    let fw_ver = v.concat(major,dot,minor,dot,patch);\n    \n    tags['fw_ver'] = '' + fw_ver;\n\n\n}\nmsg.app_name = dev_info['application_ids']['application_id'];\nmsg.dev_id = dev_info['device_id'];\nmsg.payload = { data:\n    [\n        fields,\n        tags,\n        b\n    ], 'app_type': msg['app_type'],\n    'ts': Date.parse(uplink_info['received_at'])\n};\n\nmsg.orig_payload = msg.payload;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 490,
    "y": 120,
    "wires": [
      [
        "c6d0a64faa67e085"
      ]
    ]
  },
  {
    "id": "4f19e58b65fd28a1",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "flood sensor decode",
    "func": "var [ fields, tags, b ] = msg.payload.data;\ntags['deployment_id'] = msg.deployment_id;\n\nvar errorFlag = b[0];\nif (errorFlag != 255) {  // Regular Payload\n    // Converting Error Flag bits\n    tags['error_flag'] = '' + errorFlag % 2;\n    \n    // battery -> mV -> V\n    fields['batt_v'] = ((b[2] << 8) | b[1]) / 1000;\n    \n    // distance\n    distance = (b[4] << 8) | b[3];\n    fields['dist_mm'] = distance;\n    \n    // depth\n    var night_median = msg.night_median;\n    if (night_median !== undefined){\n        var depth = night_median - distance;\n        if(isNaN(depth)) {\n            node.warn(`${msg.deployment_id}: ${depth} is NaN. ${night_median} - ${distance}`);\n        }\n        fields['depth_raw_mm'] = depth;\n        \n        if (depth <= 10){\n            depth = 0;\n        }\n        if(depth > night_median) {\n            depth = undefined;\n        }\n        \n        if(depth !== undefined) {\n            fields['depth_filt_mm'] = depth;\n            fields['depth_proc_mm'] = depth;\n        }\n        \n    }\n    \n    // extra fields\n    if (b.length > 5){\n        // temperature\n        fields['temp_c'] = ((b[6] & 0x80 ? 0xFFFF<<16 : 0) | b[6]<<8 | b[5]) / 100;\n        // pressure\n        fields['pres_mb'] = ((((b[10]<<24) | (b[9]<<16)) | (b[8]<<8)) | b[7]) / 100;\n        // altitude\n        fields['alt_m'] = ((b[12] << 8) | b[11]) / 100;\n        // humidity\n        fields['humid_percen'] = ((b[14] << 8) | b[13]) / 100;\n    }\n}\n\nmsg.payload = [\n    {\n        measurement: 'flood-sensor',\n        fields,\n        tags,\n        timestamp: msg.payload['ts']\n    }\n];\n    \nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 440,
    "wires": [
      [
        "c264632eaa92cc6a"
      ]
    ]
  },
  {
    "id": "9426b45005b4832d",
    "type": "switch",
    "z": "b8f9c9a92652ae8e",
    "name": "sensor type",
    "property": "app_type",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "fs",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "ts",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "rg",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "undefined",
        "vt": "jsonata"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 4,
    "x": 110,
    "y": 320,
    "wires": [
      [
        "4f19e58b65fd28a1",
        "6268df4c0a325049"
      ],
      [
        "c76d93addfcecc14"
      ],
      [
        "a4c825bdcb08158d"
      ],
      [
        "cc9083c494de6e5a"
      ]
    ]
  },
  {
    "id": "a4c825bdcb08158d",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "gw rain gauge decode",
    "func": "var [ fields, tags, b ] = msg.payload.data;\ntags['deployment_id'] = msg.deployment_id;\n\nvar errorFlag = b[0];\nif (errorFlag < 253) {  // Regular Payload    \n    fields['acc_mm'] = (b[0]|(b[1]<<8)|(b[2]<<16)|(b[3]<<32))/100;\n    fields['event_acc_mm'] = (b[4]|(b[5]<<8)|(b[6]<<16)|(b[7]<<32))/100;\n    fields['total_acc_mm'] = (b[8]|(b[9]<<8)|(b[10]<<16)|(b[11]<<32))/100;\n    fields['r_int_hr_mm'] = (b[12]|(b[13]<<8)|(b[14]<<16)|(b[15]<<32))/100;\n    let unit = String.fromCharCode(b[16]);\n    tags['acc_unit'] = '' + (unit == 'm' ? 'mm' : 'in');\n    if (b.length > 17){\n        //fields['bucket_acc_mm_min'] = parseInt(b[17], 2);\n        fields['bucket_acc_mm_min'] = (b[17]|(b[18]<<8))/1000;\n    }\n}\n// node.warn(tags);\n// node.warn(tags['deployment_id']);\n// node.warn(b);\n// node.warn(fields['bucket_acc_mm_min']);\nmsg.payload = [\n    {\n        measurement: 'gateway-rain-gauge',\n        fields,\n        tags,\n        timestamp: msg['ts']\n    }\n];    \nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 360,
    "wires": [
      [
        "bb0aa76cdb8fa1d0"
      ]
    ]
  },
  {
    "id": "cc9083c494de6e5a",
    "type": "debug",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 110,
    "y": 380,
    "wires": []
  },
  {
    "id": "6268df4c0a325049",
    "type": "switch",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "property": "payload.data[2]",
    "propertyType": "msg",
    "rules": [
      {
        "t": "null"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 330,
    "y": 300,
    "wires": [
      [
        "513fbc9cc32e5fc3"
      ]
    ]
  },
  {
    "id": "59c384dba7c30e0d",
    "type": "influxdb batch",
    "z": "b8f9c9a92652ae8e",
    "influxdb": "4b9a03aed4358412",
    "precision": "",
    "retentionPolicy": "",
    "name": "Insert live",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "floodnet",
    "bucket": "floodnet-live",
    "x": 1180,
    "y": 340,
    "wires": []
  },
  {
    "id": "513fbc9cc32e5fc3",
    "type": "debug",
    "z": "b8f9c9a92652ae8e",
    "name": "Flood sensor out",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 510,
    "y": 300,
    "wires": []
  },
  {
    "id": "c76d93addfcecc14",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "tidal sensor decode",
    "func": "var [ fields, tags, b ] = msg.payload.data;\ntags['deployment_id'] = msg.deployment_id;\n\nvar errorFlag = b[0];\nif (errorFlag < 253) {  // Regular Payload\n    // Converting Error Flag bits\n    tags['error_flag'] = '' + errorFlag % 2;\n\n    // battery -> mV -> V\n    fields['batt_v'] = ((b[2] << 8) | b[1]) / 1000;\n    \n    // distance\n    distance = (b[4] << 8) | b[3];\n    fields['dist_mm'] = distance;\n    \n    // depth\n    // TODO: use global var to store manually inserted MLLW value using NR GUI\n    // var night_median = global.get(tags.dev_id + '.night_median');\n    // if (night_median !== undefined){\n    //     var depth = -distance + night_median;\n    //     fields['depth_mm'] = depth;\n    // }\n    \n    if (b.length > 5){\n        // temperature\n        fields['temp_c'] = ((b[6] & 0x80 ? 0xFFFF<<16 : 0) | b[6]<<8 | b[5]) / 100;\n        // pressure\n        fields['pres_mb'] = ((((b[10]<<24) | (b[9]<<16)) | (b[8]<<8)) | b[7]) / 100;\n        // altitude\n        fields['alt_m'] = ((b[12] << 8) | b[11]) / 100;\n        // humidity\n        fields['humid_percen'] = ((b[14] << 8) | b[13]) / 100;\n    }\n}\n\nmsg.payload = [\n    {\n        measurement: 'tidal-sensor',\n        fields,\n        tags,\n        timestamp: msg.payload['ts']\n    }\n];\n    \nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 350,
    "y": 400,
    "wires": [
      [
        "cc73a08cd9aa98f3"
      ]
    ]
  },
  {
    "id": "01f1e933be2e7850",
    "type": "mqtt in",
    "z": "b8f9c9a92652ae8e",
    "name": "floodnet-lab",
    "topic": "#",
    "qos": "0",
    "datatype": "json",
    "broker": "69a33419a2453bea",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 90,
    "y": 80,
    "wires": [
      [
        "d4dd1fb1.22cae",
        "013cba75aa7ab39c"
      ]
    ]
  },
  {
    "id": "300f06516c1553bc",
    "type": "mqtt in",
    "z": "b8f9c9a92652ae8e",
    "name": "floodnet-test",
    "topic": "#",
    "qos": "0",
    "datatype": "json",
    "broker": "16f395ad93e105b8",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 90,
    "y": 140,
    "wires": [
      [
        "d4dd1fb1.22cae",
        "013cba75aa7ab39c"
      ]
    ]
  },
  {
    "id": "3bfa5616beb0c833",
    "type": "influxdb batch",
    "z": "b8f9c9a92652ae8e",
    "influxdb": "4b9a03aed4358412",
    "precision": "",
    "retentionPolicy": "",
    "name": "Insert lab",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "floodnet",
    "bucket": "floodnet-lab",
    "x": 1180,
    "y": 380,
    "wires": []
  },
  {
    "id": "a4283b483cc622e7",
    "type": "influxdb batch",
    "z": "b8f9c9a92652ae8e",
    "influxdb": "4b9a03aed4358412",
    "precision": "",
    "retentionPolicy": "",
    "name": "Insert test",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "floodnet",
    "bucket": "floodnet-test",
    "x": 1180,
    "y": 420,
    "wires": []
  },
  {
    "id": "bb0aa76cdb8fa1d0",
    "type": "switch",
    "z": "b8f9c9a92652ae8e",
    "name": "app",
    "property": "app_name",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "floodnet-live",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "floodnet-lab",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "floodnet-test",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 3,
    "x": 910,
    "y": 360,
    "wires": [
      [
        "59c384dba7c30e0d",
        "d1f0313a1241e95a"
      ],
      [
        "3bfa5616beb0c833"
      ],
      [
        "a4283b483cc622e7"
      ]
    ]
  },
  {
    "id": "c6d0a64faa67e085",
    "type": "file in",
    "z": "b8f9c9a92652ae8e",
    "name": "Read dep_id file",
    "filename": "/data/sensor_meta/deploy_id_map.txt",
    "filenameType": "str",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "none",
    "allProps": false,
    "x": 700,
    "y": 120,
    "wires": [
      [
        "7daebca69f042623"
      ]
    ]
  },
  {
    "id": "56112e38ee71332a",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "deploy_id & night_median",
    "func": "var dev_list = [];\nvar dep_list = [];\nvar night_median_list = [];\nmsg.payload.forEach((element) => {\n  dev_list.push(element.col1);\n  dep_list.push(element.col2);\n  night_median_list.push(element.col3);\n});\n\nvar dev_idx = dev_list.lastIndexOf(msg.dev_id);\n\nif(dev_idx != -1){\n    msg.deployment_id = dep_list[dev_idx];\n    msg.night_median = night_median_list[dev_idx];\n}else{\n    msg.deployment_id = undefined;\n}\n\nmsg.payload = msg.orig_payload;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1030,
    "y": 120,
    "wires": [
      [
        "9426b45005b4832d"
      ]
    ]
  },
  {
    "id": "7daebca69f042623",
    "type": "csv",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "sep": ",",
    "hdrin": "",
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 850,
    "y": 120,
    "wires": [
      [
        "56112e38ee71332a"
      ]
    ]
  },
  {
    "id": "d1f0313a1241e95a",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "Fieldkit POST",
    "func": "msg.headers = {};\nmsg.method = \"POST\";\nmsg.url = 'https://api.fieldkit.org/ttn/webhook?token=33af8a9e936d2ec4c217de125ccfc4b9';\nmsg.headers[\"Content-Type\"]=\"application/json\";\n\nif (msg.payload[0].measurement != \"flood-sensor\"){\n    return undefined;\n}\n\nmsg.payload[0].fields.dist_mm = parseInt(msg.payload[0].fields.dist_mm);\nmsg.payload[0].fields.lora_freq_hz = parseInt(msg.payload[0].fields.lora_freq_hz);\nmsg.payload[0].fields.f_cnt = parseInt(msg.payload[0].fields.f_cnt);\nmsg.payload[0].fields.depth_mm = parseInt(msg.payload[0].fields.depth_mm);\nmsg.payload[0].fields.depth_raw_mm = parseInt(msg.payload[0].fields.depth_raw_mm);\nmsg.payload[0].fields.depth_filt_mm = parseInt(msg.payload[0].fields.depth_filt_mm);\nmsg.payload[0].fields.depth_proc_mm = parseInt(msg.payload[0].fields.depth_proc_mm);\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1200,
    "y": 300,
    "wires": [
      [
        "2022baa0e88d34cf"
      ]
    ]
  },
  {
    "id": "2022baa0e88d34cf",
    "type": "http request",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "method": "use",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 1370,
    "y": 300,
    "wires": [
      [
        "f56074e0a37d1706"
      ]
    ]
  },
  {
    "id": "f56074e0a37d1706",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "HTTP Status",
    "func": "if(msg.statusCode >= 200 && msg.statusCode < 300){\n    msg.response_fail = false;\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1530,
    "y": 300,
    "wires": [
      []
    ]
  },
  {
    "id": "5207523ee01126b7",
    "type": "mqtt in",
    "z": "b8f9c9a92652ae8e",
    "name": "nyu-production",
    "topic": "#",
    "qos": "2",
    "datatype": "json",
    "broker": "232424bf32c1529c",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 100,
    "y": 200,
    "wires": [
      [
        "2c66b65b4104fc3f",
        "013cba75aa7ab39c"
      ]
    ]
  },
  {
    "id": "2c66b65b4104fc3f",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "fn -> fs",
    "func": "function hexify(dev_id){\n    let dev_eui = \"\";\n    for (let n=0, l=dev_id.length; n<l; n++) \n         {\n    \t\tvar hex = Number(dev_id.charCodeAt(n)).toString(16);\n    \t\tdev_eui += hex;\n    \t }\n    return dev_eui;\n}\n\nlet mappings = [\n    [\"rg-00002\",\"rg-00002\"],\n    [\"fn-00004\",\"fs-00003\"],\n    [\"fn-00005\",\"fs-00004\"],\n    [\"fn-00012\",\"fs-00009\"],\n    [\"fs-00014\",\"fs-00011\"],\n    // [\"fs-00015\",\"fs-00012\"], // can be removed\n    [\"fs-00016\",\"fs-00013\"],\n    // [\"fs-00017\",\"fs-00014\"], // can be removed\n    [\"fs-00018\",\"fs-00015\"],\n    [\"fs-00019\",\"fs-00016\"],\n    [\"fs-00020\",\"fs-00017\"],\n    [\"fs-00022\",\"fs-00018\"],\n    // [\"fs-00023\",\"fs-00019\"], // can be removed\n    // [\"fs-00024\",\"fs-00020\"] // can be removed\n];\n\nlet old_dev_id = msg.payload.end_device_ids.device_id;\n\nfor (let n=0, l=mappings.length; n<l; n++) {\n    if(mappings[n][0] == old_dev_id){\n        new_dev_id = mappings[n][1];\n        msg.payload.end_device_ids.device_id = new_dev_id;\n        msg.payload.end_device_ids.dev_eui = hexify(new_dev_id);\n        msg.payload.end_device_ids.application_ids.application_id = 'floodnet-live';\n        break;\n    }\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 280,
    "y": 200,
    "wires": [
      [
        "d4dd1fb1.22cae"
      ]
    ]
  },
  {
    "id": "013cba75aa7ab39c",
    "type": "switch",
    "z": "b8f9c9a92652ae8e",
    "name": "downlink_nack",
    "property": "msg.payload.downlink_nack",
    "propertyType": "msg",
    "rules": [
      {
        "t": "neq",
        "v": "undefined",
        "vt": "jsonata"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 460,
    "y": 80,
    "wires": [
      [
        "4e12b12b872ef0fe"
      ]
    ]
  },
  {
    "id": "4e12b12b872ef0fe",
    "type": "debug",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 690,
    "y": 80,
    "wires": []
  },
  {
    "id": "f09c93e7822d13ea",
    "type": "comment",
    "z": "b8f9c9a92652ae8e",
    "name": "TODO: add filter function using Jatins model - need 3 points",
    "info": "",
    "x": 1480,
    "y": 60,
    "wires": []
  },
  {
    "id": "8a4efb88ee9b9f4c",
    "type": "comment",
    "z": "b8f9c9a92652ae8e",
    "name": "TODO: add nearest/best tidal guage ID to each coastal payload",
    "info": "",
    "x": 1490,
    "y": 100,
    "wires": []
  },
  {
    "id": "62a33a2d546d7c2c",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "grad filter",
    "func": "let buffer_size = 2;\nlet max_change_mmps = 2.11667;\n\n// get global variable name\nlet var_name = msg.dev_id + '_depth_grad_buffer';\n\n// read msg\nconst {fields: {depth_filt_mm}, timestamp} = msg.payload[0];\nlet depth_val = parseInt(depth_filt_mm);\nlet depth_time = parseFloat(timestamp);\nif(isNaN(depth_val) || isNaN(depth_time)) {\n    return msg;\n}\n\n// update time buffer\nif (flow.get(var_name) == undefined){ \n    flow.set(var_name, []);\n}\nvar depths = flow.get(var_name);\nwhile (depths.length >= buffer_size){\n    depths.shift(); \n}\ndepths.push([depth_val, depth_time]);\nif(depths.length < buffer_size) { \n    return msg; \n}\n\n// get the rate of change of depth\nlet [[depth1, t1], [depth2, t2]] = depths;\nlet dd = depth2 - depth1;\nlet dt = (t2 - t1) / 1000.0;\nddepth_dt = dd / Math.max(dt, 0.001);\nif(ddepth_dt > max_change_mmps) {\n    depths[1][0] = depth1;\n    node.warn(`gradient filter ${dd} in ${dt}s \u2206mm/s=${ddepth_dt}`)\n    msg.payload[0].fields.depth_proc_mm = depth1+\"i\";\n}\nif(isNaN(parseFloat(msg.payload[0].fields.depth_proc_mm))) {\n    node.warn(msg.payload[0].fields.depth_proc_mm);   \n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 240,
    "y": 1020,
    "wires": [
      []
    ]
  },
  {
    "id": "cc73a08cd9aa98f3",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "add i to ints",
    "func": "var fields = msg.payload[0].fields;\n\n\nconst fixInt = (k) => {\n    const v = fields[k];\n    const i = parseInt(v);\n    if(!isNaN(i)) {\n        fields[k] = i + 'i';  \n    }\n}\n\nif(fields) {\n    fixInt('dist_mm');\n    fixInt('depth_raw_mm');\n    fixInt('depth_filt_mm');\n    fixInt('depth_proc_mm');\n    fixInt('depth_proc_dist_mm');\n}\n\n\n\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 730,
    "y": 400,
    "wires": [
      [
        "bb0aa76cdb8fa1d0"
      ]
    ]
  },
  {
    "id": "af85e407ac5a7ba1",
    "type": "debug",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload[0].fields.depth_proc_mm",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1270,
    "y": 260,
    "wires": []
  },
  {
    "id": "b1eb29fb9ed0901b",
    "type": "http in",
    "z": "b8f9c9a92652ae8e",
    "name": "SENET endpoint",
    "url": "/senet_device",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 720,
    "y": 1280,
    "wires": [
      [
        "6223683d9da742fe"
      ]
    ]
  },
  {
    "id": "6223683d9da742fe",
    "type": "debug",
    "z": "b8f9c9a92652ae8e",
    "name": "debug 2",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 880,
    "y": 1280,
    "wires": []
  },
  {
    "id": "c264632eaa92cc6a",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "Filters \ud83c\udf08",
    "func": "// add as different field name\n// msg.payload[0].fields.depth_proc2_mm=msg.payload[0].fields.depth_proc_mm;\nconst devid = msg.dev_id;\nconst fbank = flow.get('getFilter')(devid)\nif(msg.historicalData && msg.historicalDataIndex === 0) {\n    fbank.clear();\n}\n\n// Filters applied!\nconst msgs = fbank.filter(msg)\n\nfor(let m of msgs) {\n    const dist2 = m.payload[0].fields.depth_proc_mm;\n    const dist = m.payload[0].fields.depth_filt_mm;\n    m.payload[0].fields.depth_proc_dist_mm=((dist||0) - (dist2||0))\n}\n\nreturn [ msgs ];",
    "outputs": 1,
    "noerr": 0,
    "initialize": "\n\n\nclass Filter {\n    constructor({ name, depthField='depth_proc_mm', maxMins=6, nHistory=0, isRaining=null }={}) {\n        this.name = name;\n        this.state = {};\n\n        this.maxMs = maxMins*60*1000;\n        this.depthField = depthField;\n        this._isRaining = isRaining;\n        this.state.buffer = new Deque(nHistory+1);\n    }\n    clear() {\n        this.state.buffer.length = 0;\n    }\n    isRaining(t) {\n        return this._isRaining ? this._isRaining(t) : null;\n    }\n    isInvalid(msg, t) {\n        // check if the time difference between points is very large\n        // if they are, we're less confident about the filter rules\n        let [m1, d1, t1] = this.state.buffer[this.state.buffer.length-2];\n        let invalid = this.maxMs && (t - t1) > this.maxMs;\n        if(invalid) {\n            // if it's not raining we can afford to be a bit more \n            // lenient with the filters.\n            const rain = this.isRaining(t);\n            invalid = invalid && rain; // only invalid if raining too\n            this.log(\n                rain ?\n                `blip invalid because of time difference ${(t - t1)/1000/60}min > ${this.maxMs/1000/60}min and it's raining` :\n                `blip large time difference ${(t - t1)/1000/60}min > ${this.maxMs/1000/60}min but it is not raining`)\n            this.setReason(msg, rain ? `?${this.name}:cancelled-rain-time-diff` : `?${this.name}:no-rain-time-diff`)\n        }\n        return invalid;\n    }\n\n    \n    log(...args) { \n        node.warn(...args) \n    }\n    unpack(msg) {\n        const {fields, timestamp} = msg.payload[0];\n        let depth = fields[this.depthField];\n        depth = depth == null ? 0 : parseInt(depth);\n        // if(isNaN(depth)) {\n        //     this.log(`${this.name}: bad depth value ${fields[this.depthField]}`);\n        //     depth = 0;\n        // }\n        return [depth, parseFloat(timestamp)];\n    }\n    override(msg, depth, reason=null) {\n        msg.payload[0].fields[this.depthField] = depth;\n        reason && this.setReason(msg, reason);\n        return msg;\n    }\n    setReason(msg, reason) {\n        let prevReason = msg.payload[0].fields.depth_filt_stages_applied || '';\n        msg.payload[0].fields.depth_filt_stages_applied = prevReason + '|' + reason;\n        return msg;\n    }\n}\n\n\nclass RangeFilter extends Filter {\n    constructor({ height=null, noiseFloor=10, name='range' }={}) {\n        super({ name });\n        this.height = height;\n        this.noiseFloor = noiseFloor;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        const night_median = msg.night_median;\n        // values below this are likely just noise\n        if(depth > 0 && depth < this.noiseFloor) this.override(msg, 0, 'range:noise-floor');\n        // values above this are not possible\n        if(this.height && depth > this.height) this.override(msg, null, 'range:max-height');\n        // values above this are not possible\n        if(night_median && depth > night_median) this.override(msg, null, 'range:night-median');\n        return [msg];\n    }\n}\n\nclass GradFilter extends Filter {\n    constructor({ inchmin=10, spotty_coverage_height_ratio=0.05, name='gradient' }={}) {\n        super({ name, nHistory: 1 });\n        this.min_mmps = inchmin * 25.4 / 60 / 1000;\n        this.spotty_coverage_height_ratio = spotty_coverage_height_ratio\n    }\n    clear() { \n        super.clear();\n        this.state.filtering = false;\n        this.state.true_last_depth = null;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        this.state.buffer.push([msg, depth, t]);\n        if(this.state.buffer.length == 1) return [msg];\n\n        // get the rate of change from the last point\n        const [m1, d1, t1] = this.state.buffer[0];\n        const dddt = (depth-d1) / Math.max(100, t - t1);\n        // check that the change in depth isn't too fast/improbable\n        if (\n            dddt > this.min_mmps ||\n            this.filtering && \n            this.state.true_last_depth && \n            Math.abs(depth - this.state.true_last_depth) / this.state.true_last_depth \n                < this.spotty_coverage_height_ratio\n        ) {\n            this.log(`gradient filtered ${d1} to ${depth}mm \u2206d/\u2206t=${dddt}mm/s`);\n            this.override(msg, d1, 'gradient');\n            this.state.buffer[this.state.buffer.length - 1][1] = d1;\n        }\n        else {\n            this.state.filtering = false;\n        }\n        this.state.true_last_depth = depth;\n        return [msg];\n    }\n}\n\nclass BlipFilter extends Filter {\n    constructor({ maxMins=6, blipMinDist=2, blipRatio=0.1, downwardBlips=false, isRaining=null, name='blip' }) {\n        super({ name, maxMins, isRaining, nHistory: 2 });\n        this.blipMinDist = blipMinDist;\n        this.blipRatio = blipRatio;\n        this.downwardBlips = downwardBlips;\n        this.clear();\n    }\n    clear() { \n        super.clear();\n        this.state.holding = false;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        this.state.buffer.push([msg, depth, t]);\n        if(this.state.buffer.length == 1) return [msg];\n\n        if(this.state.holding) {\n            let [[m1,d1,t1], [m2,d2,t2], [m3,d3,t3]] = this.state.buffer;\n            // If the blip jump is greater than some threshold and then it goes\n            // back down to close to the same value, set it as the average of the \n            // first and third values.\n            const baseDist = Math.abs(d1 - d3);\n            let blipDist = d2 - d1;\n            blipDist = this.downwardBlips ? Math.abs(blipDist) : blipDist;\n            if (\n                (blipDist > this.blipMinDist) && \n                (baseDist / blipDist < this.blipRatio) && \n                !this.isInvalid(msg, t)\n            ) {\n                this.log(`blip filtered ${[d1, d2, d3]}`);\n                this.override(m2, (d1+d3)/2, this.name);\n            }\n            // blips are only held for one value\n            this.state.holding = false;\n            return [m2, msg];\n        }\n\n        // check if it jumps up above the blip threshold\n        let dm1 = this.state.buffer[this.state.buffer.length-2][1];\n        if(depth - dm1 > this.blipMinDist) {\n            this.state.holding = true;\n            this.log(`blip hold ${dm1} ${depth}`);\n            return [];\n        }\n\n        return [msg];\n    }\n}\n\nclass BoxFilter extends Filter {\n    constructor({ boxRatio=0.05, maxMins=6, isRaining=null, name='box' }) {\n        super({ name, maxMins, isRaining, nHistory: 2 });\n        this.boxRatio = boxRatio;\n        this.state.initialBox = null;\n        this.state.boxStart = null;\n        this.clear();\n    }\n    clear() { \n        super.clear();\n        this.boxDiff = 0;\n        this.state.holding = false;\n        this.state.filtering = false;\n        this.state.initialBox = null;\n        this.state.boxStart = null;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        this.state.buffer.push([msg, depth, t])\n        if(this.state.buffer.length == 1) return [msg];\n\n        let [m2, d2, t2] = this.state.buffer[this.state.buffer.length-2];\n        if(this.state.filtering) {\n            // get the change between the last point\n            const dd = depth-d2;\n            // add it to the total box delta\n            this.state.boxDiff += dd;\n            // the the box conditions are met, squash it\n            if(\n                Math.abs(dd / this.state.boxJump) < this.boxRatio && \n                Math.abs(this.state.boxDiff / this.state.boxJump) < this.boxRatio  && \n                !this.isInvalid(t)\n            ) {\n                // hulk squash\n                this.log(`box filter ${this.state.initialBox} ... ${[d2, depth]} ${Math.abs(this.state.boxDiff)} / ${this.state.boxJump} > ${this.boxRatio}`);\n                if(this.holding) {\n                    this.override(m2, 0, this.name);\n                }\n                this.override(msg, 0, this.name);\n            } else {\n                // otherwise stop filtering\n                this.log(`box hold released ${this.state.initialBox} ... ${[d2, depth]} - ${(t-this.state.boxStart)/1000/60}mins`);\n                this.state.filtering = false;\n            }\n        } else {\n            // check if box conditions are met\n            if(d2 === 0 && depth > 0) {\n                this.log(`box hold ${[d2,  depth]}`);\n                this.state.boxDiff = 0;\n                this.state.holding = true;\n                this.state.filtering = true;\n                this.state.initialBox = [d2,  depth];\n                this.state.boxStart = t;\n                this.state.boxJump = depth - d2;\n                return [];\n            }\n        }\n\n        // if we are holding a value, make sure to send it\n        if(this.state.holding) {\n            this.state.holding = false;\n            return [m2, msg];\n        }\n\n        return [msg];\n    }\n}\n\n\nclass FilterBank {\n    constructor(filters) {\n        this.filters = filters;\n    }\n    filter(...msgs) {\n        return this.filters.reduce((msgs, f) => (\n            msgs.reduce((outputted, msg) => [...outputted, ...f.filter(msg)], [])\n        ), msgs);\n    }\n    clear() {\n        for(let f of this.filters) f.clear();\n    }\n}\n\n\nclass Deque extends Array {\n    constructor(maxsize) {\n        super();\n        this.maxsize = maxsize;\n    }\n    push(x) {\n      super.push(x);\n      while(this.length > this.maxsize) {\n        this.shift();\n      }\n    }\n}\n\nclass RainQueue extends Array {\n    constructor(maxage=60*60) {\n        super();\n        this.maxage = maxage;\n    }\n    push(rained, t) {\n        const now = Date.now()\n        \n        // append sorted\n        if(!this.length || t > this[this.length-1][1]) {\n            super.push([rained, t]);\n        }\n        else {\n            let i=this.length-1;\n            for(;t > this[i][1] && i>0;i--) { }\n            this.splice(i, 0, [rained, t]);\n        }\n        // trim off old samples\n        while(this.length && now - this[0][1] > this.maxage) {\n            this.shift();\n        }\n    }\n    anyRain() { return this.some(r => r[0]) }\n}\n\nconst buildFBank = (opts={}) => {\n    const isRaining = (t) => {\n        const rain = global.get('rainQueue');\n        if(!rain || t < rain[0][1]) return false;\n        return rain && rain.anyRain();\n    }\n    return new FilterBank([\n        new RangeFilter({ ...opts }),\n        new GradFilter({ ...opts }),\n        new BlipFilter({ isRaining, ...opts }),\n        new BoxFilter({ isRaining, ...opts }),\n        new BlipFilter({ isRaining, ...opts}),\n    ]);\n}\n\nconst oldFbanks = flow.get('filterBanks') || {};\nconst fbanks = {};\nfor(let k in oldFbanks) {\n    fbanks[k] = buildFBank();\n    for(let i in fbanks[k].filters) {\n        const f=fbanks[k].filters[i];\n        const fOld=oldFbanks[k].filters[i];\n        f.state = {...f.state, ...fOld.state};\n    }\n}\nflow.set('filterBanks', fbanks);\n\nflow.set('getFilter', (devid, opts={}) => {\n    if(!fbanks[devid]) fbanks[devid] = buildFBank(opts);\n    return fbanks[devid];\n});",
    "finalize": "",
    "libs": [],
    "x": 540,
    "y": 440,
    "wires": [
      [
        "971e4a5b2cc2ba4d"
      ]
    ]
  },
  {
    "id": "556b969c666144ec",
    "type": "debug",
    "z": "b8f9c9a92652ae8e",
    "name": "show filtered",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "dev_id  & \" \" & \tpayload[0].fields.depth_proc_mm & \" \" & \tpayload[0].fields.depth_proc2_mm & \" \" & \tpayload[0].fields.filter_reason",
    "targetType": "jsonata",
    "statusVal": "",
    "statusType": "auto",
    "x": 1190,
    "y": 1080,
    "wires": []
  },
  {
    "id": "24153e287f3f8bdd",
    "type": "switch",
    "z": "b8f9c9a92652ae8e",
    "name": "filter reason",
    "property": "payload[0].fields.filter_reason",
    "propertyType": "msg",
    "rules": [
      {
        "t": "nempty"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 1010,
    "y": 1080,
    "wires": [
      [
        "556b969c666144ec"
      ]
    ]
  },
  {
    "id": "b39284fbc6de11b2",
    "type": "influxdb in",
    "z": "b8f9c9a92652ae8e",
    "influxdb": "4b9a03aed4358412",
    "name": "",
    "query": "",
    "rawOutput": false,
    "precision": "",
    "retentionPolicy": "",
    "org": "floodnet",
    "x": 170,
    "y": 1260,
    "wires": [
      [
        "bebb13a0df3fa53f",
        "d638763947b3a8a6"
      ]
    ]
  },
  {
    "id": "127e2829c288b414",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "query",
    "func": "const start = msg.payload.start||\"-1h\";\nconst stop = msg.payload.stop||\"-1s\";\nconst depid = msg.payload.depid;//||\"easily_dear_mouse\";\nmsg.query = `\nfrom(bucket: \"floodnet-live\")\n  |> range(start: ${start}, stop: ${stop})\n  |> filter(fn: (r) => r[\"_measurement\"] == \"flood-sensor\")\n  |> filter(fn: (r) => r[\"_field\"] == \"depth_filt_mm\")\n  ${depid?`|> filter(fn: (r) => r[\"deployment_id\"] == \"${depid}\")\n  `:''}|> group(columns: [\"_field\", \"deployment_id\"])\n`\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 110,
    "y": 1220,
    "wires": [
      [
        "b39284fbc6de11b2"
      ]
    ]
  },
  {
    "id": "66392d7396991cc1",
    "type": "inject",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"start\": \"-14d\"}",
    "payloadType": "json",
    "x": 140,
    "y": 1180,
    "wires": [
      [
        "127e2829c288b414"
      ]
    ]
  },
  {
    "id": "bebb13a0df3fa53f",
    "type": "debug",
    "z": "b8f9c9a92652ae8e",
    "name": "all",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 270,
    "y": 1220,
    "wires": []
  },
  {
    "id": "d638763947b3a8a6",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "row by row",
    "func": "\nreturn [\n    msg.payload.map((d, i) => ({\n        deployment_id: d.deployment_id,\n        dev_id: d.dev_id,\n        payload: [{\n            measurement: 'flood-sensor',\n            timestamp: Date.parse(d._time),\n            fields: {depth_proc_mm: d._value},\n            tags: {\n                deployment_id: d.deployment_id,\n                dev_id: d.dev_id,\n            }\n        }],\n        historicalData: true,\n        historicalDataIndex: i\n    })).sort((a, b) => a.payload[0].timestamp - b.payload[0].timestamp)\n];",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 250,
    "y": 1300,
    "wires": [
      [
        "89fdd141a3fc13c8"
      ]
    ]
  },
  {
    "id": "37b961c8bdfd3251",
    "type": "comment",
    "z": "b8f9c9a92652ae8e",
    "name": "priming the filters",
    "info": "",
    "x": 120,
    "y": 1060,
    "wires": []
  },
  {
    "id": "79382d6929fd1351",
    "type": "switch",
    "z": "b8f9c9a92652ae8e",
    "name": "filter historical query",
    "property": "historicalData",
    "propertyType": "msg",
    "rules": [
      {
        "t": "true"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 800,
    "y": 1080,
    "wires": [
      [],
      [
        "24153e287f3f8bdd"
      ]
    ]
  },
  {
    "id": "e7b5a0015367fdfe",
    "type": "inject",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"start\": \"-1h\"}",
    "payloadType": "json",
    "x": 130,
    "y": 1100,
    "wires": [
      [
        "127e2829c288b414"
      ]
    ]
  },
  {
    "id": "0b71a61fdae6eeea",
    "type": "inject",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"start\": \"-3d\"}",
    "payloadType": "json",
    "x": 140,
    "y": 1140,
    "wires": [
      [
        "127e2829c288b414"
      ]
    ]
  },
  {
    "id": "44d8b8ed6820a65c",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "function 1",
    "func": "node.warn(global.get('rainQueue'));\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 380,
    "y": 1360,
    "wires": [
      []
    ]
  },
  {
    "id": "28d4c4a14b86b2fd",
    "type": "inject",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 240,
    "y": 1360,
    "wires": [
      [
        "44d8b8ed6820a65c"
      ]
    ]
  },
  {
    "id": "5845649ae407718c",
    "type": "inject",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"start\": \"-10d\", \"stop\": \"-0d\"}",
    "payloadType": "json",
    "x": 110,
    "y": 1420,
    "wires": [
      [
        "127e2829c288b414"
      ]
    ]
  },
  {
    "id": "9d7816724d233124",
    "type": "delay",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "pauseType": "rate",
    "timeout": "10",
    "timeoutUnits": "milliseconds",
    "rate": "2000",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "allowrate": false,
    "outputs": 1,
    "x": 680,
    "y": 1200,
    "wires": [
      [
        "353d0fcf175a07ca"
      ]
    ]
  },
  {
    "id": "8cc2a0cb9985afba",
    "type": "debug",
    "z": "b8f9c9a92652ae8e",
    "name": "debug 5",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 880,
    "y": 1160,
    "wires": []
  },
  {
    "id": "353d0fcf175a07ca",
    "type": "join",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "mode": "custom",
    "build": "array",
    "property": "payload",
    "propertyType": "msg",
    "key": "topic",
    "joiner": "\\n",
    "joinerType": "str",
    "accumulate": false,
    "timeout": "3",
    "count": "120",
    "reduceRight": false,
    "reduceExp": "$append(array1, array2)\t",
    "reduceInit": "",
    "reduceInitType": "num",
    "reduceFixup": "",
    "x": 670,
    "y": 1040,
    "wires": [
      [
        "e59009b6723ab6d2"
      ]
    ]
  },
  {
    "id": "e59009b6723ab6d2",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "function 2",
    "func": "msg.payload = msg.payload.map(x => x[0])\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 800,
    "y": 1040,
    "wires": [
      []
    ]
  },
  {
    "id": "b3135e9305f91bf3",
    "type": "inject",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"start\":\"2022-09-13T14:00:00Z\",\"stop\":\"2022-09-13T18:06:00Z\",\"depid\":\"daily_happy_satyr\"}",
    "payloadType": "json",
    "x": 110,
    "y": 1460,
    "wires": [
      [
        "127e2829c288b414"
      ]
    ]
  },
  {
    "id": "c7933d585e13d7ff",
    "type": "inject",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 620,
    "y": 1440,
    "wires": [
      [
        "8d051e305b8be6ce"
      ]
    ]
  },
  {
    "id": "8d051e305b8be6ce",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "function 3",
    "func": "\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 820,
    "y": 1440,
    "wires": [
      []
    ]
  },
  {
    "id": "737878c160e53566",
    "type": "debug",
    "z": "b8f9c9a92652ae8e",
    "name": "debug 7",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 1120,
    "y": 500,
    "wires": []
  },
  {
    "id": "992f30b35502df9c",
    "type": "debug",
    "z": "b8f9c9a92652ae8e",
    "name": "debug 8",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 1060,
    "y": 20,
    "wires": []
  },
  {
    "id": "d0c60036e4c8309e",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "function 4",
    "func": "node.warn(global.get('rainQueue'))\nnode.warn(global.get('rainQueue').anyRain())\nconsole.log(global.get('rainQueue'))\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 680,
    "y": 620,
    "wires": [
      []
    ]
  },
  {
    "id": "775b3f2d79744df3",
    "type": "inject",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 500,
    "y": 620,
    "wires": [
      [
        "d0c60036e4c8309e"
      ]
    ]
  },
  {
    "id": "0e59769571233982",
    "type": "debug",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 730,
    "y": 320,
    "wires": []
  },
  {
    "id": "25abb57de9d96cb7",
    "type": "debug",
    "z": "b8f9c9a92652ae8e",
    "name": "debug 10",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 520,
    "y": 200,
    "wires": []
  },
  {
    "id": "5755ade852a31e5b",
    "type": "postgresql",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "query": "SELECT \n    pg_size_pretty(before_compression_total_bytes) as \"before compression\",\n    pg_size_pretty(after_compression_total_bytes) as \"after compression\"\nFROM hypertable_compression_stats('measurements');",
    "postgreSQLConfig": "ec8702db3a5c2dc7",
    "split": false,
    "rowsPerMsg": 1,
    "outputs": 1,
    "x": 1170,
    "y": 640,
    "wires": [
      [
        "22a9ff053f9a3bcb"
      ]
    ]
  },
  {
    "id": "c666fedc83d88d85",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "function 5",
    "func": "\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1020,
    "y": 600,
    "wires": [
      []
    ]
  },
  {
    "id": "423a463a9e03e064",
    "type": "inject",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 980,
    "y": 660,
    "wires": [
      [
        "5755ade852a31e5b"
      ]
    ]
  },
  {
    "id": "22a9ff053f9a3bcb",
    "type": "debug",
    "z": "b8f9c9a92652ae8e",
    "name": "debug 11",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1360,
    "y": 640,
    "wires": []
  },
  {
    "id": "21fccc66ca143004",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "navy_yard_gw_uplink",
    "func": "var dev_info = msg.payload['end_device_ids'];\nvar uplink_info = msg.payload['uplink_message'];\n\nvar tags = {\n            dev_id: dev_info['device_id'],\n            app_name: dev_info['application_ids']['application_id'],\n            dev_addr: dev_info['dev_addr'],\n            dev_eui: dev_info['dev_eui'],\n            network: 'ttn',\n            bw_hz: '' + uplink_info['settings']['data_rate']['lora']['bandwidth'],\n            sf: '' + uplink_info['settings']['data_rate']['lora']['spreading_factor'],\n            coding_rate: uplink_info.settings.data_rate.lora.coding_rate,\n            f_port: '' + uplink_info['f_port']\n        };\n\nvar fields = {\n            lora_freq_hz: parseInt(uplink_info['settings']['frequency']) + 'i',\n            airtime_s: parseFloat(uplink_info['consumed_airtime'].replace('s', ''))\n            \n        };\n\nraw_payload = uplink_info['frm_payload'];\n\nif (!raw_payload){\n    return undefined;\n}\n\nvar binary_string = Buffer.from(raw_payload, \"base64\").toString('hex').match(/.{1,2}/g);\nvar len = binary_string.length;\nvar b = new Uint8Array(len);\nfor (var i = 0; i < len; i++) {\n    b[i] = parseInt(binary_string[i], 16);\n}\n\nfields['batt_v'] = ((b[1] << 8) | b[0]) / 1000.0;\nfields['current_ma'] = ((b[3] << 8) | b[2])  + 'i';\n   \nmsg.payload = [\n    {\n        measurement: 'gateway-solar',\n        fields,\n        tags,\n        timestamp: Date.parse(uplink_info['received_at'])\n    }\n];    \nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 760,
    "y": 20,
    "wires": [
      [
        "59c384dba7c30e0d"
      ]
    ]
  },
  {
    "id": "aa88a6d7549e05c8",
    "type": "switch",
    "z": "b8f9c9a92652ae8e",
    "name": "pass if navy yard sensor",
    "property": "payload.end_device_ids.device_id",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "eui-03a26db322380301",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 490,
    "y": 20,
    "wires": [
      [
        "21fccc66ca143004"
      ]
    ]
  },
  {
    "id": "ce94eb6ecbb52ef1",
    "type": "debug",
    "z": "b8f9c9a92652ae8e",
    "name": "debug 13",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 940,
    "y": 520,
    "wires": []
  },
  {
    "id": "09c307698a45ba47",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "influx2postgres",
    "func": "\nreturn {\n    payload: msg.payload.map(context.get('translateQuery')),\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "// sql query to insert\nconst sqlInsertObject = ({ table, schema, data }) => {\n    if(!data || !table) return;\n    const columns = Object.keys(data.reduce((d, o) => ({...o, ...d}), {}));\n    const values = data.map(d => `(${columns.map(c => N(d?.[c])).join(', ')})`).join(', ');\n    return (\n        `INSERT INTO ${schema || 'public'}.${table} (${columns}) VALUES ${values};`\n    )\n}\n\n// data type conversions - int, float, nullable\nconst I = x => x !== undefined ? parseInt(x) : null;\nconst F = x => x !== undefined ? parseFloat(x) : null;\nconst N = x => x !== undefined ? x : null;\n\nconst translateQuery = ({ \n    fields, \n    tags: { \n        dev_id,\n        deployment_id,\n        app_name,\n        ...tags \n    }, \n    timestamp, measurement \n}) => {\n\n    const inserts = [\n        {\n            table: 'lora_transmissions',\n            data: [{\n                time: timestamp,\n                deployment_id: deployment_id,\n                dev_id: dev_id,\n                airtime_ms: I(Math.round(fields.airtime_s * 1000)),\n                f_cnt: I(fields.f_cnt),\n                f_port: I(fields.f_port),\n                bw_hz: I(fields.bw_hz),\n                lora_freq_hz: I(fields.lora_freq_hz),\n                gw_rssi_dbm: I(fields.gw_1_rssi_dbm),\n                gw_snr_db: F(fields.gw_1_snr_db),\n                gw_id: fields.gw_1_id,\n                sf: fields.sf,\n                coding_rate: fields.coding_rate,\n                data_rate: fields.data_rate,\n                network: fields.network,\n            }]\n        },\n\n        {\n            table: 'lora_gateway_signals',\n            data: Array(10).fill(1).map((_, i) => (tags[`gw_${i}_id`] && {\n                time: timestamp,\n                gw_id: tags[`gw_${i}_id`],\n                gw_snr_db: F(fields[`gw_${i}_snr_db`]),\n                gw_rssi_dbm: I(fields[`gw_${i}_rssi_dbm`]),\n            })).filter(x=>x?.gw_id)\n        },\n\n        {\n            table: 'depth_data',\n            data: measurement == 'flood-sensor' ? [{\n                time: timestamp,\n                deployment_id: deployment_id,\n                dev_id: dev_id,\n                dist_mm: I(fields.dist_mm),\n                depth_raw_mm: I(fields.depth_raw_mm),\n                depth_filt_mm: I(fields.depth_filt_mm),\n                depth_proc_mm: I(fields.depth_proc_mm),\n                depth_exp_mm: I(fields.depth_exp_mm),\n                depth_filt_stages_applied: fields.depth_filt_stages_applied,\n                r_int_hr_mm: F(fields.r_int_hr_mm),\n                bucket_acc_mm_min: F(fields.bucket_acc_mm_min),\n                night_median_dist_mm: I(fields.night_median_dist_mm),\n\n                depth_proc_ver: I(fields.depth_proc_ver),\n                depth_qc_flag: I(fields.depth_qc_flag),\n                error_flag: I(fields.error_flag),\n                die_temp_c: I(fields.die_temp_c),\n                batt_mv: I(Math.round(fields.batt_v * 1000)),\n                flash_mem_remaining: I(fields.flash_mem_remaining),\n            }] : undefined\n        },\n\n        {\n            table: 'tidal_data',\n            data: measurement == 'tide-sensor' ? [{\n                time: timestamp,\n                deployment_id: deployment_id,\n                dev_id: dev_id,\n                mhhw_mm: I(fields.mhhw_mm),\n                mllw_mm: I(fields.mllw_mm),\n                navd88_mm: I(fields.navd88_mm),\n                dist_mm: I(fields.dist_mm),\n                depth_proc_ver: I(fields.depth_proc_ver),\n                depth_qc_flag: I(fields.depth_qc_flag),\n                error_flag: I(fields.error_flag),\n                batt_mv: I(Math.round(fields.batt_v * 1000)),\n                die_temp_c: I(fields.die_temp_c),\n                flash_mem_remaining: I(fields.flash_mem_remaining),\n            }] : undefined\n        },\n\n        {\n            table: 'weather_data',\n            data: measurement == 'weather-sensor' ? [{\n                time: timestamp,\n                deployment_id: deployment_id,\n                dev_id: dev_id,\n                baro_pres_pa: I(fields.baro_pres_pa),\n                cloud_percent: I(fields.cloud_percent),\n                relhumid_percent: I(fields.relhumid_percent),\n                wind_dir_deg: I(fields.wind_dir_deg),\n                solar_insol_wm2: I(fields.solar_insol_wm2),\n                snow_depth_mm: I(fields.snow_depth_mm),\n                snow_last_hour_mm: I(fields.snow_last_hour_mm),\n                visibility: I(fields.visibility),\n                temp_c: F(fields.temp_c),\n                temp_slow_c: F(fields.temp_slow_c),\n                wind_speed_kmh: F(fields.wind_speed_kmh),\n                max_precip_last_5min_mm_per_min: F(fields.max_precip_last_5min_mm_per_min),\n                precip_last_hour_mm: F(fields.precip_last_hour_mm),\n                windchill_c: F(fields.windchill_c),\n                precip_forecast_last_min_mm: F(fields.precip_forecast_last_min_mm),\n            }] : undefined\n        },\n    ]\n    return {\n        query: inserts.map(sqlInsertObject).filter(x=>x).join('\\n\\n'),\n    }\n}\n\ncontext.set('translateQuery', translateQuery);",
    "finalize": "",
    "libs": [],
    "x": 900,
    "y": 460,
    "wires": [
      [
        "ce94eb6ecbb52ef1"
      ]
    ]
  },
  {
    "id": "a415163dd533e098",
    "type": "debug",
    "z": "b8f9c9a92652ae8e",
    "name": "debug 20",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 880,
    "y": 240,
    "wires": []
  },
  {
    "id": "9e193490af860f5e",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "Filters \ud83c\udf08",
    "func": "// add as different field name\n// msg.payload[0].fields.depth_proc2_mm=msg.payload[0].fields.depth_proc_mm;\nconst devid = msg.dev_id;\nconst fbank = context.get('getFilter')(devid)\nif(msg.historicalData && msg.historicalDataIndex === 0) {\n    fbank.clear();\n}\n\n// Filters applied!\nconst msgs = fbank.filter(msg)\n\nfor(let m of msgs) {\n    const dist2 = m.payload[0].fields.depth_proc_mm;\n    const dist = m.payload[0].fields.depth_filt_mm;\n    m.payload[0].fields.depth_proc_dist_mm=((dist||0) - (dist2||0))\n}\n\nreturn [ msgs ];",
    "outputs": 1,
    "noerr": 0,
    "initialize": "\n\n\nclass Filter {\n    constructor({ name, depthField='depth_proc_mm', maxMins=6, nHistory=0, isRaining=null }={}) {\n        this.name = name;\n        this.state = {};\n\n        this.maxMs = maxMins*60*1000;\n        this.depthField = depthField;\n        this._isRaining = isRaining;\n        this.state.buffer = new Deque(nHistory+1);\n    }\n    clear() {\n        this.state.buffer.length = 0;\n    }\n    isRaining(t) {\n        return this._isRaining ? this._isRaining(t) : null;\n    }\n    isInvalid(msg, t) {\n        // check if the time difference between points is very large\n        // if they are, we're less confident about the filter rules\n        let [m1, d1, t1] = this.state.buffer[this.state.buffer.length-2];\n        let invalid = this.maxMs && (t - t1) > this.maxMs;\n        if(invalid) {\n            // if it's not raining we can afford to be a bit more \n            // lenient with the filters.\n            const rain = this.isRaining(t);\n            invalid = invalid && rain; // only invalid if raining too\n            this.log(\n                rain ?\n                `blip invalid because of time difference ${(t - t1)/1000/60}min > ${this.maxMs/1000/60}min and it's raining` :\n                `blip large time difference ${(t - t1)/1000/60}min > ${this.maxMs/1000/60}min but it is not raining`)\n            this.setReason(msg, rain ? `?${this.name}:cancelled-rain-time-diff` : `?${this.name}:no-rain-time-diff`)\n        }\n        return invalid;\n    }\n\n    \n    log(...args) { \n        node.warn(...args) \n    }\n    unpack(msg) {\n        const {fields, timestamp} = msg.payload[0];\n        let depth = fields[this.depthField];\n        depth = depth == null ? 0 : parseInt(depth);\n        // if(isNaN(depth)) {\n        //     this.log(`${this.name}: bad depth value ${fields[this.depthField]}`);\n        //     depth = 0;\n        // }\n        return [depth, parseFloat(timestamp)];\n    }\n    override(msg, depth, reason=null) {\n        msg.payload[0].fields[this.depthField] = depth;\n        reason && this.setReason(msg, reason);\n        return msg;\n    }\n    setReason(msg, reason) {\n        let prevReason = msg.payload[0].fields.depth_filt_stages_applied || '';\n        msg.payload[0].fields.depth_filt_stages_applied = prevReason + '|' + reason;\n        return msg;\n    }\n}\n\n\nclass RangeFilter extends Filter {\n    constructor({ height=null, noiseFloor=10, name='range' }={}) {\n        super({ name });\n        this.height = height;\n        this.noiseFloor = noiseFloor;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        const night_median = msg.night_median;\n        // values below this are likely just noise\n        if(depth > 0 && depth < this.noiseFloor) this.override(msg, 0, 'range:noise-floor');\n        // values above this are not possible\n        if(this.height && depth > this.height) this.override(msg, null, 'range:max-height');\n        // values above this are not possible\n        if(night_median && depth > night_median) this.override(msg, null, 'range:night-median');\n        return [msg];\n    }\n}\n\nclass GradFilter extends Filter {\n    constructor({ inchmin=10, name='gradient' }={}) {\n        super({ name, nHistory: 1 });\n        this.min_mmps = inchmin * 25.4 / 60;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        this.state.buffer.push([msg, depth, t]);\n        if(this.state.buffer.length == 1) return [msg];\n\n        // get the rate of change from the last point\n        const [m1, d1, t1] = this.state.buffer[0];\n        const dddt = (depth-d1) / Math.max(0.1, t - t1);\n        // check that the change in depth isn't too fast/improbable\n        if (dddt > this.min_mmps) {\n            this.log(`gradient filtered ${d1} to ${depth}mm \u2206d/\u2206t=${dddt}mm/s`);\n            this.override(msg, d1, 'gradient');\n            this.state.buffer[this.state.buffer.length - 1][1] = d1;\n        }\n        return [msg];\n    }\n}\n\nclass BlipFilter extends Filter {\n    constructor({ maxMins=6, blipMinDist=2, blipRatio=0.1, downwardBlips=false, isRaining=null, name='blip' }) {\n        super({ name, maxMins, isRaining, nHistory: 2 });\n        this.blipMinDist = blipMinDist;\n        this.blipRatio = blipRatio;\n        this.downwardBlips = downwardBlips;\n        this.clear();\n    }\n    clear() { \n        super.clear();\n        this.state.holding = false;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        this.state.buffer.push([msg, depth, t]);\n        if(this.state.buffer.length == 1) return [msg];\n\n        if(this.state.holding) {\n            let [[m1,d1,t1], [m2,d2,t2], [m3,d3,t3]] = this.state.buffer;\n            // If the blip jump is greater than some threshold and then it goes\n            // back down to close to the same value, set it as the average of the \n            // first and third values.\n            const baseDist = Math.abs(d1 - d3);\n            let blipDist = d2 - d1;\n            blipDist = this.downwardBlips ? Math.abs(blipDist) : blipDist;\n            if (\n                (blipDist > this.blipMinDist) && \n                (baseDist / blipDist < this.blipRatio) && \n                !this.isInvalid(msg, t)\n            ) {\n                this.log(`blip filtered ${[d1, d2, d3]}`);\n                this.override(m2, (d1+d3)/2, this.name);\n            }\n            // blips are only held for one value\n            this.state.holding = false;\n            return [m2, msg];\n        }\n\n        // check if it jumps up above the blip threshold\n        let dm1 = this.state.buffer[this.state.buffer.length-2][1];\n        if(depth - dm1 > this.blipMinDist) {\n            this.state.holding = true;\n            this.log(`blip hold ${dm1} ${depth}`);\n            return [];\n        }\n\n        return [msg];\n    }\n}\n\nclass BoxFilter extends Filter {\n    constructor({ boxRatio=0.05, maxMins=6, isRaining=null, name='box' }) {\n        super({ name, maxMins, isRaining, nHistory: 2 });\n        this.boxRatio = boxRatio;\n        this.state.initialBox = null;\n        this.state.boxStart = null;\n        this.clear();\n    }\n    clear() { \n        super.clear();\n        this.boxDiff = 0;\n        this.state.holding = false;\n        this.state.filtering = false;\n        this.state.initialBox = null;\n        this.state.boxStart = null;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        this.state.buffer.push([msg, depth, t])\n        if(this.state.buffer.length == 1) return [msg];\n\n        let [m2, d2, t2] = this.state.buffer[this.state.buffer.length-2];\n        if(this.state.filtering) {\n            // get the change between the last point\n            const dd = depth-d2;\n            // add it to the total box delta\n            this.state.boxDiff += dd;\n            // the the box conditions are met, squash it\n            if(\n                Math.abs(dd / this.state.boxJump) < this.boxRatio && \n                Math.abs(this.state.boxDiff / this.state.boxJump) < this.boxRatio  && \n                !this.isInvalid(t)\n            ) {\n                // hulk squash\n                this.log(`box filter ${this.state.initialBox} ... ${[d2, depth]} ${Math.abs(this.state.boxDiff)} / ${this.state.boxJump} > ${this.boxRatio}`);\n                if(this.holding) {\n                    this.override(m2, 0, this.name);\n                }\n                this.override(msg, 0, this.name);\n            } else {\n                // otherwise stop filtering\n                this.log(`box hold released ${this.state.initialBox} ... ${[d2, depth]} - ${(t-this.state.boxStart)/1000/60}mins`);\n                this.state.filtering = false;\n            }\n        } else {\n            // check if box conditions are met\n            if(d2 === 0 && depth > 0) {\n                this.log(`box hold ${[d2,  depth]}`);\n                this.state.boxDiff = 0;\n                this.state.holding = true;\n                this.state.filtering = true;\n                this.state.initialBox = [d2,  depth];\n                this.state.boxStart = t;\n                this.state.boxJump = depth - d2;\n                return [];\n            }\n        }\n\n        // if we are holding a value, make sure to send it\n        if(this.state.holding) {\n            this.state.holding = false;\n            return [m2, msg];\n        }\n\n        return [msg];\n    }\n}\n\n\nclass FilterBank {\n    constructor(filters) {\n        this.filters = filters;\n    }\n    filter(...msgs) {\n        return this.filters.reduce((msgs, f) => (\n            msgs.reduce((outputted, msg) => [...outputted, ...f.filter(msg)], [])\n        ), msgs);\n    }\n    clear() {\n        for(let f of this.filters) f.clear();\n    }\n}\n\n\nclass Deque extends Array {\n    constructor(maxsize) {\n        super();\n        this.maxsize = maxsize;\n    }\n    push(x) {\n      super.push(x);\n      while(this.length > this.maxsize) {\n        this.shift();\n      }\n    }\n}\n\nclass RainQueue extends Array {\n    constructor(maxage=60*60) {\n        super();\n        this.maxage = maxage;\n    }\n    push(rained, t) {\n        const now = Date.now()\n        \n        // append sorted\n        if(!this.length || t > this[this.length-1][1]) {\n            super.push([rained, t]);\n        }\n        else {\n            let i=this.length-1;\n            for(;t > this[i][1] && i>0;i--) { }\n            this.splice(i, 0, [rained, t]);\n        }\n        // trim off old samples\n        while(this.length && now - this[0][1] > this.maxage) {\n            this.shift();\n        }\n    }\n    anyRain() { return this.some(r => r[0]) }\n}\n\nconst buildFBank = (opts={}) => {\n    const isRaining = (t) => {\n        const rain = global.get('rainQueue');\n        if(!rain || t < rain[0][1]) return false;\n        return rain && rain.anyRain();\n    }\n    return new FilterBank([\n        new RangeFilter({ ...opts }),\n        new GradFilter({ ...opts }),\n        new BlipFilter({ isRaining, ...opts }),\n        new BoxFilter({ isRaining, ...opts }),\n        new BlipFilter({ isRaining, ...opts}),\n    ]);\n}\n\nconst oldFbanks = context.get('filterBanks') || global.get('filterBanks') || {};\nconst fbanks = {};\nfor(let k in oldFbanks) {\n    fbanks[k] = buildFBank();\n    for(let i in fbanks[k].filters) {\n        const f=fbanks[k].filters[i];\n        const fOld=oldFbanks[k].filters[i];\n        f.state = {...f.state, ...fOld.state};\n    }\n}\ncontext.set('filterBanks', fbanks);\n\ncontext.set('getFilter', (devid, opts={}) => {\n    if(!fbanks[devid]) fbanks[devid] = buildFBank(opts);\n    return fbanks[devid];\n});",
    "finalize": "",
    "libs": [],
    "x": 580,
    "y": 800,
    "wires": [
      []
    ]
  },
  {
    "id": "89fdd141a3fc13c8",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "Filters \ud83c\udf08",
    "func": "// add as different field name\n// msg.payload[0].fields.depth_proc2_mm=msg.payload[0].fields.depth_proc_mm;\nconst devid = msg.dev_id;\nconst fbank = context.get('getFilter')(devid)\nif(msg.historicalData && msg.historicalDataIndex === 0) {\n    fbank.clear();\n}\n\n// Filters applied!\nconst msgs = fbank.filter(msg)\n\nfor(let m of msgs) {\n    const dist2 = m.payload[0].fields.depth_proc_mm;\n    const dist = m.payload[0].fields.depth_filt_mm;\n    m.payload[0].fields.depth_proc_dist_mm=((dist||0) - (dist2||0))\n}\n\nreturn [ msgs ];",
    "outputs": 1,
    "noerr": 0,
    "initialize": "\n\n\nclass Filter {\n    constructor({ name, depthField='depth_proc_mm', maxMins=6, nHistory=0, isRaining=null }={}) {\n        this.name = name;\n        this.state = {};\n\n        this.maxMs = maxMins*60*1000;\n        this.depthField = depthField;\n        this._isRaining = isRaining;\n        this.state.buffer = new Deque(nHistory+1);\n    }\n    clear() {\n        this.state.buffer.length = 0;\n    }\n    isRaining(t) {\n        return this._isRaining ? this._isRaining(t) : null;\n    }\n    isInvalid(msg, t) {\n        // check if the time difference between points is very large\n        // if they are, we're less confident about the filter rules\n        let [m1, d1, t1] = this.state.buffer[this.state.buffer.length-2];\n        let invalid = this.maxMs && (t - t1) > this.maxMs;\n        if(invalid) {\n            // if it's not raining we can afford to be a bit more \n            // lenient with the filters.\n            const rain = this.isRaining(t);\n            invalid = invalid && rain; // only invalid if raining too\n            this.log(\n                rain ?\n                `blip invalid because of time difference ${(t - t1)/1000/60}min > ${this.maxMs/1000/60}min and it's raining` :\n                `blip large time difference ${(t - t1)/1000/60}min > ${this.maxMs/1000/60}min but it is not raining`)\n            this.setReason(msg, rain ? `?${this.name}:cancelled-rain-time-diff` : `?${this.name}:no-rain-time-diff`)\n        }\n        return invalid;\n    }\n\n    \n    log(...args) { \n        node.warn(...args) \n    }\n    unpack(msg) {\n        const {fields, timestamp} = msg.payload[0];\n        let depth = fields[this.depthField];\n        depth = depth == null ? 0 : parseInt(depth);\n        // if(isNaN(depth)) {\n        //     this.log(`${this.name}: bad depth value ${fields[this.depthField]}`);\n        //     depth = 0;\n        // }\n        return [depth, parseFloat(timestamp)];\n    }\n    override(msg, depth, reason=null) {\n        msg.payload[0].fields[this.depthField] = depth;\n        reason && this.setReason(msg, reason);\n        return msg;\n    }\n    setReason(msg, reason) {\n        let prevReason = msg.payload[0].fields.depth_filt_stages_applied || '';\n        msg.payload[0].fields.depth_filt_stages_applied = prevReason + '|' + reason;\n        return msg;\n    }\n}\n\n\nclass RangeFilter extends Filter {\n    constructor({ height=null, noiseFloor=10, name='range' }={}) {\n        super({ name });\n        this.height = height;\n        this.noiseFloor = noiseFloor;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        const night_median = msg.night_median;\n        // values below this are likely just noise\n        if(depth > 0 && depth < this.noiseFloor) this.override(msg, 0, 'range:noise-floor');\n        // values above this are not possible\n        if(this.height && depth > this.height) this.override(msg, null, 'range:max-height');\n        // values above this are not possible\n        if(night_median && depth > night_median) this.override(msg, null, 'range:night-median');\n        return [msg];\n    }\n}\n\nclass GradFilter extends Filter {\n    constructor({ inchmin=10, name='gradient' }={}) {\n        super({ name, nHistory: 1 });\n        this.min_mmps = inchmin * 25.4 / 60 / 1000;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        this.state.buffer.push([msg, depth, t]);\n        if(this.state.buffer.length == 1) return [msg];\n\n        // get the rate of change from the last point\n        const [m1, d1, t1] = this.state.buffer[0];\n        const dddt = (depth-d1) / Math.max(0.0001, t - t1);\n        this.log(`gradient ${d1} to ${depth}mm \u2206d/\u2206t=${dddt}mm/s ${(depth-d1)} / ${Math.max(0.1, t - t1)}`);\n        // check that the change in depth isn't too fast/improbable\n        if (dddt > this.min_mmps) {\n            this.log(`gradient filtered ${d1} to ${depth}mm \u2206d/\u2206t=${dddt}mm/s`);\n            this.override(msg, d1, 'gradient');\n            this.state.buffer[this.state.buffer.length - 1][1] = d1;\n        }\n        return [msg];\n    }\n}\n\nclass BlipFilter extends Filter {\n    constructor({ maxMins=6, blipMinDist=2, blipRatio=0.1, downwardBlips=false, isRaining=null, name='blip' }) {\n        super({ name, maxMins, isRaining, nHistory: 2 });\n        this.blipMinDist = blipMinDist;\n        this.blipRatio = blipRatio;\n        this.downwardBlips = downwardBlips;\n        this.clear();\n    }\n    clear() { \n        super.clear();\n        this.state.holding = false;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        this.state.buffer.push([msg, depth, t]);\n        if(this.state.buffer.length == 1) return [msg];\n\n        if(this.state.holding) {\n            let [[m1,d1,t1], [m2,d2,t2], [m3,d3,t3]] = this.state.buffer;\n            // If the blip jump is greater than some threshold and then it goes\n            // back down to close to the same value, set it as the average of the \n            // first and third values.\n            const baseDist = Math.abs(d1 - d3);\n            let blipDist = d2 - d1;\n            blipDist = this.downwardBlips ? Math.abs(blipDist) : blipDist;\n            if (\n                (blipDist > this.blipMinDist) && \n                (baseDist / blipDist < this.blipRatio) && \n                !this.isInvalid(msg, t)\n            ) {\n                this.log(`blip filtered ${[d1, d2, d3]}`);\n                this.override(m2, (d1+d3)/2, this.name);\n            }\n            // blips are only held for one value\n            this.state.holding = false;\n            return [m2, msg];\n        }\n\n        // check if it jumps up above the blip threshold\n        let dm1 = this.state.buffer[this.state.buffer.length-2][1];\n        if(depth - dm1 > this.blipMinDist) {\n            this.state.holding = true;\n            this.log(`blip hold ${dm1} ${depth}`);\n            return [];\n        }\n\n        return [msg];\n    }\n}\n\nclass BoxFilter extends Filter {\n    constructor({ boxRatio=0.05, maxMins=6, isRaining=null, name='box' }) {\n        super({ name, maxMins, isRaining, nHistory: 2 });\n        this.boxRatio = boxRatio;\n        this.state.initialBox = null;\n        this.state.boxStart = null;\n        this.clear();\n    }\n    clear() { \n        super.clear();\n        this.boxDiff = 0;\n        this.state.holding = false;\n        this.state.filtering = false;\n        this.state.initialBox = null;\n        this.state.boxStart = null;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        this.state.buffer.push([msg, depth, t])\n        if(this.state.buffer.length == 1) return [msg];\n\n        let [m2, d2, t2] = this.state.buffer[this.state.buffer.length-2];\n        if(this.state.filtering) {\n            // get the change between the last point\n            const dd = depth-d2;\n            // add it to the total box delta\n            this.state.boxDiff += dd;\n            // the the box conditions are met, squash it\n            if(\n                Math.abs(dd / this.state.boxJump) < this.boxRatio && \n                Math.abs(this.state.boxDiff / this.state.boxJump) < this.boxRatio  && \n                !this.isInvalid(t)\n            ) {\n                // hulk squash\n                this.log(`box filter ${this.state.initialBox} ... ${[d2, depth]} ${Math.abs(this.state.boxDiff)} / ${this.state.boxJump} > ${this.boxRatio}`);\n                if(this.holding) {\n                    this.override(m2, 0, this.name);\n                }\n                this.override(msg, 0, this.name);\n            } else {\n                // otherwise stop filtering\n                this.log(`box hold released ${this.state.initialBox} ... ${[d2, depth]} - ${(t-this.state.boxStart)/1000/60}mins`);\n                this.state.filtering = false;\n            }\n        } else {\n            // check if box conditions are met\n            if(d2 === 0 && depth > 0) {\n                this.log(`box hold ${[d2,  depth]}`);\n                this.state.boxDiff = 0;\n                this.state.holding = true;\n                this.state.filtering = true;\n                this.state.initialBox = [d2,  depth];\n                this.state.boxStart = t;\n                this.state.boxJump = depth - d2;\n                return [];\n            }\n        }\n\n        // if we are holding a value, make sure to send it\n        if(this.state.holding) {\n            this.state.holding = false;\n            return [m2, msg];\n        }\n\n        return [msg];\n    }\n}\n\n\nclass FilterBank {\n    constructor(filters) {\n        this.filters = filters;\n    }\n    filter(...msgs) {\n        return this.filters.reduce((msgs, f) => (\n            msgs.reduce((outputted, msg) => [...outputted, ...f.filter(msg)], [])\n        ), msgs);\n    }\n    clear() {\n        for(let f of this.filters) f.clear();\n    }\n}\n\n\nclass Deque extends Array {\n    constructor(maxsize) {\n        super();\n        this.maxsize = maxsize;\n    }\n    push(x) {\n      super.push(x);\n      while(this.length > this.maxsize) {\n        this.shift();\n      }\n    }\n}\n\nclass RainQueue extends Array {\n    constructor(maxage=60*60) {\n        super();\n        this.maxage = maxage;\n    }\n    push(rained, t) {\n        const now = Date.now()\n        \n        // append sorted\n        if(!this.length || t > this[this.length-1][1]) {\n            super.push([rained, t]);\n        }\n        else {\n            let i=this.length-1;\n            for(;t > this[i][1] && i>0;i--) { }\n            this.splice(i, 0, [rained, t]);\n        }\n        // trim off old samples\n        while(this.length && now - this[0][1] > this.maxage) {\n            this.shift();\n        }\n    }\n    anyRain() { return this.some(r => r[0]) }\n}\n\nconst buildFBank = (opts={}) => {\n    const isRaining = (t) => {\n        const rain = global.get('rainQueue');\n        if(!rain || t < rain[0][1]) return false;\n        return rain && rain.anyRain();\n    }\n    return new FilterBank([\n        new RangeFilter({ ...opts }),\n        new GradFilter({ ...opts }),\n        new BlipFilter({ isRaining, ...opts }),\n        new BoxFilter({ isRaining, ...opts }),\n        new BlipFilter({ isRaining, ...opts}),\n    ]);\n}\n\nconst oldFbanks = context.get('filterBanks') || global.get('filterBanks') || {};\nconst fbanks = {};\nfor(let k in oldFbanks) {\n    fbanks[k] = buildFBank();\n    for(let i in fbanks[k].filters) {\n        const f=fbanks[k].filters[i];\n        const fOld=oldFbanks[k].filters[i];\n        f.state = {...f.state, ...fOld.state};\n    }\n}\ncontext.set('filterBanks', fbanks);\n\ncontext.set('getFilter', (devid, opts={}) => {\n    if(!fbanks[devid]) fbanks[devid] = buildFBank(opts);\n    return fbanks[devid];\n});",
    "finalize": "",
    "libs": [],
    "x": 500,
    "y": 1140,
    "wires": [
      [
        "9d7816724d233124"
      ]
    ]
  },
  {
    "id": "11b826efeabfe117",
    "type": "inject",
    "z": "b8f9c9a92652ae8e",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"start\": \"-9h\", \"stop\": \"-7h\", \"depid\": \"future_aqua_wildcat\"}",
    "payloadType": "json",
    "x": 310,
    "y": 1080,
    "wires": [
      [
        "127e2829c288b414"
      ]
    ]
  },
  {
    "id": "971e4a5b2cc2ba4d",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "window",
    "func": "const devid = msg.dev_id;\nconst depth = msg.payload[0].fields.depth_proc_mm;;\n\nlet q = flow.get('getMLQueue')(devid);\nq.push(depth)\n\n// node.warn([devid, q.length, depth])\n\nreturn {\n    ...msg,\n    orig_payload: msg.payload,\n    payload: JSON.stringify(Array.from(q))\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "// Code added here will be run once\n// whenever the node is started.\nclass Deque extends Array {\n    constructor(maxsize) {\n        super();\n        this.maxsize = maxsize;\n    }\n    push(x) {\n      super.push(x);\n      while(this.length > this.maxsize) {\n        this.shift();\n      }\n    }\n}\n\n\nconst qs = flow.get('mlQueues') || {};\nflow.set('mlQueues', qs);\nflow.set('getMLQueue', (devid, maxsize=128) => {\n    if(!qs[devid]) qs[devid] = new Deque(maxsize);\n    const q = qs[devid];\n    q.maxsize = maxsize;\n    return q;\n});",
    "finalize": "",
    "libs": [],
    "x": 660,
    "y": 480,
    "wires": [
      [
        "6ec8f083765cb61d"
      ]
    ]
  },
  {
    "id": "6ec8f083765cb61d",
    "type": "http request",
    "z": "b8f9c9a92652ae8e",
    "name": "ML \ud83e\udd84",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://fn.dep.floodlabs.nyc/detect-flood",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [
      {
        "keyType": "other",
        "keyValue": "Content-Type",
        "valueType": "other",
        "valueValue": "application/json"
      }
    ],
    "x": 670,
    "y": 520,
    "wires": [
      [
        "d2d689809f2316f5"
      ]
    ]
  },
  {
    "id": "d2d689809f2316f5",
    "type": "function",
    "z": "b8f9c9a92652ae8e",
    "name": "add ml to table",
    "func": "const detections = msg.payload;\nmsg.payload = msg.orig_payload;\n\nif(Array.isArray(detections)) {\n    const final = detections[detections.length - 1]\n    const mean = x => x.reduce((a, b) => a + b) / x.length;\n    let last = detections.slice(\n        Math.max(detections.length - 5, 0),\n        Math.max(detections.length - 1, 0),\n    )\n    msg.payload[0].fields.flood_detected = Math.min(mean(last), final)\n}\nelse {\n    node.warn(detections);\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 720,
    "y": 560,
    "wires": [
      [
        "cc73a08cd9aa98f3"
      ]
    ]
  },
  {
    "id": "8361b474de83e9d3",
    "type": "debug",
    "z": "b8f9c9a92652ae8e",
    "name": "debug 37",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload[0].fields.flood_detected",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 860,
    "y": 600,
    "wires": []
  },
  {
    "id": "816fd82a0451d618",
    "type": "mqtt in",
    "z": "63ec5913b540d2a2",
    "g": "49d4aa47d32b30f6",
    "name": "floodnet-live",
    "topic": "#",
    "qos": "0",
    "datatype": "json",
    "broker": "8f7859036b247ff4",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 230,
    "y": 120,
    "wires": [
      []
    ]
  },
  {
    "id": "eb571e78cd85f70a",
    "type": "mqtt in",
    "z": "63ec5913b540d2a2",
    "g": "49d4aa47d32b30f6",
    "name": "floodnet-lab",
    "topic": "#",
    "qos": "0",
    "datatype": "json",
    "broker": "69a33419a2453bea",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 230,
    "y": 180,
    "wires": [
      []
    ]
  },
  {
    "id": "20923d20ec88e910",
    "type": "mqtt in",
    "z": "63ec5913b540d2a2",
    "g": "49d4aa47d32b30f6",
    "name": "floodnet-test",
    "topic": "#",
    "qos": "0",
    "datatype": "json",
    "broker": "16f395ad93e105b8",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 230,
    "y": 240,
    "wires": [
      []
    ]
  },
  {
    "id": "ea8cbeac5dbcd8a6",
    "type": "mqtt in",
    "z": "63ec5913b540d2a2",
    "g": "49d4aa47d32b30f6",
    "name": "nyu-production",
    "topic": "#",
    "qos": "2",
    "datatype": "json",
    "broker": "232424bf32c1529c",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 240,
    "y": 300,
    "wires": [
      []
    ]
  },
  {
    "id": "421b22866c92b131",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "49d4aa47d32b30f6",
    "name": "fn -> fs",
    "func": "function hexify(dev_id){\n    let dev_eui = \"\";\n    for (let n=0, l=dev_id.length; n<l; n++) \n         {\n    \t\tvar hex = Number(dev_id.charCodeAt(n)).toString(16);\n    \t\tdev_eui += hex;\n    \t }\n    return dev_eui;\n}\n\nlet mappings = [\n    [\"rg-00002\",\"rg-00002\"],\n    [\"fn-00004\",\"fs-00003\"],\n    [\"fn-00005\",\"fs-00004\"],\n    [\"fn-00012\",\"fs-00009\"],\n    [\"fs-00014\",\"fs-00011\"],\n    // [\"fs-00015\",\"fs-00012\"], // can be removed\n    [\"fs-00016\",\"fs-00013\"],\n    // [\"fs-00017\",\"fs-00014\"], // can be removed\n    [\"fs-00018\",\"fs-00015\"],\n    [\"fs-00019\",\"fs-00016\"],\n    [\"fs-00020\",\"fs-00017\"],\n    [\"fs-00022\",\"fs-00018\"],\n    // [\"fs-00023\",\"fs-00019\"], // can be removed\n    // [\"fs-00024\",\"fs-00020\"] // can be removed\n];\n\nlet old_dev_id = msg.payload.end_device_ids.device_id;\n\nfor (let n=0, l=mappings.length; n<l; n++) {\n    if(mappings[n][0] == old_dev_id){\n        new_dev_id = mappings[n][1];\n        msg.payload.end_device_ids.device_id = new_dev_id;\n        msg.payload.end_device_ids.dev_eui = hexify(new_dev_id);\n        msg.payload.end_device_ids.application_ids.application_id = 'floodnet-live';\n        break;\n    }\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 420,
    "y": 300,
    "wires": [
      [
        "7a34dea54b35c817"
      ]
    ]
  },
  {
    "id": "7a34dea54b35c817",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "49d4aa47d32b30f6",
    "name": "---",
    "func": "return msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 410,
    "y": 240,
    "wires": [
      [
        "cf5ad217a5345e45"
      ]
    ]
  },
  {
    "id": "cf5ad217a5345e45",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "49d4aa47d32b30f6",
    "name": "TTN Parser",
    "func": "if(msg.payload.downlink_nack !== undefined || msg.payload.uplink_message == undefined){\n    // Its a downlink, ignore but should probably log these at some point\n    return;\n}\n\nconst { uplink_message: uplink_info, end_device_ids: dev_info, join_accept } = msg.payload;\nif(!uplink_info || join_accept) return;\n\nconst raw_msg = uplink_info.frm_payload;\nvar b = null;\n\nif (raw_msg){\n    const binary_string = Buffer.from(raw_msg, \"base64\").toString('hex').match(/.{1,2}/g);\n    b = new Uint8Array(binary_string.length);\n    for (var i = 0; i < binary_string.length; i++) {\n        b[i] = parseInt(binary_string[i], 16);\n    }\n}\n\n// Sort gateway data by RSSI strength\nconst gateway_signal_data = (\n    uplink_info.rx_metadata\n        .filter(x => !x.hasOwnProperty('packet_broker'))\n        .sort((a, b) => parseFloat(b.rssi) - parseFloat(a.rssi))\n        .map(d => ({ \n            gw_id: d.gateway_ids.gateway_id,  \n            gw_rssi_dbm: d.rssi,\n            gw_snr_db: d.snr,\n        })\n    )\n)\n\nreturn {\n    ...msg,\n\n    app_name: dev_info.application_ids.application_id,\n    app_type: raw_msg && (\n        dev_info.device_id === \"eui-03a26db322380301\" ? \n            \"sg\" : \n            dev_info.device_id.slice(0, 2)\n    ),\n    timestamp: Date.parse(uplink_info.received_at),\n    \n    dev_addr: dev_info.dev_addr,\n    dev_eui: dev_info.dev_eui,\n    dev_id: dev_info.device_id,\n\n    b,\n    error_flag: b && b[0],\n\n    payload: {\n        // lora signal data\n        lora_transmissions: {\n            airtime_s: parseFloat(uplink_info.consumed_airtime.replace('s', '')),\n            f_cnt: uplink_info.f_cnt,\n            lora_freq_hz: parseInt(uplink_info.settings.frequency),\n            ...gateway_signal_data?.[0],\n            sf: '' + uplink_info.settings.data_rate.lora.spreading_factor,\n            f_port: '' + uplink_info.f_port,\n            bw_hz: '' + uplink_info.settings.data_rate.lora.bandwidth,\n            coding_rate: uplink_info.settings.data_rate.lora.coding_rate,\n            network: 'ttn',\n        },\n\n        gateway_signal_data,\n    }\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 590,
    "y": 240,
    "wires": [
      [
        "c4864b55d9c06278",
        "b43cfa81b9314d3c"
      ]
    ]
  },
  {
    "id": "13740863fdc9d238",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "flood sensor decode",
    "func": "const { payload, b, night_median } = msg;\n\nconst table_name = 'depth_data';\npayload[table_name] = payload[table_name] || {};\nconst data = payload[table_name];\n\nconst sensor_table_name = 'lora_sensor_data';\npayload[sensor_table_name] = payload[sensor_table_name] || {};\nconst sensordata = payload[sensor_table_name];\n\nconst weather_table_name = 'weather_data';\npayload[weather_table_name] = payload[weather_table_name] || {};\nconst weatherdata = payload[weather_table_name];\n\n// Converting Error Flag bits\ndata['error_flag'] = '' + b[0] % 2;\n// battery -> mV\nsensordata['batt_mv'] = ((b[2] << 8) | b[1]);\n// distance\ndistance = (b[4] << 8) | b[3];\ndata['dist_mm'] = distance;\n\n// extra fields\nif (b.length > 5){\n    // temperature\n    weatherdata['temp_c'] = ((b[6] & 0x80 ? 0xFFFF<<16 : 0) | b[6]<<8 | b[5]) / 100;\n    // pressure\n    weatherdata['pres_mb'] = ((((b[10]<<24) | (b[9]<<16)) | (b[8]<<8)) | b[7]) / 100;\n    // altitude\n    weatherdata['alt_m'] = ((b[12] << 8) | b[11]) / 100;\n    // humidity\n    weatherdata['humid_percen'] = ((b[14] << 8) | b[13]) / 100;\n}\n\n// convert distance to depth\nif(night_median !== undefined) {\n    let depth = night_median - distance;\n    data['depth_raw_mm'] = depth;\n\n    // process depth\n    if (depth <= 10){\n        depth = 0;\n        data['depth_filt_mm'] = 'night_median';\n    }\n    if(depth > night_median) {\n        depth = undefined;\n        data['depth_filt_mm'] = 'night_median';\n    }\n\n    data['depth_filt_mm'] = depth;\n    data['depth_proc_mm'] = depth;\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 760,
    "y": 500,
    "wires": [
      [
        "d417c629faa246db",
        "3b99b5dd48f7315b"
      ]
    ]
  },
  {
    "id": "b10b2f38b737ef92",
    "type": "switch",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "sensor type",
    "property": "app_type",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "fs",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "ts",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "rg",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "sg",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "undefined",
        "vt": "jsonata"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 5,
    "x": 450,
    "y": 600,
    "wires": [
      [
        "13740863fdc9d238",
        "dc63b3fdfca9e21b"
      ],
      [
        "4b0a1d9dcedab4d0",
        "3b863b4807cf0453"
      ],
      [
        "847b9dd076743050",
        "071ee8aa8bd88a27"
      ],
      [
        "030599a254594890",
        "037e6e65201aee12"
      ],
      [
        "a1a6cca40ff40590"
      ]
    ]
  },
  {
    "id": "847b9dd076743050",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "gw rain gauge decode",
    "func": "const table_name = 'depth_bucket_data';\nconst { payload, b } = msg;\npayload[table_name] = payload[table_name] || {}\nconst data = payload[table_name];\n\ndata['acc_mm'] = (b[0]|(b[1]<<8)|(b[2]<<16)|(b[3]<<32))/100;\ndata['event_acc_mm'] = (b[4]|(b[5]<<8)|(b[6]<<16)|(b[7]<<32))/100;\ndata['total_acc_mm'] = (b[8]|(b[9]<<8)|(b[10]<<16)|(b[11]<<32))/100;\ndata['r_int_hr_mm'] = (b[12]|(b[13]<<8)|(b[14]<<16)|(b[15]<<32))/100;\ndata['acc_unit'] = String.fromCharCode(b[16]) == 'm' ? 'mm' : 'in';\nif (b.length > 17){\n    data['bucket_acc_mm_min'] = (b[17]|(b[18]<<8))/1000;\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 760,
    "y": 700,
    "wires": [
      [
        "698ea5522a9d3fa2"
      ]
    ]
  },
  {
    "id": "a1a6cca40ff40590",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "unrecognized",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 440,
    "y": 660,
    "wires": []
  },
  {
    "id": "4b0a1d9dcedab4d0",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "tidal sensor decode",
    "func": "const { payload, b } = msg;\n\nconst table_name = 'tidal_data';\npayload[table_name] = payload[table_name] || {};\nconst data = payload[table_name];\n\nconst sensor_table_name = 'lora_sensor_data';\npayload[sensor_table_name] = payload[sensor_table_name] || {};\nconst sensordata = payload[sensor_table_name];\n\nconst weather_table_name = 'weather_data';\npayload[weather_table_name] = payload[weather_table_name] || {};\nconst weatherdata = payload[weather_table_name];\n\n\n// Converting Error Flag bits\ndata['error_flag'] = '' + b[0] % 2;\n// battery -> mV\nsensordata['batt_mv'] = ((b[2] << 8) | b[1]);\n// distance\ndistance = (b[4] << 8) | b[3];\ndata['dist_mm'] = distance;\n\nif (b.length > 5){\n    // temperature\n    weatherdata['temp_c'] = ((b[6] & 0x80 ? 0xFFFF<<16 : 0) | b[6]<<8 | b[5]) / 100;\n    // pressure\n    weatherdata['pres_mb'] = ((((b[10]<<24) | (b[9]<<16)) | (b[8]<<8)) | b[7]) / 100;\n    // altitude\n    weatherdata['alt_m'] = ((b[12] << 8) | b[11]) / 100;\n    // humidity\n    weatherdata['humid_percen'] = ((b[14] << 8) | b[13]) / 100;\n}\n\n// depth\n// TODO: use global var to store manually inserted MLLW value using NR GUI\n// var night_median = global.get(tags.dev_id + '.night_median');\n// if (night_median !== undefined){\n//     data['depth_mm'] = night_median - distance;\n// }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 750,
    "y": 600,
    "wires": [
      [
        "698ea5522a9d3fa2"
      ]
    ]
  },
  {
    "id": "d417c629faa246db",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "Filters \ud83c\udf08",
    "func": "// add as different field name\n// msg.payload[0].fields.depth_proc2_mm=msg.payload[0].fields.depth_proc_mm;\nconst devid = msg.dev_id;\nconst fbank = context.get('getFilter')(devid)\nif(msg.historicalData && msg.historicalDataIndex === 0) {\n    fbank.clear();\n}\n\n// Filters applied!\nconst msgs = fbank.filter(msg)\n\nfor(let m of msgs) {\n    const dist2 = m.payload.depth_data.depth_proc_mm;\n    const dist = m.payload.depth_data.depth_filt_mm;\n    m.payload.depth_data.depth_proc_dist_mm=((dist||0) - (dist2||0))\n}\n\nreturn [ msgs ];",
    "outputs": 1,
    "noerr": 0,
    "initialize": "class Filter {\n    constructor({ name, depthField='depth_proc_mm', maxMins=6, nHistory=0, isRaining=null }={}) {\n        this.name = name;\n        this.state = {};\n\n        this.maxMs = maxMins*60*1000;\n        this.depthField = depthField;\n        this._isRaining = isRaining;\n        this.state.buffer = new Deque(nHistory+1);\n    }\n    clear() {\n        this.state.buffer.length = 0;\n    }\n    isRaining(t) {\n        return this._isRaining ? this._isRaining(t) : null;\n    }\n    isInvalid(msg, t) {\n        // check if the time difference between points is very large\n        // if they are, we're less confident about the filter rules\n        let [m1, d1, t1] = this.state.buffer[this.state.buffer.length-2];\n        let invalid = this.maxMs && (t - t1) > this.maxMs;\n        if(invalid) {\n            // if it's not raining we can afford to be a bit more \n            // lenient with the filters.\n            const rain = this.isRaining(t);\n            invalid = invalid && rain; // only invalid if raining too\n            this.log(\n                rain ?\n                `blip invalid because of time difference ${(t - t1)/1000/60}min > ${this.maxMs/1000/60}min and it's raining` :\n                `blip large time difference ${(t - t1)/1000/60}min > ${this.maxMs/1000/60}min but it is not raining`)\n            this.setReason(msg, rain ? `?${this.name}:cancelled-rain-time-diff` : `?${this.name}:no-rain-time-diff`)\n        }\n        return invalid;\n    }\n\n    \n    log(...args) { \n        node.warn(...args) \n    }\n    unpack(msg) {\n        const {payload: {depth_data}, timestamp} = msg;\n        let depth = depth_data[this.depthField];\n        depth = depth == null ? 0 : parseInt(depth);\n        // if(isNaN(depth)) {\n        //     this.log(`${this.name}: bad depth value ${fields[this.depthField]}`);\n        //     depth = 0;\n        // }\n        return [depth, parseFloat(timestamp)];\n    }\n    override(msg, depth, reason=null) {\n        msg.payload.depth_data[this.depthField] = depth;\n        reason && this.setReason(msg, reason);\n        return msg;\n    }\n    setReason(msg, reason) {\n        let prevReason = msg.payload.depth_data.depth_filt_stages_applied || '';\n        msg.payload[0].fields.depth_filt_stages_applied = prevReason + '|' + reason;\n        return msg;\n    }\n}\n\n\nclass RangeFilter extends Filter {\n    constructor({ height=null, noiseFloor=10, name='range' }={}) {\n        super({ name });\n        this.height = height;\n        this.noiseFloor = noiseFloor;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        const night_median = msg.night_median;\n        // values below this are likely just noise\n        if(depth > 0 && depth < this.noiseFloor) this.override(msg, 0, 'range:noise-floor');\n        // values above this are not possible\n        if(this.height && depth > this.height) this.override(msg, null, 'range:max-height');\n        // values above this are not possible\n        if(night_median && depth > night_median) this.override(msg, null, 'range:night-median');\n        return [msg];\n    }\n}\n\nclass GradFilter extends Filter {\n    constructor({ inchmin=10, name='gradient' }={}) {\n        super({ name, nHistory: 1 });\n        this.min_mmps = inchmin * 25.4 / 60;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        this.state.buffer.push([msg, depth, t]);\n        if(this.state.buffer.length == 1) return [msg];\n\n        // get the rate of change from the last point\n        const [m1, d1, t1] = this.state.buffer[0];\n        const dddt = (depth-d1) / Math.max(0.1, t - t1);\n        // check that the change in depth isn't too fast/improbable\n        if (dddt > this.min_mmps) {\n            this.log(`gradient filtered ${d1} to ${depth}mm \u2206d/\u2206t=${dddt}mm/s`);\n            this.override(msg, d1, 'gradient');\n            this.state.buffer[this.state.buffer.length - 1][1] = d1;\n        }\n        return [msg];\n    }\n}\n\nclass BlipFilter extends Filter {\n    constructor({ maxMins=6, blipMinDist=2, blipRatio=0.1, downwardBlips=false, isRaining=null, name='blip' }) {\n        super({ name, maxMins, isRaining, nHistory: 2 });\n        this.blipMinDist = blipMinDist;\n        this.blipRatio = blipRatio;\n        this.downwardBlips = downwardBlips;\n        this.clear();\n    }\n    clear() { \n        super.clear();\n        this.state.holding = false;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        this.state.buffer.push([msg, depth, t]);\n        if(this.state.buffer.length == 1) return [msg];\n\n        if(this.state.holding) {\n            let [[m1,d1,t1], [m2,d2,t2], [m3,d3,t3]] = this.state.buffer;\n            // If the blip jump is greater than some threshold and then it goes\n            // back down to close to the same value, set it as the average of the \n            // first and third values.\n            const baseDist = Math.abs(d1 - d3);\n            let blipDist = d2 - d1;\n            blipDist = this.downwardBlips ? Math.abs(blipDist) : blipDist;\n            if (\n                (blipDist > this.blipMinDist) && \n                (baseDist / blipDist < this.blipRatio) && \n                !this.isInvalid(msg, t)\n            ) {\n                this.log(`blip filtered ${[d1, d2, d3]}`);\n                this.override(m2, (d1+d3)/2, this.name);\n            }\n            // blips are only held for one value\n            this.state.holding = false;\n            return [m2, msg];\n        }\n\n        // check if it jumps up above the blip threshold\n        let dm1 = this.state.buffer[this.state.buffer.length-2][1];\n        if(depth - dm1 > this.blipMinDist) {\n            this.state.holding = true;\n            this.log(`blip hold ${dm1} ${depth}`);\n            return [];\n        }\n\n        return [msg];\n    }\n}\n\nclass BoxFilter extends Filter {\n    constructor({ boxRatio=0.05, maxMins=6, isRaining=null, name='box' }) {\n        super({ name, maxMins, isRaining, nHistory: 2 });\n        this.boxRatio = boxRatio;\n        this.state.initialBox = null;\n        this.state.boxStart = null;\n        this.clear();\n    }\n    clear() { \n        super.clear();\n        this.boxDiff = 0;\n        this.state.holding = false;\n        this.state.filtering = false;\n        this.state.initialBox = null;\n        this.state.boxStart = null;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        this.state.buffer.push([msg, depth, t])\n        if(this.state.buffer.length == 1) return [msg];\n\n        let [m2, d2, t2] = this.state.buffer[this.state.buffer.length-2];\n        if(this.state.filtering) {\n            // get the change between the last point\n            const dd = depth-d2;\n            // add it to the total box delta\n            this.state.boxDiff += dd;\n            // the the box conditions are met, squash it\n            if(\n                Math.abs(dd / this.state.boxJump) < this.boxRatio && \n                Math.abs(this.state.boxDiff / this.state.boxJump) < this.boxRatio  && \n                !this.isInvalid(t)\n            ) {\n                // hulk squash\n                this.log(`box filter ${this.state.initialBox} ... ${[d2, depth]} ${Math.abs(this.state.boxDiff)} / ${this.state.boxJump} > ${this.boxRatio}`);\n                if(this.holding) {\n                    this.override(m2, 0, this.name);\n                }\n                this.override(msg, 0, this.name);\n            } else {\n                // otherwise stop filtering\n                this.log(`box hold released ${this.state.initialBox} ... ${[d2, depth]} - ${(t-this.state.boxStart)/1000/60}mins`);\n                this.state.filtering = false;\n            }\n        } else {\n            // check if box conditions are met\n            if(d2 === 0 && depth > 0) {\n                this.log(`box hold ${[d2,  depth]}`);\n                this.state.boxDiff = 0;\n                this.state.holding = true;\n                this.state.filtering = true;\n                this.state.initialBox = [d2,  depth];\n                this.state.boxStart = t;\n                this.state.boxJump = depth - d2;\n                return [];\n            }\n        }\n\n        // if we are holding a value, make sure to send it\n        if(this.state.holding) {\n            this.state.holding = false;\n            return [m2, msg];\n        }\n\n        return [msg];\n    }\n}\n\n\nclass FilterBank {\n    constructor(filters) {\n        this.filters = filters;\n    }\n    filter(...msgs) {\n        return this.filters.reduce((msgs, f) => (\n            msgs.reduce((outputted, msg) => [...outputted, ...f.filter(msg)], [])\n        ), msgs);\n    }\n    clear() {\n        for(let f of this.filters) f.clear();\n    }\n}\n\n\nclass Deque extends Array {\n    constructor(maxsize) {\n        super();\n        this.maxsize = maxsize;\n    }\n    push(x) {\n      super.push(x);\n      while(this.length > this.maxsize) {\n        this.shift();\n      }\n    }\n}\n\nconst buildFBank = (opts={}) => {\n    const isRaining = (t) => {\n        const rain = global.get('rainQueue');\n        if(!rain || t < rain[0][1]) return false;\n        return rain && rain.anyRain();\n    }\n    return new FilterBank([\n        new RangeFilter({ ...opts }),\n        new GradFilter({ ...opts }),\n        new BlipFilter({ isRaining, ...opts }),\n        new BoxFilter({ isRaining, ...opts }),\n        new BlipFilter({ isRaining, ...opts}),\n    ]);\n}\n\nconst oldFbanks = context.get('filterBanks') || {};\nconst fbanks = {};\nfor(let k in oldFbanks) {\n    fbanks[k] = buildFBank();\n    for(let i in fbanks[k].filters) {\n        const f=fbanks[k].filters[i];\n        const fOld=oldFbanks[k].filters[i];\n        f.state = {...f.state, ...fOld.state};\n    }\n}\ncontext.set('filterBanks', fbanks);\n\ncontext.set('getFilter', (devid, opts={}) => {\n    if(!fbanks[devid]) fbanks[devid] = buildFBank(opts);\n    return fbanks[devid];\n});",
    "finalize": "",
    "libs": [],
    "x": 940,
    "y": 520,
    "wires": [
      [
        "698ea5522a9d3fa2",
        "8d465086c3ef332a",
        "907eb2768e2bb846"
      ]
    ]
  },
  {
    "id": "4e78e8e1cd3dffa7",
    "type": "switch",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "Config Mode",
    "property": "error_flag",
    "propertyType": "msg",
    "rules": [
      {
        "t": "neq",
        "v": "255",
        "vt": "num"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 230,
    "y": 600,
    "wires": [
      [
        "b10b2f38b737ef92"
      ],
      [
        "eb83bf9179f7b4c0"
      ]
    ]
  },
  {
    "id": "eb83bf9179f7b4c0",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "config mode decode",
    "func": "const table_name = 'config_mode_data';\nconst { payload, b } = msg;\npayload[table_name] = payload[table_name] || {};\nconst data = payload[table_name];\n\nconst STATES = {\n    s: \"Sensing\",\n    x: \"CFG Update\",\n    r: \"Reset\",\n}\n\n// Payload is Sensor cfg update\n/*\nCFG update uplink Format:\n| Error Flag  |   sensor_sleep   |    sensor_agg     |   sensor_meas_delta     | sensor_reading_count   |    sensor_state   |    fw_ver       |\n|    255 (FF) |     2 bytes      |      1 byte       |          2 bytes        |          1 byte        |        1 byte     |    6 bytes      |\n\nSensor State:\n|  Start  |   Stop  |  Reset  |\n|   's'   |   'x'   |   'r'   |\n*/\n// Duty cycle\ndata.sensor_sleep_ms = ((b[2]<< 8) | b[1]) * 1000;    \n// Sensor Mode\ndata.sensor_agg = b[3];\n// Sensor Sampling Rate\ndata.sensor_meas_delta_ms = (b[5] << 8) | b[4];\n// Sensor number of readings per measurement\ndata.sensor_reading_count = b[6];\n// Sensor State\ndata.sensor_state = STATES[String.fromCharCode(b[7].toString())];    \n// Firmware Version\nlet major = b[8].toString();\nlet minor = b[9].toString();\nlet patch = b[10].toString();\ndata.fw_ver = \"v\".concat(major,\".\",minor,\".\",patch);\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 460,
    "y": 920,
    "wires": [
      [
        "3156963a24f356d5",
        "dd9bc5bb190f5dc0"
      ]
    ]
  },
  {
    "id": "698ea5522a9d3fa2",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "---",
    "func": "return msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1010,
    "y": 660,
    "wires": [
      [
        "fa04e5bc9d60a061"
      ]
    ]
  },
  {
    "id": "030599a254594890",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "gw solar decode",
    "func": "const table_name = 'solar_data';\nconst { payload, b } = msg;\npayload[table_name] = payload[table_name] || {};\nconst data = payload[table_name];\n\nconst sensor_table_name = 'lora_sensor_data';\npayload[sensor_table_name] = payload[sensor_table_name] || {};\nconst sensordata = payload[sensor_table_name];\n\nsensordata['batt_mv'] = ((b[1] << 8) | b[0]);\ndata['current_ma'] = ((b[3] << 8) | b[2]);\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 750,
    "y": 800,
    "wires": [
      [
        "698ea5522a9d3fa2"
      ]
    ]
  },
  {
    "id": "5d2cac28a29c5ed6",
    "type": "postgresql",
    "z": "63ec5913b540d2a2",
    "g": "9adc6d7359c13beb",
    "name": "",
    "query": "SELECT \n    pg_size_pretty(before_compression_total_bytes) as \"before compression\",\n    pg_size_pretty(after_compression_total_bytes) as \"after compression\"\nFROM hypertable_compression_stats('measurements');",
    "postgreSQLConfig": "ec8702db3a5c2dc7",
    "split": false,
    "rowsPerMsg": 1,
    "outputs": 1,
    "x": 1630,
    "y": 540,
    "wires": [
      [
        "d4c9d6d5b6d2e143"
      ]
    ]
  },
  {
    "id": "d4c9d6d5b6d2e143",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "9adc6d7359c13beb",
    "name": "debug 17",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1810,
    "y": 540,
    "wires": []
  },
  {
    "id": "3b2123d7c7dd611f",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "9adc6d7359c13beb",
    "name": "Prepare insert",
    "func": "const { \n    payload,\n    timestamp, dev_id, deployment_id, app_name, error_flag\n    \n} = msg.payload;\n\n\nconst sqlInsertObject = ({ table, schema, data }) => {\n    if(!data || !table) return;\n    const columns = Object.keys(data.reduce((d, o) => ({...o, ...d}), {}));\n    const values = data.map(d => `(${columns.map(c => N(d?.[c])).join(', ')})`).join(', ');\n    return (\n        `INSERT INTO ${schema || 'public'}.${table} (${columns}) VALUES ${values};`\n    )\n}\n\nlet queries = [];\n\nfor(let name in tables) {\n    let t = tables[name];\n    t = Array.isArray(t) ? t : [t];\n    \n    let query = sqlInsertObject({ \n        table: name,\n        schema: app_name,\n        data: t.map(d => ({ \n            dev_id, deployment_id,\n            error_flag,\n            time: timestamp,\n            ...d, \n        }))\n    })\n    queries.push(query);\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1430,
    "y": 540,
    "wires": [
      [
        "5d2cac28a29c5ed6"
      ]
    ]
  },
  {
    "id": "8aa5a2865387f144",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "c4537d577aa94bdd",
    "name": "Fieldkit POST",
    "func": "msg.headers = {};\nmsg.method = \"POST\";\nmsg.url = 'https://api.fieldkit.org/ttn/webhook?token=33af8a9e936d2ec4c217de125ccfc4b9';\nmsg.headers[\"Content-Type\"]=\"application/json\";\n\nif (msg.payload[0].measurement != \"flood-sensor\"){\n    return undefined;\n}\n\nmsg.payload[0].fields.dist_mm = parseInt(msg.payload[0].fields.dist_mm);\nmsg.payload[0].fields.lora_freq_hz = parseInt(msg.payload[0].fields.lora_freq_hz);\nmsg.payload[0].fields.f_cnt = parseInt(msg.payload[0].fields.f_cnt);\nmsg.payload[0].fields.depth_mm = parseInt(msg.payload[0].fields.depth_mm);\nmsg.payload[0].fields.depth_raw_mm = parseInt(msg.payload[0].fields.depth_raw_mm);\nmsg.payload[0].fields.depth_filt_mm = parseInt(msg.payload[0].fields.depth_filt_mm);\nmsg.payload[0].fields.depth_proc_mm = parseInt(msg.payload[0].fields.depth_proc_mm);\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1610,
    "y": 440,
    "wires": [
      [
        "c6910763e995f76a"
      ]
    ]
  },
  {
    "id": "c6910763e995f76a",
    "type": "http request",
    "z": "63ec5913b540d2a2",
    "g": "c4537d577aa94bdd",
    "name": "",
    "method": "use",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 1780,
    "y": 440,
    "wires": [
      [
        "3d8a84cc2f94b50e"
      ]
    ]
  },
  {
    "id": "3d8a84cc2f94b50e",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "c4537d577aa94bdd",
    "name": "HTTP Status",
    "func": "if(msg.statusCode >= 200 && msg.statusCode < 300){\n    msg.response_fail = false;\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1940,
    "y": 440,
    "wires": [
      []
    ]
  },
  {
    "id": "400d9dcee3aaabc1",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "c4537d577aa94bdd",
    "name": "Prepare insert",
    "func": "return msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1430,
    "y": 440,
    "wires": [
      [
        "8aa5a2865387f144"
      ]
    ]
  },
  {
    "id": "a70eea6c2d3ac2ef",
    "type": "postgresql",
    "z": "63ec5913b540d2a2",
    "g": "7d248c59cea6eb8f",
    "name": "",
    "query": "SELECT \n    pg_size_pretty(before_compression_total_bytes) as \"before compression\",\n    pg_size_pretty(after_compression_total_bytes) as \"after compression\"\nFROM hypertable_compression_stats('measurements');",
    "postgreSQLConfig": "ec8702db3a5c2dc7",
    "split": false,
    "rowsPerMsg": 1,
    "outputs": 1,
    "x": 1630,
    "y": 640,
    "wires": [
      [
        "de4b529a60542204"
      ]
    ]
  },
  {
    "id": "de4b529a60542204",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "7d248c59cea6eb8f",
    "name": "debug 18",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1810,
    "y": 640,
    "wires": []
  },
  {
    "id": "15c0295a79c1f759",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "7d248c59cea6eb8f",
    "name": "Prepare insert",
    "func": "return msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1430,
    "y": 640,
    "wires": [
      [
        "a70eea6c2d3ac2ef"
      ]
    ]
  },
  {
    "id": "3f263f0736505839",
    "type": "postgresql",
    "z": "63ec5913b540d2a2",
    "g": "4aa8585e6cc1a05a",
    "name": "",
    "query": "SELECT s.dev_id, j.deployment_id, j.median_height_mm\nFROM sensors s\nLEFT JOIN LATERAL (\n\tSELECT *\n     FROM deployments d\n     WHERE d.dev_id = s.dev_id\n\t AND d.date_down IS NULL\n     ORDER BY d.date_deployed DESC LIMIT 1\n) j ON true\nWHERE s.dev_id = '{{{ msg.dev_id }}}'",
    "postgreSQLConfig": "ec8702db3a5c2dc7",
    "split": false,
    "rowsPerMsg": 1,
    "outputs": 1,
    "x": 1030,
    "y": 240,
    "wires": [
      [
        "c5d3a19919464f9a"
      ]
    ]
  },
  {
    "id": "c4864b55d9c06278",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "4aa8585e6cc1a05a",
    "name": "Prepare query",
    "func": "msg.orig_payload = msg.payload;\nreturn msg;\n// https://stackoverflow.com/questions/24042359/how-to-join-only-one-row-in-joined-table-with-postgres",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 860,
    "y": 240,
    "wires": [
      [
        "3f263f0736505839"
      ]
    ]
  },
  {
    "id": "c5d3a19919464f9a",
    "type": "function",
    "z": "63ec5913b540d2a2",
    "g": "4aa8585e6cc1a05a",
    "name": "merge payload",
    "func": "const { \n    dev_id, deployment_id, median_height_mm\n} = msg.payload?.[0] || {};\n\nreturn {\n    ...msg,\n    payload: msg.orig_payload,\n    deployment_id,\n    night_median: median_height_mm,\n    common_table_data: {\n        time: msg.time,\n        deployment_id,\n        night_median: median_height_mm,\n    },\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1210,
    "y": 240,
    "wires": [
      [
        "4d56fb87f74cc417",
        "4e78e8e1cd3dffa7",
        "54748c0a68261926",
        "08aa1fc2c62337f9"
      ]
    ]
  },
  {
    "id": "4d56fb87f74cc417",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "4aa8585e6cc1a05a",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "deployment_id",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1450,
    "y": 140,
    "wires": []
  },
  {
    "id": "b43cfa81b9314d3c",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "49d4aa47d32b30f6",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "dev_id",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 610,
    "y": 280,
    "wires": []
  },
  {
    "id": "fa04e5bc9d60a061",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "",
    "active": false,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "app_name",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1060,
    "y": 700,
    "wires": []
  },
  {
    "id": "3156963a24f356d5",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "true",
    "targetType": "full",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 510,
    "y": 880,
    "wires": []
  },
  {
    "id": "8d465086c3ef332a",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "depth filters",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "msg.payload.depth_data.depth_filt_mm \t& \" | \" & \tmsg.payload.depth_data.depth_proc_mm\t& \" | \" & \tmsg.payload.depth_data.depth_filt_stages_applied",
    "targetType": "jsonata",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1110,
    "y": 460,
    "wires": []
  },
  {
    "id": "dc63b3fdfca9e21b",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "deployment_id",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 750,
    "y": 540,
    "wires": []
  },
  {
    "id": "3b863b4807cf0453",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "deployment_id",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 750,
    "y": 640,
    "wires": []
  },
  {
    "id": "071ee8aa8bd88a27",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "deployment_id",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 750,
    "y": 740,
    "wires": []
  },
  {
    "id": "037e6e65201aee12",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "deployment_id",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 750,
    "y": 840,
    "wires": []
  },
  {
    "id": "dd9bc5bb190f5dc0",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "deployment_id",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 470,
    "y": 960,
    "wires": []
  },
  {
    "id": "3b99b5dd48f7315b",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "depth filters",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "msg.payload.depth_data.depth_filt_mm \t& \" | \" & \tmsg.payload.depth_data.depth_proc_mm\t& \" | \" & \tmsg.payload.depth_data.depth_filt_stages_applied",
    "targetType": "jsonata",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 950,
    "y": 460,
    "wires": []
  },
  {
    "id": "907eb2768e2bb846",
    "type": "switch",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "nonzero",
    "property": "payload.depth_data.depth_proc_mm",
    "propertyType": "msg",
    "rules": [
      {
        "t": "null"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 1100,
    "y": 520,
    "wires": [
      [
        "4c8ddb9156f5c71d"
      ],
      []
    ]
  },
  {
    "id": "4c8ddb9156f5c71d",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "58545360d7955b4b",
    "name": "nonzero",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "true",
    "targetType": "full",
    "statusVal": "deployment_id",
    "statusType": "msg",
    "x": 1120,
    "y": 560,
    "wires": []
  },
  {
    "id": "54748c0a68261926",
    "type": "switch",
    "z": "63ec5913b540d2a2",
    "g": "4aa8585e6cc1a05a",
    "name": "no depid",
    "property": "deployment_id",
    "propertyType": "msg",
    "rules": [
      {
        "t": "null"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 1420,
    "y": 260,
    "wires": [
      [
        "61bebd9f7ff1dde8"
      ]
    ]
  },
  {
    "id": "61bebd9f7ff1dde8",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "4aa8585e6cc1a05a",
    "name": "dev_id",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "dev_id & \" | \" & app_name",
    "targetType": "jsonata",
    "statusVal": "dev_id",
    "statusType": "auto",
    "x": 1550,
    "y": 260,
    "wires": []
  },
  {
    "id": "08aa1fc2c62337f9",
    "type": "debug",
    "z": "63ec5913b540d2a2",
    "g": "4aa8585e6cc1a05a",
    "name": "dev_id",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "dev_id & \" | \" & app_name",
    "targetType": "jsonata",
    "statusVal": "dev_id",
    "statusType": "auto",
    "x": 1410,
    "y": 200,
    "wires": []
  },
  {
    "id": "62f132ed4b7660a9",
    "type": "http request",
    "z": "59b6ea3e0dab2122",
    "name": "MN request",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://api.nysmesonet.org/data/dynserv/coned/5min/nyc/{{{timerange}}}?{{{payload}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 490,
    "y": 140,
    "wires": [
      [
        "b84c28e164baf1e6",
        "634030652944940b"
      ]
    ]
  },
  {
    "id": "4f87538ceb946c0d",
    "type": "inject",
    "z": "59b6ea3e0dab2122",
    "name": "Inject MN station URLs",
    "props": [
      {
        "p": "timerange",
        "v": "$join(\t   [\t       $fromMillis($millis() - 240000),\t       $fromMillis($millis())\t   ],\t   '/'\t)",
        "vt": "jsonata"
      },
      {
        "p": "payload"
      }
    ],
    "repeat": "10",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "$join(\t   [\t       'variables[]=tair@degC',\t       'variables[]=tslo@degC',\t       'variables[]=relh@percent',\t       'variables[]=precip:incremental@mm',\t       'variables[]=precip@mm',\t       'variables[]=precip_local@mm',\t       'variables[]=precip_total@mm',\t       'variables[]=precip_max_intensity@mm/min',\t       'variables[]=winds_sonic@m/s',\t       'variables[]=srad@W/m^2',\t       'variables[]=pres@millibars',\t       'variables[]=snow_depth@mm',\t       'variables[]=lat@degrees',\t       'variables[]=lon@degrees'\t   ],\t   '&'\t)",
    "payloadType": "jsonata",
    "x": 210,
    "y": 200,
    "wires": [
      [
        "62f132ed4b7660a9"
      ]
    ]
  },
  {
    "id": "bf77b6cbe5bb5efb",
    "type": "csv",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "sep": ",",
    "hdrin": true,
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 470,
    "y": 200,
    "wires": [
      [
        "c76e21c56c558be6"
      ]
    ]
  },
  {
    "id": "b84c28e164baf1e6",
    "type": "switch",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "property": "payload",
    "propertyType": "msg",
    "rules": [
      {
        "t": "nempty"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 650,
    "y": 140,
    "wires": [
      [
        "bf77b6cbe5bb5efb"
      ]
    ]
  },
  {
    "id": "c76e21c56c558be6",
    "type": "function",
    "z": "59b6ea3e0dab2122",
    "name": "Check for empty",
    "func": "cnt = 0;\n\nfor (const station of msg.payload){\n    cnt += Object.keys(station).length;\n}\n\nif (cnt == msg.payload.length * 4)\n    return '';\nelse\n    return msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 630,
    "y": 200,
    "wires": [
      [
        "3f60b54328ff9718"
      ]
    ]
  },
  {
    "id": "3f60b54328ff9718",
    "type": "switch",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "property": "payload",
    "propertyType": "msg",
    "rules": [
      {
        "t": "nempty"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 790,
    "y": 200,
    "wires": [
      [
        "ed9c3a5a7b9aedf2"
      ]
    ]
  },
  {
    "id": "742bda0e4b0972e6",
    "type": "inject",
    "z": "59b6ea3e0dab2122",
    "name": "Inject NWS station URLs",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "60",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[\t   'https://api.weather.gov/stations/KJFK/observations/latest',\t   'https://api.weather.gov/stations/KLGA/observations/latest',\t   'https://api.weather.gov/stations/KNYC/observations/latest'\t]",
    "payloadType": "jsonata",
    "x": 210,
    "y": 240,
    "wires": [
      [
        "567665bec1f6ee11"
      ]
    ]
  },
  {
    "id": "567665bec1f6ee11",
    "type": "split",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": true,
    "addname": "",
    "x": 410,
    "y": 240,
    "wires": [
      [
        "49ad4015de5d0710"
      ]
    ]
  },
  {
    "id": "bba0e1b1684e109b",
    "type": "http request",
    "z": "59b6ea3e0dab2122",
    "name": "NWS request",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 770,
    "y": 240,
    "wires": [
      [
        "4c120bcceeb78769"
      ]
    ]
  },
  {
    "id": "49ad4015de5d0710",
    "type": "change",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "rules": [
      {
        "t": "move",
        "p": "payload",
        "pt": "msg",
        "to": "url",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 590,
    "y": 240,
    "wires": [
      [
        "bba0e1b1684e109b"
      ]
    ]
  },
  {
    "id": "4c120bcceeb78769",
    "type": "switch",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "property": "payload['properties']['rawMessage']",
    "propertyType": "msg",
    "rules": [
      {
        "t": "nnull"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 910,
    "y": 240,
    "wires": [
      [
        "e5a534afcfdc4833"
      ]
    ]
  },
  {
    "id": "4871d24c8081c6c1",
    "type": "influxdb batch",
    "z": "59b6ea3e0dab2122",
    "influxdb": "4b9a03aed4358412",
    "precision": "",
    "retentionPolicy": "",
    "name": "NWS weather data insert",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "floodnet",
    "bucket": "floodnet-live",
    "x": 1370,
    "y": 260,
    "wires": []
  },
  {
    "id": "e5a534afcfdc4833",
    "type": "function",
    "z": "59b6ea3e0dab2122",
    "name": "Setup NWS payload",
    "func": "var data_payload = msg.payload['properties'];\nvar station_id = data_payload['rawMessage'].slice(0,4).trim().toLowerCase();\nvar sensor_id = 'nws-' + station_id;\nvar location_info = msg.payload['geometry'];\nvar ts = Date.parse(data_payload['timestamp']);\n// Quality control checks\n// https://madis.ncep.noaa.gov/madis_sfc_qc_notes.shtml\n\nvar fields = {\n            // timestamp: ts,\n            temp_c: data_payload['temperature']['value'],\n            wind_dir_deg: data_payload['windDirection']['value'],\n            wind_speed_kmh: data_payload['windSpeed']['value'],\n            visibility: data_payload['visibility']['value'],\n            baro_pres_pa: data_payload['barometricPressure']['value'],\n            precip_last_hour_mm: data_payload['precipitationLastHour']['value'] * 1000,\n            relhumid_percent: +data_payload['relativeHumidity']['value'],\n            windchill_c: +data_payload['windChill']['value']\n        };\n        \nvar tags = {\n            weather_group: 'nws',\n            sensor_id: sensor_id,\n            lat: location_info['coordinates'][1],\n            lng: location_info['coordinates'][0],\n            sensor_types: 'temp,humid,precip,pres,wind',\n            sensor_name: 'NWS ' + station_id.slice(1,4).toUpperCase() + ' Weather station (' + station_id.toUpperCase() + ')'\n        };\n        \nmsg.payload = [\n    {\n        measurement: 'weather',\n        fields,\n        tags,\n        timestamp: ts\n    }\n    ];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1100,
    "y": 240,
    "wires": [
      [
        "4871d24c8081c6c1"
      ]
    ]
  },
  {
    "id": "9f175b1da3175ea9",
    "type": "function",
    "z": "59b6ea3e0dab2122",
    "name": "Setup MN payload",
    "func": "var data_payload = msg.payload;\nvar station_id = data_payload['station'];\nvar sensor_id = 'nyc-micronet-' + station_id.toLowerCase();\n// var location_info = msg.payload['geometry'];\nvar ts = Date.parse(data_payload['datetime']);\n\nvar fields = {\n            // timestamp: ts,\n            temp_c: data_payload['temp_2m [degC]'] || undefined,\n            temp_slow_c: data_payload['tslo [degC]'] || undefined,\n            wind_speed_kmh: (data_payload['avg_wind_speed_sonic [m/s]'] * 3.6) || undefined,\n            baro_pres_pa: (data_payload['station_pressure [millibars]'] * 100) || undefined,\n            precip_increm_mm: data_payload['precip_incremental [mm]'] || undefined,\n            max_precip_last_5min_mm_per_min: data_payload['precip_max_intensity [mm/min]'] || undefined,\n            relhumid_percent: data_payload['relative_humidity [percent]'] || undefined,\n            wind_dir_deg: data_payload['wind_direction_sonic [degrees]'] || undefined,\n            solar_insol_wm2: data_payload['solar_insolation [W/m^2]'] || undefined,\n            snow_depth_mm: data_payload['snow_depth [mm]'] || undefined\n        };\n        \nvar tags = {\n            weather_group: 'micronet',\n            sensor_id: sensor_id,\n            lat: data_payload['lat [degrees]'],\n            lng: data_payload['lon [degrees]'],\n            sensor_types: 'temp,humid,precip,pres,wind,solar',\n            sensor_name: 'NYC Micronet weather station (' + station_id + ')'\n        };\n        \nmsg.payload = [\n    {\n        measurement: 'weather',\n        fields,\n        tags,\n        timestamp: ts\n    }\n    ];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1090,
    "y": 200,
    "wires": [
      [
        "51f38eac8def364f",
        "ceac54f342a9e889",
        "47af552e8a39de77"
      ]
    ]
  },
  {
    "id": "ed9c3a5a7b9aedf2",
    "type": "split",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 910,
    "y": 200,
    "wires": [
      [
        "9f175b1da3175ea9"
      ]
    ]
  },
  {
    "id": "51f38eac8def364f",
    "type": "influxdb batch",
    "z": "59b6ea3e0dab2122",
    "influxdb": "4b9a03aed4358412",
    "precision": "",
    "retentionPolicy": "",
    "name": "NYC Micronet weather data insert",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "floodnet",
    "bucket": "floodnet-live",
    "x": 1400,
    "y": 180,
    "wires": []
  },
  {
    "id": "4c44e3abc4fcd1eb",
    "type": "http request",
    "z": "59b6ea3e0dab2122",
    "name": "Open Weather API",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://api.openweathermap.org/data/2.5/onecall?lat={{{lat_lon.0}}}&lon={{{lat_lon.1}}}&exclude=hourly,daily&appid={{{appid}}}&units=metric",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 510,
    "y": 400,
    "wires": [
      [
        "f9137c59125d3c0d"
      ]
    ]
  },
  {
    "id": "c9f27f5d47a10a45",
    "type": "inject",
    "z": "59b6ea3e0dab2122",
    "name": "Inject OWM locations",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "3480",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[\t   [40.680092,-74.014416],\t   [40.676195,-73.986974],\t   [40.598504,-73.970988],\t   [40.575299,-73.996754],\t   [40.653567,-73.923218],\t   [40.657421,-73.830684],\t   [40.611045,-73.821752],\t   [40.714464,-73.749413],\t   [40.683750,-73.890956],\t   [40.769089,-73.925311],\t   [40.774001,-73.823847],\t   [40.594925,-74.089129],\t   [40.533894,-74.197005],\t   [40.613171,-74.159901],\t   [40.716077,-74.007504],\t   [40.724654,-73.975840],\t   [40.802544,-73.948427],\t   [40.865397,-73.923453],\t   [40.820639,-73.913116],\t   [40.829500,-73.859615],\t   [40.882832,-73.851669],\t   [40.846075,-73.787256],\t   [40.775942,-73.872940]\t]",
    "payloadType": "jsonata",
    "x": 220,
    "y": 280,
    "wires": [
      [
        "410c903622f6c8e2"
      ]
    ]
  },
  {
    "id": "e8f6d2b22d197f13",
    "type": "credentials",
    "z": "59b6ea3e0dab2122",
    "name": "OWAPI and G key store",
    "props": [
      {
        "value": "appid",
        "type": "msg"
      },
      {
        "value": "gapikey",
        "type": "msg"
      }
    ],
    "x": 270,
    "y": 440,
    "wires": [
      [
        "51effb339ea4f74e"
      ]
    ]
  },
  {
    "id": "0193d0cc4010e60f",
    "type": "function",
    "z": "59b6ea3e0dab2122",
    "name": "OWM setup payload",
    "func": "var weather_payload = msg.owm;\nvar revgeocode_payload = msg.revgeocode;\nvar meas_array = [];\nvar forecast_mins = 60;\nvar sensor_id = 'owm-' + revgeocode_payload.osm_id;\nvar sensor_name = revgeocode_payload.address.neighbourhood + ' - openweathermap.org (' + sensor_id + ')';\n\nvar rain_amnt,snow_amnt = null;\n\nif (weather_payload.current.rain){\n    rain_amnt = weather_payload.current.rain['1h'];\n}\n\nif (weather_payload.current.snow){\n    snow_amnt = weather_payload.current.snow['1h'];\n}\n\n\nvar cur_weather = {\n   measurement: 'weather',\n      fields: {\n        temp_c: weather_payload.current['temp'],\n        baro_pres_pa: weather_payload.current['pressure'] * 1000,\n        relhumid_percent: weather_payload.current['humidity'],\n        cloud_percent: weather_payload.current['clouds'],\n        wind_speed_kmh: weather_payload.current['wind_speed'] * 3.6,\n        wind_dir_deg: weather_payload.current['wind_deg'],\n        precip_last_hour_mm: rain_amnt || undefined,\n        snow_last_hour_mm: snow_amnt || undefined\n      },\n      tags:{\n        weather_group: 'open_weather_map_forecast',\n        sensor_id: sensor_id,\n        lat: weather_payload.lat,\n        lng: weather_payload.lon,\n        sensor_types: 'temp,humid,precip,pres,wind,solar',\n        sensor_name: sensor_name,\n        sensor_address_zip: revgeocode_payload.address.postcode,\n        sensor_address_borough: revgeocode_payload.address.suburb,\n        sensor_address_state: revgeocode_payload.address.state,\n        sensor_address_country: revgeocode_payload.address.country,\n        sensor_address_house_number: revgeocode_payload.address.house_number,\n        sensor_address_street: revgeocode_payload.address.road,\n        sensor_address_neighbourhood: revgeocode_payload.address.neighbourhood\n      },\n      timestamp: weather_payload.current['dt'] * 1000\n};\n\nmeas_array.push(cur_weather);\n\nif (weather_payload.minutely){\n    for (var i = 0; i < forecast_mins; i++) {\n        var min_item = weather_payload.minutely[i];\n        var min_entry = {\n          measurement: 'weather',\n          fields: {\n            precip_forecast_last_min_mm: min_item['precipitation']\n          },\n          tags:{\n            weather_group: 'open_weather_map_forecast',\n            sensor_id: sensor_id,\n            lat: weather_payload.lat,\n            lng: weather_payload.lon,\n            sensor_types: 'temp,humid,precip,pres,wind,solar',\n            sensor_name: sensor_name,\n            sensor_address_zip: revgeocode_payload.address.postcode,\n            sensor_address_borough: revgeocode_payload.address.suburb,\n            sensor_address_state: revgeocode_payload.address.state,\n            sensor_address_country: revgeocode_payload.address.country,\n            sensor_address_house_number: revgeocode_payload.address.house_number,\n            sensor_address_street: revgeocode_payload.address.road,\n            sensor_address_neighbourhood: revgeocode_payload.address.neighbourhood\n          },\n          timestamp: min_item['dt'] * 1000\n        };\n        meas_array.push(min_entry);\n    }\n}\n\nmsg.payload = meas_array;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1100,
    "y": 360,
    "wires": [
      [
        "2ea12566e4a0ddc7"
      ]
    ]
  },
  {
    "id": "f03ba767c129f69b",
    "type": "http request",
    "z": "59b6ea3e0dab2122",
    "name": "Rev geocode",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://nominatim.openstreetmap.org/reverse?format=json&lat={{{lat_lon.0}}}&lon={{{lat_lon.1}}}&zoom=18&addressdetails=1",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 710,
    "y": 360,
    "wires": [
      [
        "e45925d81c5ddfda"
      ]
    ]
  },
  {
    "id": "410c903622f6c8e2",
    "type": "split",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 250,
    "y": 360,
    "wires": [
      [
        "8aa86b86eaddc827"
      ]
    ]
  },
  {
    "id": "8aa86b86eaddc827",
    "type": "delay",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "50",
    "nbRateUnits": "1",
    "rateUnits": "minute",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "allowrate": false,
    "outputs": 1,
    "x": 240,
    "y": 400,
    "wires": [
      [
        "e8f6d2b22d197f13"
      ]
    ]
  },
  {
    "id": "20fd99b272aaccde",
    "type": "change",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "rules": [
      {
        "t": "move",
        "p": "payload",
        "pt": "msg",
        "to": "owm",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 570,
    "y": 480,
    "wires": [
      [
        "f03ba767c129f69b"
      ]
    ]
  },
  {
    "id": "e45925d81c5ddfda",
    "type": "change",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "rules": [
      {
        "t": "move",
        "p": "payload",
        "pt": "msg",
        "to": "revgeocode",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 890,
    "y": 360,
    "wires": [
      [
        "0193d0cc4010e60f"
      ]
    ]
  },
  {
    "id": "51effb339ea4f74e",
    "type": "change",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "rules": [
      {
        "t": "move",
        "p": "payload",
        "pt": "msg",
        "to": "lat_lon",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 470,
    "y": 360,
    "wires": [
      [
        "4c44e3abc4fcd1eb"
      ]
    ]
  },
  {
    "id": "2ea12566e4a0ddc7",
    "type": "influxdb batch",
    "z": "59b6ea3e0dab2122",
    "influxdb": "4b9a03aed4358412",
    "precision": "",
    "retentionPolicy": "",
    "name": "OWM weather data insert",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "floodnet",
    "bucket": "floodnet-live",
    "x": 1370,
    "y": 340,
    "wires": []
  },
  {
    "id": "f9137c59125d3c0d",
    "type": "switch",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "property": "payload.current",
    "propertyType": "msg",
    "rules": [
      {
        "t": "nempty"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 510,
    "y": 440,
    "wires": [
      [
        "20fd99b272aaccde"
      ]
    ]
  },
  {
    "id": "ceac54f342a9e889",
    "type": "function",
    "z": "59b6ea3e0dab2122",
    "name": "Fieldkit POST",
    "func": "msg.headers = {};\nmsg.method = \"POST\";\nmsg.url = 'https://api.fieldkit.org/ttn/webhook?token=33af8a9e936d2ec4c217de125ccfc4b9';\nmsg.headers[\"Content-Type\"]=\"application/json\";\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1340,
    "y": 220,
    "wires": [
      [
        "1948c11829f1050f"
      ]
    ]
  },
  {
    "id": "1948c11829f1050f",
    "type": "http request",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "method": "use",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 1510,
    "y": 220,
    "wires": [
      [
        "821cdc05c82fbd0a"
      ]
    ]
  },
  {
    "id": "821cdc05c82fbd0a",
    "type": "function",
    "z": "59b6ea3e0dab2122",
    "name": "HTTP Status",
    "func": "if(msg.statusCode >= 200 && msg.statusCode < 300){\n    msg.response_fail = false;\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1670,
    "y": 220,
    "wires": [
      []
    ]
  },
  {
    "id": "c772df430fe6c58c",
    "type": "debug",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 890,
    "y": 980,
    "wires": []
  },
  {
    "id": "23e895c53f799791",
    "type": "debug",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 690,
    "y": 1000,
    "wires": []
  },
  {
    "id": "634030652944940b",
    "type": "debug",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 870,
    "y": 80,
    "wires": []
  },
  {
    "id": "96953e9380f6b289",
    "type": "debug",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload[0].tags",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1220,
    "y": 40,
    "wires": []
  },
  {
    "id": "47af552e8a39de77",
    "type": "function",
    "z": "59b6ea3e0dab2122",
    "name": "Store if it's raining (for filters)",
    "func": "// node.warn(msg.payload[0].fields)\nconst rain = msg.payload[0].fields.max_precip_last_5min_mm_per_min;\nconst t = msg.payload[0].timestamp;\n\nglobal.get('rainQueue').push(rain, t);\n// node.warn(global.get('rainQueue'))\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "// Code added here will be run once\n// whenever the node is started.\nclass RainQueue extends Array {\n    constructor(maxage=60*60) {\n        super();\n        this.maxage = maxage;\n    }\n    push(rained, t) {\n        const now = Date.now()\n        \n        // append sorted\n        if(rained) {\n            if(!this.length || t > this[this.length-1][1]) {\n                super.push([rained, t]);\n            }\n            else {\n                let i=this.length-1;\n                for(;t > this[i][1] && i>0;i--) { }\n                this.splice(i, 0, [rained, t]);\n            }\n        }\n        \n        // trim off old samples\n        while(this.length && now - this[0][1] > this.maxage*1000) {\n            this.shift();\n        }\n    }\n    anyRain() { return this.some(r => r[0]) }\n}\n\n\nconst rainQ = global.get('rainQueue') || new RainQueue(60 * 60);\nglobal.set('rainQueue', rainQ)",
    "finalize": "",
    "libs": [],
    "x": 1380,
    "y": 140,
    "wires": [
      []
    ]
  },
  {
    "id": "e13448f276939e1c",
    "type": "switch",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "property": "payload[0].fields.max_precip_last_5min_mm_per_min",
    "propertyType": "msg",
    "rules": [
      {
        "t": "neq",
        "v": "undefined",
        "vt": "jsonata"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 1310,
    "y": 100,
    "wires": [
      [
        "39a7a2d71fd3d93e"
      ]
    ]
  },
  {
    "id": "39a7a2d71fd3d93e",
    "type": "debug",
    "z": "59b6ea3e0dab2122",
    "name": "debug 9",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload[0].fields.max_precip_last_5min_mm_per_min",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1460,
    "y": 100,
    "wires": []
  },
  {
    "id": "e2b96ffd5aebf49a",
    "type": "debug",
    "z": "59b6ea3e0dab2122",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1030,
    "y": 120,
    "wires": []
  },
  {
    "id": "9637d78579cb1b2b",
    "type": "inject",
    "z": "e0603b84198efa0a",
    "name": "Inject station_ids",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "180",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[\t    8518750,\t    8516945,\t    8531680\t]",
    "payloadType": "jsonata",
    "x": 130,
    "y": 40,
    "wires": [
      [
        "690cfc0fd6894019"
      ]
    ]
  },
  {
    "id": "478c541fff4fedfa",
    "type": "http request",
    "z": "e0603b84198efa0a",
    "name": "NOAA tide API",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter?product=water_level&application=NOS.COOPS.TAC.WL&date=latest&datum=NAVD&station={{{payload}}}&time_zone=gmt&units=metric&format=json",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 440,
    "y": 40,
    "wires": [
      [
        "71134cb878e2e45b"
      ]
    ]
  },
  {
    "id": "690cfc0fd6894019",
    "type": "split",
    "z": "e0603b84198efa0a",
    "name": "",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 290,
    "y": 40,
    "wires": [
      [
        "478c541fff4fedfa"
      ]
    ]
  },
  {
    "id": "71134cb878e2e45b",
    "type": "function",
    "z": "e0603b84198efa0a",
    "name": "payload",
    "func": "var data_payload = msg.payload.data[0];\n\nif (data_payload === undefined){\n    msg.payload = null;\n    return msg;\n}\n\nvar station_id = msg.payload.metadata.id;\nvar sensor_id = 'noaa-tidal-' + station_id;\nvar sensor_name = msg.payload.metadata.name + ' (' + station_id + ')';\nvar lat = parseFloat(msg.payload.metadata.lat);\nvar lng = parseFloat(msg.payload.metadata.lon);\nvar ts = Date.parse(data_payload.t + ' GMT');\n\nvar fields = {\n            navd88_mm: Math.round(parseFloat(data_payload.v) * 1000) + 'i' || undefined\n        };\n        \nvar tags = {\n            sensor_id: sensor_id,\n            lat: lat,\n            lng: lng,\n            sensor_types: 'tide',\n            sensor_name: sensor_name\n        };\n        \nmsg.influx_payload = [\n    {\n        measurement: 'tide',\n        fields,\n        tags,\n        timestamp: ts\n    }\n    ];\n\nmsg.dev_id = sensor_id;\nmsg.lat = lat;\nmsg.lng = lng;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 600,
    "y": 40,
    "wires": [
      [
        "7021700bfe7cd70a"
      ]
    ]
  },
  {
    "id": "4d2ae3bb71a480eb",
    "type": "influxdb batch",
    "z": "e0603b84198efa0a",
    "influxdb": "4b9a03aed4358412",
    "precision": "",
    "retentionPolicy": "",
    "name": "Tidal data insert",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "floodnet",
    "bucket": "floodnet-live",
    "x": 300,
    "y": 420,
    "wires": []
  },
  {
    "id": "bb63f3f9f599785f",
    "type": "inject",
    "z": "e0603b84198efa0a",
    "name": "Inject station_ids",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "180",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[\t   \"01311875\",\t   \"01311850\",\t   \"01311145\",\t   \"01376562\",\t   \"01311143\",\t   \"404609073452101\",\t   \"405119073551401\",\t   \"01310740\",\t   \"01396060\",\t   \"01310521\"\t]",
    "payloadType": "jsonata",
    "x": 130,
    "y": 80,
    "wires": [
      [
        "0dca1a125cfcdcdd"
      ]
    ]
  },
  {
    "id": "0dca1a125cfcdcdd",
    "type": "split",
    "z": "e0603b84198efa0a",
    "name": "",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 290,
    "y": 80,
    "wires": [
      [
        "ae046715aba47672"
      ]
    ]
  },
  {
    "id": "ae046715aba47672",
    "type": "http request",
    "z": "e0603b84198efa0a",
    "name": "USGS tide API",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://waterservices.usgs.gov/nwis/iv/?format=json&sites={{{payload}}}&parameterCd=62620&siteStatus=all&period=PT1H",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 440,
    "y": 80,
    "wires": [
      [
        "f39edec5bd26aecf"
      ]
    ]
  },
  {
    "id": "7cf54d59c09487d0",
    "type": "function",
    "z": "e0603b84198efa0a",
    "name": "",
    "func": "if (msg.payload.sites === undefined || Object.keys(msg.payload.sites).length === 0){\n   return undefined;\n}\n\n\nvar data_payload = msg.payload.sites[0];\nvar station_id = data_payload.site_no;\nvar sensor_id = 'usgs-tidal-' + station_id;\nvar sensor_name = data_payload.station_nm;\nvar lat = data_payload.dec_lat_va;\nvar lng = data_payload.dec_long_va;\nvar ts = Date.parse(data_payload.stage_dt + ' ' + data_payload.tz_cd);\n\nvar fields = {\n            stage_mm: data_payload.stage * 304.8 || undefined\n        };\n        \nvar tags = {\n            sensor_id: sensor_id,\n            lat: lat,\n            lng: lng,\n            sensor_types: 'tide',\n            sensor_name: sensor_name\n        };\n        \nmsg.payload = [\n    {\n        measurement: 'tide',\n        fields,\n        tags,\n        timestamp: ts\n    }\n    ];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 480,
    "y": 660,
    "wires": [
      []
    ]
  },
  {
    "id": "44fac76d4e932ad9",
    "type": "influxdb batch",
    "z": "e0603b84198efa0a",
    "influxdb": "4b9a03aed4358412",
    "precision": "",
    "retentionPolicy": "",
    "name": "Tidal data insert",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "floodnet",
    "bucket": "floodnet-live",
    "x": 660,
    "y": 640,
    "wires": []
  },
  {
    "id": "7c9eefa386d25375",
    "type": "http request",
    "z": "e0603b84198efa0a",
    "name": "NOAA VDATUM API",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://vdatum.noaa.gov/vdatumweb/api/tidal?lon={{{lng}}}&lat={{{lat}}}&t_v_frame={{{payload}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 420,
    "y": 160,
    "wires": [
      [
        "560959ca8c8e9232"
      ]
    ]
  },
  {
    "id": "d6295bc7bcba1302",
    "type": "file in",
    "z": "e0603b84198efa0a",
    "name": "Read datum file",
    "filename": "/data/sensor_meta/datum.txt",
    "filenameType": "str",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "none",
    "allProps": false,
    "x": 920,
    "y": 60,
    "wires": [
      [
        "61d22faeaf35d53b"
      ]
    ]
  },
  {
    "id": "61d22faeaf35d53b",
    "type": "function",
    "z": "e0603b84198efa0a",
    "name": "",
    "func": "let lines = msg.payload.split(\"\\n\");\n\nmsg.datums = [\"mhhw\", \"mllw\"];\n\nmsg.found_match = false;\n\nlines.forEach((line, index) => {\n    var line_parts = line.split(\",\");\n    \n    if (line_parts[0] == msg.dev_id) {\n        msg.datum_payload = [];\n        msg.datums.forEach((datum_entry, datum_index) => {\n            msg.datum_payload.push({\"tar_vertical_frame\": datum_entry, \"tar_height\": line_parts[datum_index + 1]});\n        });\n        msg.found_match = true;\n    }\n});\n\nmsg.payload = msg.datums;\n\nmsg.lines = lines;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1080,
    "y": 60,
    "wires": [
      [
        "3ebc70864470016e"
      ]
    ]
  },
  {
    "id": "dc74c528e0e4af5b",
    "type": "file",
    "z": "e0603b84198efa0a",
    "name": "Write datum file",
    "filename": "/data/sensor_meta/datum.txt",
    "appendNewline": false,
    "createDir": true,
    "overwriteFile": "true",
    "encoding": "none",
    "x": 740,
    "y": 380,
    "wires": [
      []
    ]
  },
  {
    "id": "a367f5783c8238ec",
    "type": "split",
    "z": "e0603b84198efa0a",
    "name": "",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 230,
    "y": 160,
    "wires": [
      [
        "7c9eefa386d25375",
        "95b86fc3e0052b27"
      ]
    ]
  },
  {
    "id": "560959ca8c8e9232",
    "type": "join",
    "z": "e0603b84198efa0a",
    "name": "",
    "mode": "auto",
    "build": "object",
    "property": "payload",
    "propertyType": "msg",
    "key": "topic",
    "joiner": "\\n",
    "joinerType": "str",
    "accumulate": true,
    "timeout": "",
    "count": "",
    "reduceRight": false,
    "reduceExp": "",
    "reduceInit": "",
    "reduceInitType": "",
    "reduceFixup": "",
    "x": 610,
    "y": 160,
    "wires": [
      [
        "7d5ef9f277d6d75b"
      ]
    ]
  },
  {
    "id": "7d5ef9f277d6d75b",
    "type": "function",
    "z": "e0603b84198efa0a",
    "name": "",
    "func": "\n\nmsg.influx_payload.forEach(function (item, val_index) {\n    msg.payload.forEach((datum_entry, datum_index) => {\n        let datum_offset = parseFloat(datum_entry.tar_height) * 1000;\n        let navd88_val = parseInt(item.fields.navd88_mm);\n        let datum_val = Math.round(navd88_val + datum_offset) + 'i';\n        msg.influx_payload[val_index].fields[datum_entry.tar_vertical_frame + \"_mm\"] = datum_val;\n        // new_entry += ',' + datum_entry.tar_height;\n    });\n});\n\n\n\n// msg.lines.push(new_entry);\n\n// const clean_lines = msg.lines.filter(element => {\n//   return element !== '';\n// });\n\n// msg.lines = clean_lines.join(\"\\n\");\n\nmsg.payload = msg.influx_payload;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 120,
    "y": 380,
    "wires": [
      [
        "b37ac0e05846e70f",
        "4d2ae3bb71a480eb",
        "df20dc39e5cd477f"
      ]
    ]
  },
  {
    "id": "3ebc70864470016e",
    "type": "switch",
    "z": "e0603b84198efa0a",
    "name": "",
    "property": "found_match",
    "propertyType": "msg",
    "rules": [
      {
        "t": "false"
      },
      {
        "t": "true"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 90,
    "y": 160,
    "wires": [
      [
        "a367f5783c8238ec"
      ],
      [
        "c226992612d4e581"
      ]
    ]
  },
  {
    "id": "c928f08217446419",
    "type": "change",
    "z": "e0603b84198efa0a",
    "name": "",
    "rules": [
      {
        "t": "move",
        "p": "lines",
        "pt": "msg",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 480,
    "y": 380,
    "wires": [
      []
    ]
  },
  {
    "id": "b37ac0e05846e70f",
    "type": "switch",
    "z": "e0603b84198efa0a",
    "name": "new entries",
    "property": "found_match",
    "propertyType": "msg",
    "rules": [
      {
        "t": "false"
      },
      {
        "t": "true"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 290,
    "y": 380,
    "wires": [
      [
        "c928f08217446419"
      ],
      []
    ]
  },
  {
    "id": "c226992612d4e581",
    "type": "change",
    "z": "e0603b84198efa0a",
    "name": "",
    "rules": [
      {
        "t": "move",
        "p": "datum_payload",
        "pt": "msg",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 300,
    "y": 200,
    "wires": [
      [
        "7d5ef9f277d6d75b"
      ]
    ]
  },
  {
    "id": "e3bb4c0c491c9929",
    "type": "debug",
    "z": "e0603b84198efa0a",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 930,
    "y": 580,
    "wires": []
  },
  {
    "id": "f39edec5bd26aecf",
    "type": "function",
    "z": "e0603b84198efa0a",
    "name": "payload",
    "func": "var data_payload = msg.payload.value.timeSeries[0];\n// node.warn(data_payload.sourceInfo.siteName);\nif (data_payload === undefined){\n    msg.payload = null;\n    return msg;\n}\n\nvar station_id = data_payload.sourceInfo.siteCode[0].value;\n\nvar sensor_id = 'usgs-tidal-' + station_id;\nvar sensor_name = data_payload.sourceInfo.siteName + ' (' + station_id + ')';\nvar lat = parseFloat(data_payload.sourceInfo.geoLocation.geogLocation.latitude);\nvar lng = parseFloat(data_payload.sourceInfo.geoLocation.geogLocation.longitude);\n\n// Get the correct values array idx as one is measured and the other is predicted\nvar values_idx = 0;\nif (data_payload.values[0].method[0].methodDescription.includes(\"prediction\")){\n    values_idx = 1;\n    \n}\n\n\n\nvar data_values = data_payload.values[values_idx].value;\n\nvar num_of_vals = data_values.length;\nvar last_value = data_values[num_of_vals - 1];\n\nmsg.influx_payload = [];\n\ndata_values.forEach(function (item, index) {\n    var ts = Date.parse(item.dateTime);\n    var val = parseFloat(item.value);\n    var fields = {\n            navd88_mm: Math.round(val * 304.8) + 'i' || undefined\n        };\n    var tags = {\n            sensor_id: sensor_id,\n            lat: lat,\n            lng: lng,\n            sensor_types: 'tide',\n            sensor_name: sensor_name\n        };\n    var db_entry = {\n        measurement: 'tide',\n        fields,\n        tags,\n        timestamp: ts\n    }\n    msg.influx_payload.push(db_entry);\n});\n\n\n\n\n        \n\n        \n// msg.influx_payload = [\n//     {\n//         measurement: 'tide',\n//         fields,\n//         tags,\n//         timestamp: ts\n//     }\n//     ];\n\nmsg.dev_id = sensor_id;\nmsg.lat = lat;\nmsg.lng = lng;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 600,
    "y": 80,
    "wires": [
      [
        "7021700bfe7cd70a"
      ]
    ]
  },
  {
    "id": "7021700bfe7cd70a",
    "type": "switch",
    "z": "e0603b84198efa0a",
    "name": "valid",
    "property": "payload",
    "propertyType": "msg",
    "rules": [
      {
        "t": "nnull"
      },
      {
        "t": "null"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 750,
    "y": 60,
    "wires": [
      [
        "d6295bc7bcba1302"
      ],
      []
    ]
  },
  {
    "id": "4ebeda902593462a",
    "type": "debug",
    "z": "e0603b84198efa0a",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 290,
    "y": 460,
    "wires": []
  },
  {
    "id": "d6f6b3888bd06c8f",
    "type": "function",
    "z": "e0603b84198efa0a",
    "name": "Fieldkit POST",
    "func": "msg.payload = [msg.payload];\n\n\nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = 'https://api.fieldkit.org/ttn/webhook?token=33af8a9e936d2ec4c217de125ccfc4b9';\nmsg.headers[\"Content-Type\"]=\"application/json\";\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 560,
    "y": 320,
    "wires": [
      [
        "f0ed6eec16d38a64"
      ]
    ]
  },
  {
    "id": "f0ed6eec16d38a64",
    "type": "http request",
    "z": "e0603b84198efa0a",
    "name": "",
    "method": "use",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 850,
    "y": 320,
    "wires": [
      [
        "98d5bacfccca5213"
      ]
    ]
  },
  {
    "id": "98d5bacfccca5213",
    "type": "function",
    "z": "e0603b84198efa0a",
    "name": "HTTP Status",
    "func": "if(msg.statusCode >= 200 && msg.statusCode < 300){\n    msg.response_fail = false;\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1010,
    "y": 320,
    "wires": [
      []
    ]
  },
  {
    "id": "0670e459fc3c98c0",
    "type": "debug",
    "z": "e0603b84198efa0a",
    "name": "debug 1",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 1140,
    "y": 180,
    "wires": []
  },
  {
    "id": "1ba8fd49927ecabc",
    "type": "debug",
    "z": "e0603b84198efa0a",
    "name": "debug 3",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 860,
    "y": 200,
    "wires": []
  },
  {
    "id": "df20dc39e5cd477f",
    "type": "split",
    "z": "e0603b84198efa0a",
    "name": "",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 330,
    "y": 320,
    "wires": [
      [
        "d6f6b3888bd06c8f"
      ]
    ]
  },
  {
    "id": "95b86fc3e0052b27",
    "type": "debug",
    "z": "e0603b84198efa0a",
    "name": "debug 4",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 380,
    "y": 120,
    "wires": []
  },
  {
    "id": "25f35f5f814246eb",
    "type": "debug",
    "z": "e0603b84198efa0a",
    "name": "debug 19",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 940,
    "y": 460,
    "wires": []
  },
  {
    "id": "5718aa817d9c6866",
    "type": "inject",
    "z": "e0603b84198efa0a",
    "name": "Inject station_ids",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "str",
    "x": 180,
    "y": 540,
    "wires": [
      [
        "ecf1613fec846f18"
      ]
    ]
  },
  {
    "id": "ecf1613fec846f18",
    "type": "http request",
    "z": "e0603b84198efa0a",
    "name": "USGS tide API",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://waterservices.usgs.gov/nwis/iv/?format=json&sites=01311850&parameterCd=62620&siteStatus=all&period=PT1H",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 500,
    "y": 540,
    "wires": [
      [
        "c4a52d2d7af88612"
      ]
    ]
  },
  {
    "id": "c4a52d2d7af88612",
    "type": "function",
    "z": "e0603b84198efa0a",
    "name": "payload",
    "func": "var data_payload = msg.payload.value.timeSeries[0];\nnode.warn(data_payload);\nif (data_payload === undefined){\n    msg.payload = null;\n    return msg;\n}\n\nnode.warn(data_payload);\n\nvar station_id = data_payload.sourceInfo.siteCode[0].value;\n\nvar sensor_id = 'usgs-tidal-' + station_id;\nvar sensor_name = data_payload.sourceInfo.siteName + ' (' + station_id + ')';\nvar lat = parseFloat(data_payload.sourceInfo.geoLocation.geogLocation.latitude);\nvar lng = parseFloat(data_payload.sourceInfo.geoLocation.geogLocation.longitude);\n\n// Get the correct values array idx as one is measured and the other is predicted\nvar values_idx = 0;\nif (data_payload.values[0].method[0].methodDescription.includes(\"prediction\")){\n    values_idx = 1;\n    \n}\n\n\n\nvar data_values = data_payload.values[values_idx].value;\n\nvar num_of_vals = data_values.length;\nvar last_value = data_values[num_of_vals - 1];\n\nmsg.influx_payload = [];\n\ndata_values.forEach(function (item, index) {\n    var ts = Date.parse(item.dateTime);\n    var val = parseFloat(item.value);\n    var fields = {\n            navd88_mm: Math.round(val * 304.8) + 'i' || undefined\n        };\n    var tags = {\n            sensor_id: sensor_id,\n            lat: lat,\n            lng: lng,\n            sensor_types: 'tide',\n            sensor_name: sensor_name\n        };\n    var db_entry = {\n        measurement: 'tide',\n        fields,\n        tags,\n        timestamp: ts\n    }\n    msg.influx_payload.push(db_entry);\n});\n\n\n\n\n        \n\n        \n// msg.influx_payload = [\n//     {\n//         measurement: 'tide',\n//         fields,\n//         tags,\n//         timestamp: ts\n//     }\n//     ];\n\nmsg.dev_id = sensor_id;\nmsg.lat = lat;\nmsg.lng = lng;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 720,
    "y": 540,
    "wires": [
      [
        "25f35f5f814246eb"
      ]
    ]
  },
  {
    "id": "97a92550bb51b952",
    "type": "inject",
    "z": "54e1edf44c387788",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "15 05 * * *",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[\t   'floodnet-live'\t]",
    "payloadType": "jsonata",
    "x": 90,
    "y": 100,
    "wires": [
      [
        "0d93778db11fa758"
      ]
    ]
  },
  {
    "id": "bb90fef6fb25b7ee",
    "type": "influxdb in",
    "z": "54e1edf44c387788",
    "influxdb": "4b9a03aed4358412",
    "name": "",
    "query": "",
    "rawOutput": false,
    "precision": "",
    "retentionPolicy": "",
    "org": "floodnet",
    "x": 570,
    "y": 120,
    "wires": [
      [
        "c9d6973e721d7130",
        "8744e043d5b34f18"
      ]
    ]
  },
  {
    "id": "93083f815ba539af",
    "type": "function",
    "z": "54e1edf44c387788",
    "name": "Create query",
    "func": "var bucket_name = msg.payload;\nvar lookback_days = 3;\n\nvar std_limit = 10.0;\nvar max_val_filt = 4000;\n\nvar tz_offset = new Date().getTimezoneOffset() / 60;\n\nvar st_hour = 22;\nvar en_hour = 5;\n\nvar st_ts = new Date();\nst_ts.setDate(st_ts.getDate() - lookback_days);\nst_ts.setHours(st_hour);\nst_ts.setMinutes(0);\nst_ts.setSeconds(0);\nst_ts.setMilliseconds(0);\n\nvar st_hour_utc = st_ts.getHours() + tz_offset;\nif (st_hour_utc > 24){\n    st_hour_utc -= 24;\n}\n\nvar en_ts = new Date();\nen_ts.setHours(en_hour);\nen_ts.setMinutes(0);\nen_ts.setSeconds(0);\nen_ts.setMilliseconds(0);\n\nvar en_hour_utc = en_ts.getHours() + tz_offset;\nif (en_hour_utc > 24){\n    en_hour_utc -= 24;\n}\n\nvar meas_name = 'flood-sensor';\nvar app_name = bucket_name;\nvar field_name = 'dist_mm';\n\nvar agg_str = 'median';\n\nvar query = \n`\nimport \"date\"\ndata = from(bucket: \"${bucket_name}\")\n  |> range(start: ${st_ts.getTime() / 1000}, stop:${en_ts.getTime() / 1000})\n  |> filter(fn: (r) => r._measurement == \"${meas_name}\")\n  |> filter(fn: (r) => r.app_name == \"${app_name}\")\n  |> filter(fn: (r) => r._field == \"${field_name}\")\n  |> filter(fn: (r) => {\n    hour = date.hour(t: r._time)\n    return hour >= ${st_hour_utc} and hour < ${en_hour_utc}\n  })\n  |> filter(fn: (r) => r._value < ${max_val_filt})\n  |> keep(columns: [\"_value\", \"dev_id\", \"deployment_id\"])\n  |> toFloat()\n\nstd_var = data |> stddev()\nmed_var = data |> ${agg_str}()\njoin(tables: {stddev: std_var, ${agg_str}: med_var}, on: [\"deployment_id\"])\n|> rename(columns: {_value_median: \"${agg_str}\", _value_stddev: \"stddev\", dev_id_median: \"dev_id\"})\n|> filter(fn: (r) => r.stddev < ${std_limit})\n`\nmsg.query = query;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 350,
    "y": 100,
    "wires": [
      [
        "bb90fef6fb25b7ee",
        "d44fa3133fc3a99e",
        "74c6b859f6e38b4d"
      ]
    ]
  },
  {
    "id": "4257d78af3302b76",
    "type": "debug",
    "z": "54e1edf44c387788",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 370,
    "y": 180,
    "wires": []
  },
  {
    "id": "c9d6973e721d7130",
    "type": "function",
    "z": "54e1edf44c387788",
    "name": "Create median insert",
    "func": "var meas_array = [];\nvar med_array = [];\nvar dev_id_array = [];\nvar dep_id_array = [];\nfor (let i = 0; i < msg.payload.length; i++) {\n    var info = msg.payload[i]\n    \n    var global_var_name = info.dev_id + '.night_median';\n    global.set(global_var_name, info.median);\n    msg.median = info.median;\n    \n    med_array.push(msg.median);\n    dev_id_array.push(info.dev_id);\n    dep_id_array.push(info.deployment_id);\n    \n    var influx_entry = {\n        measurement: 'flood-sensor',\n        fields: {\n            night_median_mm: msg.median\n        },\n        tags:{\n            sensor_id: info.dev_id\n        },\n        timestamp: new Date().getTime()\n    };\n    meas_array.push(influx_entry);\n    \n}\nmsg.med_array = med_array;\nmsg.dev_id_array = dev_id_array;\nmsg.dep_id_array = dep_id_array;\nmsg.payload = meas_array;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 140,
    "y": 200,
    "wires": [
      [
        "45af59cd0c241688",
        "4257d78af3302b76",
        "8d7a70ac84459159"
      ]
    ]
  },
  {
    "id": "45af59cd0c241688",
    "type": "influxdb batch",
    "z": "54e1edf44c387788",
    "influxdb": "4b9a03aed4358412",
    "precision": "",
    "retentionPolicy": "",
    "name": "Median insert",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "floodnet",
    "bucket": "floodnet-live",
    "x": 380,
    "y": 220,
    "wires": []
  },
  {
    "id": "0d93778db11fa758",
    "type": "split",
    "z": "54e1edf44c387788",
    "name": "",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 210,
    "y": 100,
    "wires": [
      [
        "93083f815ba539af"
      ]
    ]
  },
  {
    "id": "d44fa3133fc3a99e",
    "type": "debug",
    "z": "54e1edf44c387788",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 510,
    "y": 40,
    "wires": []
  },
  {
    "id": "8d7a70ac84459159",
    "type": "file in",
    "z": "54e1edf44c387788",
    "name": "Read dep_id file",
    "filename": "/data/sensor_meta/deploy_id_map.txt",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "none",
    "allProps": false,
    "x": 380,
    "y": 260,
    "wires": [
      [
        "a5d2e4088c0d40da"
      ]
    ]
  },
  {
    "id": "f1a3c9f0126fc622",
    "type": "csv",
    "z": "54e1edf44c387788",
    "name": "",
    "sep": ",",
    "hdrin": "",
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 950,
    "y": 320,
    "wires": [
      []
    ]
  },
  {
    "id": "a5d2e4088c0d40da",
    "type": "function",
    "z": "54e1edf44c387788",
    "name": "",
    "func": "let lines = msg.payload.split(\"\\n\");\nlet found_match = false;\n\nmsg.dev_id_array.forEach((element, idx) => {\n    found_match = false;\n    lines.forEach((line, index) => {\n        var line_parts = line.split(\",\");\n        if (line_parts[0] == element) {\n            lines[index] = line_parts[0] + \",\" + line_parts[1] + \",\" + msg.med_array[idx];\n            found_match = true;\n        }\n    });\n    if (!found_match){\n        lines.push(msg.dev_id_array[idx] + \",\" + msg.dep_id_array[idx] + \",\" + msg.med_array[idx])\n    }\n});\n\nmsg.payload = lines.join(\"\\n\");\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 540,
    "y": 260,
    "wires": [
      [
        "d41bd81967a828fe"
      ]
    ]
  },
  {
    "id": "4bb31c8faf430f5b",
    "type": "inject",
    "z": "54e1edf44c387788",
    "name": "",
    "props": [
      {
        "p": "med_array",
        "v": "[2654,2554,2387]",
        "vt": "jsonata"
      },
      {
        "p": "dev_id_array",
        "v": "[\"fs-00001\",\"fs-00002\",\"fs-00003\"]",
        "vt": "jsonata"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 110,
    "y": 260,
    "wires": [
      [
        "8d7a70ac84459159"
      ]
    ]
  },
  {
    "id": "6f6058ae65e3a362",
    "type": "debug",
    "z": "54e1edf44c387788",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 810,
    "y": 260,
    "wires": []
  },
  {
    "id": "d41bd81967a828fe",
    "type": "file",
    "z": "54e1edf44c387788",
    "name": "",
    "filename": "/data/sensor_meta/deploy_id_map.txt",
    "appendNewline": false,
    "createDir": true,
    "overwriteFile": "true",
    "encoding": "none",
    "x": 680,
    "y": 260,
    "wires": [
      [
        "6f6058ae65e3a362"
      ]
    ]
  },
  {
    "id": "8744e043d5b34f18",
    "type": "debug",
    "z": "54e1edf44c387788",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 790,
    "y": 120,
    "wires": []
  },
  {
    "id": "74c6b859f6e38b4d",
    "type": "debug",
    "z": "54e1edf44c387788",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 530,
    "y": 80,
    "wires": []
  },
  {
    "id": "a333bbcff1929612",
    "type": "inject",
    "z": "e3941d68335018ed",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "300",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payloadType": "date",
    "x": 110,
    "y": 40,
    "wires": [
      [
        "d08956275a10d893"
      ]
    ]
  },
  {
    "id": "6f0b53f20d15d5d8",
    "type": "http request",
    "z": "e3941d68335018ed",
    "name": "GW ID GET",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://eu1.cloud.thethings.network/api/v3/users/{{{tti_user}}}/gateways",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 450,
    "y": 40,
    "wires": [
      [
        "cb2e8564e10f832a",
        "254c84e5ca20a97d"
      ]
    ]
  },
  {
    "id": "d08956275a10d893",
    "type": "credentials",
    "z": "e3941d68335018ed",
    "name": "TTI token store",
    "props": [
      {
        "value": "tti_user",
        "type": "msg"
      },
      {
        "value": "headers.Authorization",
        "type": "msg"
      }
    ],
    "x": 280,
    "y": 40,
    "wires": [
      [
        "6f0b53f20d15d5d8"
      ]
    ]
  },
  {
    "id": "cb2e8564e10f832a",
    "type": "change",
    "z": "e3941d68335018ed",
    "name": "",
    "rules": [
      {
        "t": "move",
        "p": "payload.gateways",
        "pt": "msg",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 680,
    "y": 40,
    "wires": [
      [
        "c53d8aedbedb0c01",
        "91c134739839b339"
      ]
    ]
  },
  {
    "id": "c53d8aedbedb0c01",
    "type": "split",
    "z": "e3941d68335018ed",
    "name": "",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 90,
    "y": 100,
    "wires": [
      [
        "173f3a7cea0eb1df"
      ]
    ]
  },
  {
    "id": "d55cefb55950509e",
    "type": "http request",
    "z": "e3941d68335018ed",
    "name": "GW stat GET",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://nam1.cloud.thethings.network/api/v3/gs/gateways/{{{payload.ids.gateway_id}}}/connection/stats",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 630,
    "y": 100,
    "wires": [
      [
        "bdb138bb6fe7fc89",
        "91c134739839b339"
      ]
    ]
  },
  {
    "id": "f5f13934eb8ab41d",
    "type": "credentials",
    "z": "e3941d68335018ed",
    "name": "TTI token store",
    "props": [
      {
        "value": "tti_user",
        "type": "msg"
      },
      {
        "value": "headers.Authorization",
        "type": "msg"
      }
    ],
    "x": 460,
    "y": 100,
    "wires": [
      [
        "d55cefb55950509e"
      ]
    ]
  },
  {
    "id": "173f3a7cea0eb1df",
    "type": "change",
    "z": "e3941d68335018ed",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "gateway_id",
        "pt": "msg",
        "to": "payload.ids.gateway_id",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 260,
    "y": 100,
    "wires": [
      [
        "f5f13934eb8ab41d"
      ]
    ]
  },
  {
    "id": "bdb138bb6fe7fc89",
    "type": "function",
    "z": "e3941d68335018ed",
    "name": "",
    "func": "if (msg.statusCode == 404){\n    return undefined\n}\n\nvar gateway_id = msg.gateway_id;\nvar last_uplink_dt = Date.parse(msg.payload.last_uplink_received_at);\nvar uplink_cnt = parseInt(msg.payload.uplink_count);\nvar downlink_cnt = parseInt(msg.payload.downlink_count);\n\nvar status_object = msg.payload.last_status;\n\nvar lat;\nvar lng;\nvar altitude;\n\nnode.warn(status_object);\nif (typeof status_object.antenna_locations !== 'undefined'){\n    lat = status_object.antenna_locations[0].latitude || undefined;\n    lng = status_object.antenna_locations[0].longitude || undefined;\n    altitude = status_object.antenna_locations[0].altitude || undefined;\n}\n\nvar ip_addr;\n\nif (typeof status_object.ip !== 'undefined'){\n    ip_addr = status_object.ip[0] || undefined;\n}\n\nvar uplink_ok = status_object.metrics.rxok;\nvar uplink_recv = status_object.metrics.rxin;\nvar ack_recv = status_object.metrics.ackr;\nvar downlink_ok = status_object.metrics.txok;\nvar downlink_recv = status_object.metrics.txin;\n\nvar ts = Date.parse(status_object.time);\n\nvar fields = {\n            uplink_ok: uplink_ok || undefined,\n            uplink_recv: uplink_recv || undefined,\n            ack_recv: ack_recv || undefined,\n            downlink_ok: downlink_ok || undefined,\n            downlink_recv: downlink_recv || undefined,\n            last_uplink_dt: last_uplink_dt || undefined,\n            uplink_cnt: uplink_cnt || undefined,\n            downlink_cnt: downlink_cnt || undefined\n            \n        };\n        \nvar tags = {\n            gateway_id: gateway_id,\n            lat: lat,\n            lng: lng,\n            ip_addr: ip_addr || undefined,\n            // TODO: add human readable name to GW creation process scripts\n            gateway_name: undefined\n        };\n        \nmsg.payload = [\n    {\n        measurement: 'gateway',\n        fields,\n        tags,\n        timestamp: ts\n    }\n    ];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 800,
    "y": 100,
    "wires": [
      [
        "050c9b632ed81f5d",
        "91c134739839b339"
      ]
    ]
  },
  {
    "id": "050c9b632ed81f5d",
    "type": "influxdb batch",
    "z": "e3941d68335018ed",
    "influxdb": "4b9a03aed4358412",
    "precision": "",
    "retentionPolicy": "",
    "name": "GW data insert",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "floodnet",
    "bucket": "floodnet-live",
    "x": 1000,
    "y": 100,
    "wires": []
  },
  {
    "id": "91c134739839b339",
    "type": "debug",
    "z": "e3941d68335018ed",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 990,
    "y": 40,
    "wires": []
  },
  {
    "id": "254c84e5ca20a97d",
    "type": "debug",
    "z": "e3941d68335018ed",
    "name": "debug 38",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 520,
    "y": 240,
    "wires": []
  },
  {
    "id": "3e6cb67dffee43dc",
    "type": "http request",
    "z": "101718428de70120",
    "name": "Get app devs",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://eu1.cloud.thethings.network/api/v3/applications/{{{payload}}}/devices",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 940,
    "y": 640,
    "wires": [
      [
        "7554e0bbfc352912"
      ]
    ]
  },
  {
    "id": "b55ed6954feb034d",
    "type": "credentials",
    "z": "101718428de70120",
    "name": "TTI token store",
    "props": [
      {
        "value": "tti_user",
        "type": "msg"
      },
      {
        "value": "headers.Authorization",
        "type": "msg"
      }
    ],
    "x": 760,
    "y": 640,
    "wires": [
      [
        "3e6cb67dffee43dc"
      ]
    ]
  },
  {
    "id": "a5776f2bed3d2d5c",
    "type": "split",
    "z": "101718428de70120",
    "name": "",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 450,
    "y": 640,
    "wires": [
      [
        "da430a9b7a874f15"
      ]
    ]
  },
  {
    "id": "7554e0bbfc352912",
    "type": "function",
    "z": "101718428de70120",
    "name": "",
    "func": "if (msg.statusCode != 200){\n    msg.complete = 1;\n    msg.parts = [];\n    msg.payload = msg.parts;\n    return msg;\n}\n\nvar dev_array = [];\n\nfor (let i = 0; i < msg.payload.end_devices.length; i++) {\n  var dev_id = msg.payload.end_devices[i].ids.device_id;\n  if (dev_id.includes('fs-') || \n        dev_id.includes('rg-') ||\n        dev_id.includes('ts-') ||\n        dev_id.includes('fn-')\n        ){\n    dev_array.push(dev_id);\n  }\n}\n\nmsg.dev_array = dev_array;\nmsg.parts = dev_array;\nmsg.payload = msg.parts;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 140,
    "y": 700,
    "wires": [
      [
        "f0b60bd24b8d1ea9"
      ]
    ]
  },
  {
    "id": "a8e0c13e05e832d6",
    "type": "ui_dropdown",
    "z": "101718428de70120",
    "name": "Sensor type",
    "label": "Sensor type:",
    "tooltip": "",
    "place": "Sensor type",
    "group": "f4b50fc6dae783b8",
    "order": 1,
    "width": 0,
    "height": 0,
    "passthru": true,
    "multiple": false,
    "options": [
      {
        "label": "Flood sensor",
        "value": "fs",
        "type": "str"
      },
      {
        "label": "Rain gauge",
        "value": "rg",
        "type": "str"
      },
      {
        "label": "Tidal sensor",
        "value": "ts",
        "type": "str"
      },
      {
        "label": "Old convention",
        "value": "fn",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "topic",
    "topicType": "msg",
    "className": "",
    "x": 670,
    "y": 700,
    "wires": [
      [
        "a4d8da4788898304"
      ]
    ]
  },
  {
    "id": "a4d8da4788898304",
    "type": "function",
    "z": "101718428de70120",
    "name": "",
    "func": "var dev_array = flow.get(\"dev_array\");\nvar dev_type = msg.payload;\n\nconst filt_devs = dev_array.filter((dev) => {\n  return dev.includes(dev_type);\n}).sort();\n\nlet free_dev_array = [];\nlet free_count = 0;\nfor (let i = 1; i < 99999; i++) {\n  var s = i+\"\";\n  while (s.length < 5) s = \"0\" + s;\n  var target_dev_id = dev_type + '-' + s;\n  if (filt_devs.includes(target_dev_id)) continue;\n  free_dev_array.push(target_dev_id);\n  free_count += 1;\n  if (free_count > 100){\n      break;\n  }\n}\n\nmsg.options = free_dev_array;\nmsg.payload = free_dev_array[0];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 820,
    "y": 700,
    "wires": [
      [
        "afeeb47286efbd0f"
      ]
    ]
  },
  {
    "id": "513076c43ec8af13",
    "type": "ui_ui_control",
    "z": "101718428de70120",
    "name": "On load",
    "events": "connect",
    "x": 140,
    "y": 640,
    "wires": [
      [
        "95d43463751127ad"
      ]
    ]
  },
  {
    "id": "bd83d31ea5a6ab88",
    "type": "change",
    "z": "101718428de70120",
    "name": "set to fs",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "fs",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 520,
    "y": 700,
    "wires": [
      [
        "a8e0c13e05e832d6",
        "7eea9fd8404f4ea2"
      ]
    ]
  },
  {
    "id": "95d43463751127ad",
    "type": "change",
    "z": "101718428de70120",
    "name": "app_names",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "[\"floodnet-live\"\t,     \"floodnet-test\",\t    \"floodnet-lab\",  \"complete\"\t    \t]",
        "tot": "jsonata"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 310,
    "y": 640,
    "wires": [
      [
        "a5776f2bed3d2d5c"
      ]
    ]
  },
  {
    "id": "f0b60bd24b8d1ea9",
    "type": "join",
    "z": "101718428de70120",
    "name": "",
    "mode": "custom",
    "build": "array",
    "property": "payload",
    "propertyType": "msg",
    "key": "topic",
    "joiner": "\\n",
    "joinerType": "str",
    "accumulate": false,
    "timeout": "",
    "count": "",
    "reduceRight": false,
    "reduceExp": "",
    "reduceInit": "",
    "reduceInitType": "num",
    "reduceFixup": "",
    "x": 270,
    "y": 700,
    "wires": [
      [
        "35b7b1db898fbdcd"
      ]
    ]
  },
  {
    "id": "cf8c1e604a7e8a11",
    "type": "ui_dropdown",
    "z": "101718428de70120",
    "name": "",
    "label": "Network:",
    "tooltip": "",
    "place": "",
    "group": "f4b50fc6dae783b8",
    "order": 3,
    "width": 0,
    "height": 0,
    "passthru": true,
    "multiple": false,
    "options": [
      {
        "label": "The Things Network",
        "value": "ttn",
        "type": "str"
      },
      {
        "label": "Helium",
        "value": "helium",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "topic",
    "topicType": "msg",
    "className": "",
    "x": 360,
    "y": 240,
    "wires": [
      [
        "e13c2b115ae6c405"
      ]
    ]
  },
  {
    "id": "afeeb47286efbd0f",
    "type": "ui_dropdown",
    "z": "101718428de70120",
    "name": "",
    "label": "Sensor ID:",
    "tooltip": "",
    "place": "Select option",
    "group": "f4b50fc6dae783b8",
    "order": 2,
    "width": 0,
    "height": 0,
    "passthru": true,
    "multiple": false,
    "options": [
      {
        "label": "",
        "value": "",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "topic",
    "topicType": "msg",
    "className": "",
    "x": 970,
    "y": 700,
    "wires": [
      [
        "dc0d1cf9b769ae5c"
      ]
    ]
  },
  {
    "id": "74087393325035f7",
    "type": "ui_dropdown",
    "z": "101718428de70120",
    "name": "",
    "label": "Sensor types:",
    "tooltip": "",
    "place": "",
    "group": "f4b50fc6dae783b8",
    "order": 3,
    "width": 0,
    "height": 0,
    "passthru": true,
    "multiple": true,
    "options": [
      {
        "label": "Range",
        "value": "range",
        "type": "str"
      },
      {
        "label": "Temperature",
        "value": "temp",
        "type": "str"
      },
      {
        "label": "Humidity",
        "value": "humid",
        "type": "str"
      },
      {
        "label": "Precipitation",
        "value": "precip",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "topic",
    "topicType": "msg",
    "className": "",
    "x": 380,
    "y": 300,
    "wires": [
      [
        "39fc015814128640"
      ]
    ]
  },
  {
    "id": "0c9700d67847344a",
    "type": "ui_dropdown",
    "z": "101718428de70120",
    "name": "",
    "label": "Built by:",
    "tooltip": "",
    "place": "",
    "group": "f4b50fc6dae783b8",
    "order": 4,
    "width": 0,
    "height": 0,
    "passthru": true,
    "multiple": false,
    "options": [
      {
        "label": "Praneeth",
        "value": "psv",
        "type": "str"
      },
      {
        "label": "Ricardo",
        "value": "rtc",
        "type": "str"
      },
      {
        "label": "Charlie",
        "value": "cm",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "topic",
    "topicType": "msg",
    "className": "",
    "x": 360,
    "y": 360,
    "wires": [
      [
        "07c0c2992678b86e"
      ]
    ]
  },
  {
    "id": "3ab57096287dda8f",
    "type": "ui_dropdown",
    "z": "101718428de70120",
    "name": "",
    "label": "Design version:",
    "tooltip": "",
    "place": "",
    "group": "f4b50fc6dae783b8",
    "order": 5,
    "width": 0,
    "height": 0,
    "passthru": true,
    "multiple": false,
    "options": [
      {
        "label": "AB02 micro",
        "value": "nyu_mk2",
        "type": "str"
      },
      {
        "label": "Feather",
        "value": "nyu_mk1",
        "type": "str"
      },
      {
        "label": "Feather tubed",
        "value": "cuny_mk1",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "topic",
    "topicType": "msg",
    "className": "",
    "x": 380,
    "y": 420,
    "wires": [
      [
        "505a67c8f2179f38"
      ]
    ]
  },
  {
    "id": "c90888da15b9b25a",
    "type": "ui_dropdown",
    "z": "101718428de70120",
    "name": "",
    "label": "Housing:",
    "tooltip": "",
    "place": "",
    "group": "f4b50fc6dae783b8",
    "order": 5,
    "width": 0,
    "height": 0,
    "passthru": true,
    "multiple": false,
    "options": [
      {
        "label": "Micro",
        "value": "micro",
        "type": "str"
      },
      {
        "label": "Louvered",
        "value": "louvered",
        "type": "str"
      },
      {
        "label": "QILIPSU junction box",
        "value": "junc_box",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "topic",
    "topicType": "msg",
    "className": "",
    "x": 360,
    "y": 480,
    "wires": [
      [
        "89ab5415ab2c45e1"
      ]
    ]
  },
  {
    "id": "2d52a60e5029a81a",
    "type": "ui_text_input",
    "z": "101718428de70120",
    "name": "",
    "label": "QC height 1:",
    "tooltip": "",
    "group": "afaab3096b157a9b",
    "order": 7,
    "width": "2",
    "height": "1",
    "passthru": true,
    "mode": "text",
    "delay": 300,
    "topic": "topic",
    "sendOnBlur": true,
    "className": "",
    "topicType": "msg",
    "x": 950,
    "y": 460,
    "wires": [
      []
    ]
  },
  {
    "id": "4369f6169abacabd",
    "type": "ui_text_input",
    "z": "101718428de70120",
    "name": "",
    "label": "QC height 2:",
    "tooltip": "",
    "group": "afaab3096b157a9b",
    "order": 7,
    "width": "2",
    "height": "1",
    "passthru": true,
    "mode": "text",
    "delay": 300,
    "topic": "topic",
    "sendOnBlur": true,
    "className": "",
    "topicType": "msg",
    "x": 950,
    "y": 500,
    "wires": [
      []
    ]
  },
  {
    "id": "79ad882e8a6dcf97",
    "type": "ui_text_input",
    "z": "101718428de70120",
    "name": "",
    "label": "QC height 3:",
    "tooltip": "",
    "group": "afaab3096b157a9b",
    "order": 7,
    "width": "2",
    "height": "1",
    "passthru": true,
    "mode": "text",
    "delay": 300,
    "topic": "topic",
    "sendOnBlur": true,
    "className": "",
    "topicType": "msg",
    "x": 950,
    "y": 540,
    "wires": [
      []
    ]
  },
  {
    "id": "3102c66145ad20e4",
    "type": "ui_button",
    "z": "101718428de70120",
    "name": "",
    "group": "f4b50fc6dae783b8",
    "order": 7,
    "width": 0,
    "height": 0,
    "passthru": false,
    "label": "Create sensor {{label}}",
    "tooltip": "",
    "color": "",
    "bgcolor": "",
    "className": "",
    "icon": "",
    "payload": "",
    "payloadType": "str",
    "topic": "topic",
    "topicType": "msg",
    "x": 90,
    "y": 200,
    "wires": [
      [
        "2934c4cac4f2c17e",
        "1084b78c0a9e815d"
      ]
    ]
  },
  {
    "id": "0dbb9c7eef8cb3d4",
    "type": "ui_dropdown",
    "z": "101718428de70120",
    "name": "",
    "label": "Application:",
    "tooltip": "",
    "place": "",
    "group": "f4b50fc6dae783b8",
    "order": 5,
    "width": 0,
    "height": 0,
    "passthru": true,
    "multiple": false,
    "options": [
      {
        "label": "FloodNet Test",
        "value": "floodnet-test",
        "type": "str"
      },
      {
        "label": "FloodNet Lab",
        "value": "floodnet-lab",
        "type": "str"
      },
      {
        "label": "FloodNet Live",
        "value": "floodnet-live",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "topic",
    "topicType": "msg",
    "className": "",
    "x": 370,
    "y": 540,
    "wires": [
      [
        "a49e8c77b2264e56"
      ]
    ]
  },
  {
    "id": "da430a9b7a874f15",
    "type": "delay",
    "z": "101718428de70120",
    "name": "",
    "pauseType": "rate",
    "timeout": "3",
    "timeoutUnits": "seconds",
    "rate": "3",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "allowrate": false,
    "outputs": 1,
    "x": 590,
    "y": 640,
    "wires": [
      [
        "b55ed6954feb034d"
      ]
    ]
  },
  {
    "id": "35b7b1db898fbdcd",
    "type": "function",
    "z": "101718428de70120",
    "name": "func",
    "func": "var merged = [].concat.apply([], msg.payload);\nmsg.dev_array = merged;\nflow.set('dev_array', msg.dev_array);\nmsg.app_name = flow.get(\"app_name\");\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 390,
    "y": 700,
    "wires": [
      [
        "bd83d31ea5a6ab88"
      ]
    ]
  },
  {
    "id": "8972b54cf9c1ada4",
    "type": "http request",
    "z": "101718428de70120",
    "name": "dev create",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://eu1.cloud.thethings.network/api/v3/applications/{{{app_id}}}/devices",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 610,
    "y": 200,
    "wires": [
      [
        "1aac4e4668e393a9",
        "347aa4c5d4b90be9"
      ]
    ]
  },
  {
    "id": "2934c4cac4f2c17e",
    "type": "credentials",
    "z": "101718428de70120",
    "name": "TTI token store",
    "props": [
      {
        "value": "tti_user",
        "type": "msg"
      },
      {
        "value": "tti_token",
        "type": "msg"
      }
    ],
    "x": 300,
    "y": 200,
    "wires": [
      [
        "11d343eed6225d54"
      ]
    ]
  },
  {
    "id": "11d343eed6225d54",
    "type": "function",
    "z": "101718428de70120",
    "name": "",
    "func": "const genRanHex = size => [...Array(size)].map(() => Math.floor(Math.random() * 16).toString(16)).join('');\n\nlet dev_id = flow.get(\"dev_id\");\nlet dev_eui = \"\";\nlet join_eui = genRanHex(16).toUpperCase();\nlet app_id = flow.get(\"app_name\");\n\n\nfor (let n=0, l=dev_id.length; n<l; n++) \n     {\n\t\tvar hex = Number(dev_id.charCodeAt(n)).toString(16);\n\t\tdev_eui += hex;\n\t }\n\nlet app_key = genRanHex(32).toUpperCase();\n\nmsg.dev_id = dev_id;\nmsg.dev_eui = dev_eui;\nmsg.join_eui = join_eui;\nmsg.app_id = app_id;\nmsg.app_key = app_key;\n\nlet create_device = {\n   \"end_device\":{\n      \"name\": dev_id,\n      \"description\": dev_id,\n      \"ids\":{\n         \"device_id\": dev_id,\n         \"dev_eui\": dev_eui,\n         \"join_eui\": join_eui\n      },\n      \"join_server_address\":\"nam1.cloud.thethings.network\",\n      \"network_server_address\":\"nam1.cloud.thethings.network\",\n      \"application_server_address\":\"nam1.cloud.thethings.network\",\n   },\n   \"field_mask\":{\n      \"paths\":[\n         \"join_server_address\",\n         \"network_server_address\",\n         \"application_server_address\"\n      ]\n   }\n}\n\nmsg.payload = create_device;\nmsg.headers = {};\nmsg.headers.Authorization = msg.tti_token;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 460,
    "y": 200,
    "wires": [
      [
        "8972b54cf9c1ada4"
      ]
    ]
  },
  {
    "id": "dc0d1cf9b769ae5c",
    "type": "change",
    "z": "101718428de70120",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "dev_id",
        "pt": "flow",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1140,
    "y": 700,
    "wires": [
      [
        "eed505ce87c33466"
      ]
    ]
  },
  {
    "id": "1aac4e4668e393a9",
    "type": "function",
    "z": "101718428de70120",
    "name": "",
    "func": "// let dev_id = flow.get(\"dev_id\");\n// let dev_eui = \"\";\n// let join_eui = \"0000000000000000\";\n// let app_id = \"floodnet-test\";\n\n// for (let n=0, l=dev_id.length; n<l; n++) \n//      {\n// \t\tvar hex = Number(dev_id.charCodeAt(n)).toString(16);\n// \t\tdev_eui += hex;\n// \t }\n\t \n// msg.dev_id = dev_id;\n// msg.dev_eui = dev_eui;\n// msg.join_eui = join_eui;\n// msg.app_id = app_id;\n\nlet dev_id = msg.dev_id;\nlet dev_eui = msg.dev_eui;\nlet join_eui = msg.join_eui;\nlet app_id = msg.app_id;\n\n\n\nlet register_name_server = {\n   \"end_device\":{\n      \"supports_join\": true,\n      \"supports_class_c\": true,\n    //   \"multicast\": true,\n      \"lorawan_version\": \"MAC_V1_0_3\",\n      \"ids\":{\n         \"device_id\": dev_id,\n         \"dev_eui\": dev_eui,\n         \"join_eui\": join_eui,\n         \"application_ids\":{\n            \"application_id\": app_id\n         }\n      },\n      \"frequency_plan_id\":\"US_902_928_FSB_2\",\n      \"lorawan_phy_version\":\"PHY_V1_0_3_REV_A\",\n      \"mac_settings\":{\n         \"class_c_timeout\":\"60s\",\n         \"supports_32_bit_f_cnt\": true\n      },\n      \"version_ids\":{\n          \"band_id\":\"US_902_928\"\n      }\n   },\n   \"field_mask\":{\n      \"paths\":[\n         \"supports_join\",\n         \"supports_class_c\",\n        //  \"multicast\",\n         \"lorawan_version\",\n         \"ids.device_id\",\n         \"ids.dev_eui\",\n         \"ids.join_eui\",\n         \"ids.application_ids.application_id\",\n         \"frequency_plan_id\",\n         \"lorawan_phy_version\",\n         \"mac_settings.class_c_timeout\",\n         \"mac_settings.supports_32_bit_f_cnt\",\n         \"version_ids.band_id\"\n      ]\n   }\n}\n\nmsg.payload = register_name_server;\nmsg.headers = {};\nmsg.headers.Authorization = msg.tti_token;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 760,
    "y": 200,
    "wires": [
      [
        "5a1b49e415ee35dc"
      ]
    ]
  },
  {
    "id": "5a1b49e415ee35dc",
    "type": "http request",
    "z": "101718428de70120",
    "name": "name server",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://nam1.cloud.thethings.network/api/v3/ns/applications/{{{app_id}}}/devices",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 690,
    "y": 260,
    "wires": [
      [
        "c195ed1d211ff08d"
      ]
    ]
  },
  {
    "id": "c195ed1d211ff08d",
    "type": "function",
    "z": "101718428de70120",
    "name": "",
    "func": "let dev_id = msg.dev_id;\nlet dev_eui = msg.dev_eui;\nlet join_eui = msg.join_eui;\nlet app_id = msg.app_id;\n\nlet register_application_server = {\n   \"end_device\":{\n      \"ids\":{\n         \"device_id\": dev_id,\n         \"dev_eui\": dev_eui,\n         \"join_eui\": join_eui,\n         \"application_ids\":{\n            \"application_id\": app_id\n         }\n      },\n      \"version_ids\":{}\n   },\n   \"field_mask\":{\n      \"paths\":[\n         \"ids.device_id\",\n         \"ids.dev_eui\",\n         \"ids.join_eui\",\n         \"ids.application_ids.application_id\",\n         \"version_ids\"\n      ]\n   }\n}\n\nmsg.payload = register_application_server;\nmsg.headers = {};\nmsg.headers.Authorization = msg.tti_token;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 840,
    "y": 260,
    "wires": [
      [
        "75b76071b07f2f23"
      ]
    ]
  },
  {
    "id": "75b76071b07f2f23",
    "type": "http request",
    "z": "101718428de70120",
    "name": "app server",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://nam1.cloud.thethings.network/api/v3/as/applications/{{{app_id}}}/devices",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 730,
    "y": 320,
    "wires": [
      [
        "cc48325095a80a21"
      ]
    ]
  },
  {
    "id": "4d07ac4996dc1d74",
    "type": "http request",
    "z": "101718428de70120",
    "name": "join server",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://nam1.cloud.thethings.network/api/v3/js/applications/{{{app_id}}}/devices",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 770,
    "y": 380,
    "wires": [
      [
        "bcfa2c297dc4e7cf"
      ]
    ]
  },
  {
    "id": "cc48325095a80a21",
    "type": "function",
    "z": "101718428de70120",
    "name": "",
    "func": "let dev_id = msg.dev_id;\nlet dev_eui = msg.dev_eui;\nlet join_eui = msg.join_eui;\nlet app_id = msg.app_id;\nlet app_key = msg.app_key;\n\nlet register_join_server = {\n   \"end_device\":{\n      \"ids\":{\n         \"device_id\": dev_id,\n         \"dev_eui\": dev_eui,\n         \"join_eui\": join_eui,\n         \"application_ids\":{\n            \"application_id\": app_id\n         }\n      },\n      \"network_server_address\":\"nam1.cloud.thethings.network\",\n      \"application_server_address\":\"nam1.cloud.thethings.network\",\n      \"root_keys\":{\n         \"app_key\":{\n            \"key\": app_key\n         }\n      }\n   },\n   \"field_mask\":{\n      \"paths\":[\n         \"ids.device_id\",\n         \"ids.dev_eui\",\n         \"ids.join_eui\",\n         \"ids.application_ids.application_id\",\n         \"network_server_address\",\n         \"application_server_address\",\n         \"root_keys.app_key.key\"\n      ]\n   }\n}\n\nmsg.payload = register_join_server;\nmsg.headers = {};\nmsg.headers.Authorization = msg.tti_token;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 880,
    "y": 320,
    "wires": [
      [
        "4d07ac4996dc1d74"
      ]
    ]
  },
  {
    "id": "f62b460a0f72b0e5",
    "type": "ui_toast",
    "z": "101718428de70120",
    "position": "top right",
    "displayTime": "3",
    "highlight": "",
    "sendall": true,
    "outputs": 0,
    "ok": "OK",
    "cancel": "",
    "raw": false,
    "className": "",
    "topic": "",
    "name": "",
    "x": 1350,
    "y": 360,
    "wires": []
  },
  {
    "id": "bcfa2c297dc4e7cf",
    "type": "function",
    "z": "101718428de70120",
    "name": "",
    "func": "if (msg.statusCode == 200){\n    msg.payload = msg.dev_id + \" created successfully\";\n}\n\n\nlet dev_eui = msg.dev_eui.match(/.{1,2}/g);\nlet dev_eui_str = \"\";\nfor (let n=0, l=dev_eui.length; n<l; n++) {\n\tdev_eui_str += \"0x\" + dev_eui[n] + \", \";\n}\nmsg.dev_eui_str = dev_eui_str.replace(/,\\s*$/, \"\");\n\nlet join_eui = msg.join_eui.match(/.{1,2}/g);\nlet join_eui_str = \"\";\nfor (let n=0, l=join_eui.length; n<l; n++) {\n\tjoin_eui_str += \"0x\" + join_eui[n] + \", \";\n}\nmsg.join_eui_str = join_eui_str.replace(/,\\s*$/, \"\");\n\n\nlet app_key = msg.app_key.match(/.{1,2}/g);\nlet app_key_str = \"\";\nfor (let n=0, l=app_key.length; n<l; n++) {\n\tapp_key_str += \"0x\" + app_key[n] + \", \";\n}\nmsg.app_key_str = app_key_str.replace(/,\\s*$/, \"\");\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 920,
    "y": 380,
    "wires": [
      [
        "f62b460a0f72b0e5",
        "95d43463751127ad",
        "a456ce6dc4aef168",
        "08b296cf0165fe4e",
        "d7bc2ad0178a8538",
        "db17c8d1e844f1cd",
        "b3cfbad6b41d273f"
      ]
    ]
  },
  {
    "id": "1b05ea7224dd9ca3",
    "type": "ui_ui_control",
    "z": "101718428de70120",
    "name": "On load",
    "events": "connect",
    "x": 80,
    "y": 240,
    "wires": [
      [
        "acc9f8b02e7db096",
        "bebdf6dcffd9bcaa",
        "2ffd2efe70d8b162",
        "6705821b83fd7f73",
        "84e574eac8693c8f",
        "67ee6098cf942a88"
      ]
    ]
  },
  {
    "id": "acc9f8b02e7db096",
    "type": "change",
    "z": "101718428de70120",
    "name": "set def",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "ttn",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 230,
    "y": 240,
    "wires": [
      [
        "cf8c1e604a7e8a11"
      ]
    ]
  },
  {
    "id": "bebdf6dcffd9bcaa",
    "type": "change",
    "z": "101718428de70120",
    "name": "set def",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "range",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 230,
    "y": 300,
    "wires": [
      [
        "74087393325035f7"
      ]
    ]
  },
  {
    "id": "2ffd2efe70d8b162",
    "type": "change",
    "z": "101718428de70120",
    "name": "set def",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "psv",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 230,
    "y": 360,
    "wires": [
      [
        "0c9700d67847344a"
      ]
    ]
  },
  {
    "id": "6705821b83fd7f73",
    "type": "change",
    "z": "101718428de70120",
    "name": "set def",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "nyu_mk2",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 230,
    "y": 420,
    "wires": [
      [
        "3ab57096287dda8f"
      ]
    ]
  },
  {
    "id": "84e574eac8693c8f",
    "type": "change",
    "z": "101718428de70120",
    "name": "set def",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "micro",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 230,
    "y": 480,
    "wires": [
      [
        "c90888da15b9b25a"
      ]
    ]
  },
  {
    "id": "67ee6098cf942a88",
    "type": "change",
    "z": "101718428de70120",
    "name": "set def",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "floodnet-test",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 230,
    "y": 540,
    "wires": [
      [
        "0dbb9c7eef8cb3d4"
      ]
    ]
  },
  {
    "id": "31ce1c7723886059",
    "type": "function",
    "z": "101718428de70120",
    "name": "Set flow vars",
    "func": "flow.set(msg.var_name, msg.payload);\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 790,
    "y": 520,
    "wires": [
      []
    ]
  },
  {
    "id": "a456ce6dc4aef168",
    "type": "switch",
    "z": "101718428de70120",
    "name": "",
    "property": "statusCode",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "200",
        "vt": "num"
      },
      {
        "t": "neq",
        "v": "200",
        "vt": "num"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 1050,
    "y": 340,
    "wires": [
      [
        "0e9c0fb8036ca69c"
      ],
      [
        "a8538b7782c5fc8c"
      ]
    ]
  },
  {
    "id": "0e9c0fb8036ca69c",
    "type": "function",
    "z": "101718428de70120",
    "name": "",
    "func": "let meas_type = \"\";\n\nswitch (msg.dev_id.substring(0, 2)) {\n  case 'fs':\n    meas_type = \"flood-sensor\";\n    break;\n  case 'ts':\n    meas_type = \"tidal-sensor\";\n    break;\n  case 'rg':\n    meas_type = \"gateway-rain-gauge\";\n    break;\n}\n\nvar tags = {\n            dev_id: msg.dev_id,\n            dev_eui: msg.dev_eui,\n            network: flow.get(\"network\"),\n            sensor_types: flow.get(\"sensor_types\").join(),\n            built_by: flow.get(\"built_by\"),\n            design_ver: flow.get(\"design_ver\"),\n            housing: flow.get(\"housing\"),\n            app_name: flow.get(\"app_name\")\n        };\n\nvar fields = {\n            \"f_cnt\": 0\n        };\n\nmsg.bucket = flow.get(\"app_name\");\n\nmsg.payload = [\n    {\n        measurement: meas_type,\n        fields,\n        tags,\n        timestamp: Date.now()\n    }\n    ];\n    \nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1120,
    "y": 260,
    "wires": [
      [
        "63f3dacd9aa60509"
      ]
    ]
  },
  {
    "id": "4a4848eba73ecf9c",
    "type": "influxdb batch",
    "z": "101718428de70120",
    "influxdb": "4b9a03aed4358412",
    "precision": "",
    "retentionPolicy": "",
    "name": "Sensor data insert",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "floodnet",
    "bucket": "floodnet-live",
    "x": 1410,
    "y": 240,
    "wires": []
  },
  {
    "id": "e13c2b115ae6c405",
    "type": "change",
    "z": "101718428de70120",
    "name": "set var",
    "rules": [
      {
        "t": "set",
        "p": "var_name",
        "pt": "msg",
        "to": "network",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 490,
    "y": 240,
    "wires": [
      [
        "31ce1c7723886059"
      ]
    ]
  },
  {
    "id": "39fc015814128640",
    "type": "change",
    "z": "101718428de70120",
    "name": "set var",
    "rules": [
      {
        "t": "set",
        "p": "var_name",
        "pt": "msg",
        "to": "sensor_types",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 530,
    "y": 300,
    "wires": [
      [
        "31ce1c7723886059"
      ]
    ]
  },
  {
    "id": "07c0c2992678b86e",
    "type": "change",
    "z": "101718428de70120",
    "name": "set var",
    "rules": [
      {
        "t": "set",
        "p": "var_name",
        "pt": "msg",
        "to": "built_by",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 490,
    "y": 360,
    "wires": [
      [
        "31ce1c7723886059"
      ]
    ]
  },
  {
    "id": "505a67c8f2179f38",
    "type": "change",
    "z": "101718428de70120",
    "name": "set var",
    "rules": [
      {
        "t": "set",
        "p": "var_name",
        "pt": "msg",
        "to": "design_ver",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 530,
    "y": 420,
    "wires": [
      [
        "31ce1c7723886059"
      ]
    ]
  },
  {
    "id": "89ab5415ab2c45e1",
    "type": "change",
    "z": "101718428de70120",
    "name": "set var",
    "rules": [
      {
        "t": "set",
        "p": "var_name",
        "pt": "msg",
        "to": "housing",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 490,
    "y": 480,
    "wires": [
      [
        "31ce1c7723886059"
      ]
    ]
  },
  {
    "id": "a49e8c77b2264e56",
    "type": "change",
    "z": "101718428de70120",
    "name": "set var",
    "rules": [
      {
        "t": "set",
        "p": "var_name",
        "pt": "msg",
        "to": "app_name",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 510,
    "y": 540,
    "wires": [
      [
        "31ce1c7723886059"
      ]
    ]
  },
  {
    "id": "08b296cf0165fe4e",
    "type": "ui_text",
    "z": "101718428de70120",
    "group": "a8ccca99870fd736",
    "order": 4,
    "width": "6",
    "height": "2",
    "name": "",
    "label": "App key:",
    "format": "<font size = 2>{{msg.app_key_str}}",
    "layout": "row-left",
    "className": "",
    "x": 1340,
    "y": 520,
    "wires": []
  },
  {
    "id": "d7bc2ad0178a8538",
    "type": "ui_text",
    "z": "101718428de70120",
    "group": "a8ccca99870fd736",
    "order": 2,
    "width": "6",
    "height": "2",
    "name": "",
    "label": "Dev EUI:",
    "format": "<font size = 2>{{msg.dev_eui_str}}",
    "layout": "row-left",
    "className": "",
    "x": 1340,
    "y": 440,
    "wires": []
  },
  {
    "id": "db17c8d1e844f1cd",
    "type": "ui_text",
    "z": "101718428de70120",
    "group": "a8ccca99870fd736",
    "order": 3,
    "width": "6",
    "height": "2",
    "name": "",
    "label": "Join EUI:",
    "format": "<font size = 2>{{msg.join_eui_str}}",
    "layout": "row-left",
    "className": "",
    "x": 1340,
    "y": 480,
    "wires": []
  },
  {
    "id": "b3cfbad6b41d273f",
    "type": "ui_text",
    "z": "101718428de70120",
    "group": "a8ccca99870fd736",
    "order": 1,
    "width": "6",
    "height": "2",
    "name": "",
    "label": "Dev ID:",
    "format": "<font size = 3>{{msg.dev_id}}",
    "layout": "row-left",
    "className": "",
    "x": 1340,
    "y": 400,
    "wires": []
  },
  {
    "id": "a8538b7782c5fc8c",
    "type": "change",
    "z": "101718428de70120",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "dev_eui_str",
        "pt": "msg",
        "to": "",
        "tot": "str"
      },
      {
        "t": "set",
        "p": "join_eui_str",
        "pt": "msg",
        "to": "",
        "tot": "str"
      },
      {
        "t": "set",
        "p": "app_key_str",
        "pt": "msg",
        "to": "",
        "tot": "str"
      },
      {
        "t": "set",
        "p": "dev_id",
        "pt": "msg",
        "to": "Failed to create {{msg.dev_id}}",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1140,
    "y": 540,
    "wires": [
      [
        "b3cfbad6b41d273f",
        "d7bc2ad0178a8538",
        "db17c8d1e844f1cd",
        "08b296cf0165fe4e"
      ]
    ]
  },
  {
    "id": "1084b78c0a9e815d",
    "type": "change",
    "z": "101718428de70120",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "enabled",
        "pt": "msg",
        "to": "false",
        "tot": "bool"
      },
      {
        "t": "set",
        "p": "label",
        "pt": "msg",
        "to": "- creating...",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 180,
    "y": 120,
    "wires": [
      [
        "3102c66145ad20e4"
      ]
    ]
  },
  {
    "id": "eed505ce87c33466",
    "type": "change",
    "z": "101718428de70120",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "enabled",
        "pt": "msg",
        "to": "true",
        "tot": "bool"
      },
      {
        "t": "set",
        "p": "label",
        "pt": "msg",
        "to": "",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1000,
    "y": 140,
    "wires": [
      [
        "3102c66145ad20e4"
      ]
    ]
  },
  {
    "id": "7eea9fd8404f4ea2",
    "type": "link out",
    "z": "101718428de70120",
    "name": "Sensor list populate",
    "mode": "link",
    "links": [
      "e051a6c96ff4fbc1",
      "98541ff72be22b7c",
      "bf6b8afed0865c0d"
    ],
    "x": 645,
    "y": 820,
    "wires": []
  },
  {
    "id": "347aa4c5d4b90be9",
    "type": "debug",
    "z": "101718428de70120",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 710,
    "y": 100,
    "wires": []
  },
  {
    "id": "63f3dacd9aa60509",
    "type": "switch",
    "z": "101718428de70120",
    "name": "",
    "property": "bucket",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "floodnet-live",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "floodnet-lab",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "floodnet-test",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 3,
    "x": 1230,
    "y": 160,
    "wires": [
      [
        "2560988aeb59f40a"
      ],
      [
        "8e438ca87610149a"
      ],
      [
        "36cca0b70db8241c"
      ]
    ]
  },
  {
    "id": "2560988aeb59f40a",
    "type": "influxdb batch",
    "z": "101718428de70120",
    "influxdb": "4b9a03aed4358412",
    "precision": "",
    "retentionPolicy": "",
    "name": "Insert live",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "floodnet",
    "bucket": "floodnet-live",
    "x": 1400,
    "y": 80,
    "wires": []
  },
  {
    "id": "8e438ca87610149a",
    "type": "influxdb batch",
    "z": "101718428de70120",
    "influxdb": "4b9a03aed4358412",
    "precision": "",
    "retentionPolicy": "",
    "name": "Insert lab",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "floodnet",
    "bucket": "floodnet-lab",
    "x": 1400,
    "y": 120,
    "wires": []
  },
  {
    "id": "36cca0b70db8241c",
    "type": "influxdb batch",
    "z": "101718428de70120",
    "influxdb": "4b9a03aed4358412",
    "precision": "",
    "retentionPolicy": "",
    "name": "Insert test",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "floodnet",
    "bucket": "floodnet-test",
    "x": 1400,
    "y": 160,
    "wires": []
  },
  {
    "id": "8dcebf61b9f5f34f",
    "type": "function",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "func": "if (msg.payload.action == \"connected\"){\n    msg.payload={\n        \"name\": \"Sensor\",\n        \"draggable\": true,\n        \"lat\": 40.692826, \n        \"lon\": -73.987309,\n        \"icon\": \"times\"\n    };\n} else if (msg.payload.action == \"move\"){\n    flow.set('lat', msg.payload.lat);\n    flow.set('lon', msg.payload.lon);\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 500,
    "y": 100,
    "wires": [
      [
        "682ba9db7a18fead",
        "f210f7a55b64d794"
      ]
    ]
  },
  {
    "id": "682ba9db7a18fead",
    "type": "ui_worldmap",
    "z": "767ee0c79d6fcca5",
    "group": "a8bf5499468b4017",
    "order": 1,
    "width": "6",
    "height": "6",
    "name": "",
    "lat": "40.692826",
    "lon": "-73.987309",
    "zoom": "10",
    "layer": "OSMG",
    "cluster": "",
    "maxage": "",
    "usermenu": "hide",
    "layers": "hide",
    "panit": "true",
    "panlock": "false",
    "zoomlock": "false",
    "hiderightclick": "true",
    "coords": "deg",
    "showgrid": "false",
    "allowFileDrop": "false",
    "path": "/map",
    "overlist": "DR,CO,RA,DN,HM",
    "maplist": "OSMG,OSMC,OSMH,EsriC,EsriS,EsriT,EsriO,EsriDG,NatGeo,UKOS,OS45,OS00,OpTop,SW",
    "mapname": "",
    "mapurl": "",
    "mapopt": "",
    "mapwms": false,
    "x": 590,
    "y": 160,
    "wires": []
  },
  {
    "id": "eedde358d540e432",
    "type": "worldmap in",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "path": "/map",
    "events": "connect,disconnect,point,layer,bounds,files,draw,other",
    "x": 390,
    "y": 40,
    "wires": [
      [
        "8dcebf61b9f5f34f"
      ]
    ]
  },
  {
    "id": "e051a6c96ff4fbc1",
    "type": "link in",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "links": [
      "7eea9fd8404f4ea2"
    ],
    "x": 75,
    "y": 220,
    "wires": [
      [
        "35cce625abaadce8"
      ]
    ]
  },
  {
    "id": "4076dcc8436aa9f1",
    "type": "ui_dropdown",
    "z": "767ee0c79d6fcca5",
    "name": "Sensor type",
    "label": "Sensor type:",
    "tooltip": "",
    "place": "Sensor type",
    "group": "803f2d085a7b80f8",
    "order": 1,
    "width": 0,
    "height": 0,
    "passthru": true,
    "multiple": false,
    "options": [
      {
        "label": "Flood sensor",
        "value": "fs",
        "type": "str"
      },
      {
        "label": "Rain gauge",
        "value": "rg",
        "type": "str"
      },
      {
        "label": "Tidal sensor",
        "value": "ts",
        "type": "str"
      },
      {
        "label": "Old convention",
        "value": "fn",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "topic",
    "topicType": "msg",
    "className": "",
    "x": 370,
    "y": 220,
    "wires": [
      [
        "749b3817a4bc2996"
      ]
    ]
  },
  {
    "id": "749b3817a4bc2996",
    "type": "function",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "func": "var dev_array = flow.get(\"dev_array\");\n\nvar dev_type = msg.payload;\n\nconst filt_devs = dev_array.filter((dev) => {\n  return dev.includes(dev_type);\n}).sort();\n\nmsg.options = filt_devs;\nmsg.payload = filt_devs[0];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 520,
    "y": 220,
    "wires": [
      [
        "16d6041297e73d16"
      ]
    ]
  },
  {
    "id": "16d6041297e73d16",
    "type": "ui_dropdown",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "label": "Sensor ID:",
    "tooltip": "",
    "place": "Select option",
    "group": "803f2d085a7b80f8",
    "order": 2,
    "width": 0,
    "height": 0,
    "passthru": true,
    "multiple": false,
    "options": [
      {
        "label": "",
        "value": "",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "topic",
    "topicType": "msg",
    "className": "",
    "x": 670,
    "y": 220,
    "wires": [
      [
        "f8294c4b45b1d46e"
      ]
    ]
  },
  {
    "id": "35cce625abaadce8",
    "type": "function",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "func": "flow.set('dev_array', msg.dev_array);\nflow.set('app_name', msg.app_name);\nmsg.payload = \"fs\";\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 180,
    "y": 220,
    "wires": [
      [
        "4076dcc8436aa9f1",
        "97a20f37036a27e3",
        "6cf2e5ec9357fbdf",
        "181f5fd9c6c0624c",
        "f7ef4c98b6a25b06",
        "34ad60785a1988c5"
      ]
    ]
  },
  {
    "id": "e6a158a3f5a704e3",
    "type": "ui_button",
    "z": "767ee0c79d6fcca5",
    "name": "Deploy button",
    "group": "803f2d085a7b80f8",
    "order": 7,
    "width": 0,
    "height": 0,
    "passthru": false,
    "label": "Deploy {{payload}}",
    "tooltip": "",
    "color": "",
    "bgcolor": "",
    "className": "",
    "icon": "",
    "payload": "",
    "payloadType": "str",
    "topic": "topic",
    "topicType": "msg",
    "x": 920,
    "y": 320,
    "wires": [
      [
        "8c46d90e84cc9d2e"
      ]
    ]
  },
  {
    "id": "103dd60e2d228ceb",
    "type": "ui_text_input",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "label": "Deployment notes:",
    "tooltip": "",
    "group": "803f2d085a7b80f8",
    "order": 5,
    "width": "0",
    "height": "0",
    "passthru": true,
    "mode": "text",
    "delay": 300,
    "topic": "topic",
    "sendOnBlur": true,
    "className": "",
    "topicType": "msg",
    "x": 530,
    "y": 440,
    "wires": [
      [
        "8bbf23cd69bb9085"
      ]
    ]
  },
  {
    "id": "5cc76664eb2e354a",
    "type": "ui_date_picker",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "label": "Date deployed:",
    "group": "803f2d085a7b80f8",
    "order": 3,
    "width": 0,
    "height": 0,
    "passthru": true,
    "topic": "topic",
    "topicType": "msg",
    "className": "",
    "x": 520,
    "y": 400,
    "wires": [
      [
        "5b610bdee3c621d6"
      ]
    ]
  },
  {
    "id": "d96313776cbc733c",
    "type": "ui_dropdown",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "label": "Sensor mount:",
    "tooltip": "",
    "place": "Select option",
    "group": "803f2d085a7b80f8",
    "order": 4,
    "width": 0,
    "height": 0,
    "passthru": true,
    "multiple": false,
    "options": [
      {
        "label": "Drive rail",
        "value": "drive_rail",
        "type": "str"
      },
      {
        "label": "Light pole",
        "value": "light_pole",
        "type": "str"
      },
      {
        "label": "Utility pole",
        "value": "utility_pole",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "topic",
    "topicType": "msg",
    "className": "",
    "x": 520,
    "y": 300,
    "wires": [
      [
        "5c0bade66ca30c96"
      ]
    ]
  },
  {
    "id": "7bf8e3b835ea7f08",
    "type": "ui_text_input",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "label": "Community contact email:",
    "tooltip": "",
    "group": "803f2d085a7b80f8",
    "order": 6,
    "width": 0,
    "height": 0,
    "passthru": true,
    "mode": "email",
    "delay": 300,
    "topic": "topic",
    "sendOnBlur": true,
    "className": "",
    "topicType": "msg",
    "x": 560,
    "y": 480,
    "wires": [
      [
        "dd138fc967f66dda"
      ]
    ]
  },
  {
    "id": "97a20f37036a27e3",
    "type": "function",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "func": "msg.payload = new Date();\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 400,
    "wires": [
      [
        "5cc76664eb2e354a"
      ]
    ]
  },
  {
    "id": "6cf2e5ec9357fbdf",
    "type": "function",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "func": "msg.payload = \"drive_rail\";\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 300,
    "wires": [
      [
        "d96313776cbc733c"
      ]
    ]
  },
  {
    "id": "5832742686e44bc1",
    "type": "ui_text_input",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "label": "Street number:",
    "tooltip": "",
    "group": "15cc5b5e815472cf",
    "order": 1,
    "width": 0,
    "height": 0,
    "passthru": true,
    "mode": "text",
    "delay": 300,
    "topic": "topic",
    "sendOnBlur": true,
    "className": "",
    "topicType": "msg",
    "x": 1660,
    "y": 180,
    "wires": [
      []
    ]
  },
  {
    "id": "d65b61fb22a02ffc",
    "type": "ui_text_input",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "label": "Neighborhood:",
    "tooltip": "",
    "group": "15cc5b5e815472cf",
    "order": 3,
    "width": 0,
    "height": 0,
    "passthru": true,
    "mode": "text",
    "delay": 300,
    "topic": "topic",
    "sendOnBlur": true,
    "className": "",
    "topicType": "msg",
    "x": 1660,
    "y": 260,
    "wires": [
      []
    ]
  },
  {
    "id": "a1dc98bbd90a310a",
    "type": "ui_text_input",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "label": "Borough:",
    "tooltip": "",
    "group": "15cc5b5e815472cf",
    "order": 4,
    "width": 0,
    "height": 0,
    "passthru": true,
    "mode": "text",
    "delay": 300,
    "topic": "topic",
    "sendOnBlur": true,
    "className": "",
    "topicType": "msg",
    "x": 1640,
    "y": 300,
    "wires": [
      []
    ]
  },
  {
    "id": "30e80340276d2dce",
    "type": "ui_text_input",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "label": "Zipcode:",
    "tooltip": "",
    "group": "15cc5b5e815472cf",
    "order": 5,
    "width": 0,
    "height": 0,
    "passthru": true,
    "mode": "text",
    "delay": 300,
    "topic": "topic",
    "sendOnBlur": true,
    "className": "",
    "topicType": "msg",
    "x": 1640,
    "y": 340,
    "wires": [
      []
    ]
  },
  {
    "id": "41621814db10d7fd",
    "type": "ui_button",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "group": "a8bf5499468b4017",
    "order": 2,
    "width": 0,
    "height": 0,
    "passthru": false,
    "label": "Geocode",
    "tooltip": "",
    "color": "",
    "bgcolor": "",
    "className": "",
    "icon": "",
    "payload": "",
    "payloadType": "str",
    "topic": "topic",
    "topicType": "msg",
    "x": 940,
    "y": 100,
    "wires": [
      [
        "081dafca34fef441",
        "10d3d19c0e2e8680"
      ]
    ]
  },
  {
    "id": "87a626e75ed5293a",
    "type": "http request",
    "z": "767ee0c79d6fcca5",
    "name": "Rev geocode",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://maps.googleapis.com/maps/api/geocode/json?latlng={{lat}},{{lon}}&key={{gkey}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 1110,
    "y": 260,
    "wires": [
      [
        "742fd0ca758c426e"
      ]
    ]
  },
  {
    "id": "081dafca34fef441",
    "type": "function",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "func": "msg.lat = flow.get(\"lat\");\nmsg.lon = flow.get(\"lon\");\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1120,
    "y": 140,
    "wires": [
      [
        "9cb52c9249da41a4"
      ]
    ]
  },
  {
    "id": "742fd0ca758c426e",
    "type": "function",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "func": "let loc_results = msg.payload.results;\n\nfor (let n=0, l=loc_results.length; n<l; n++) {\n    let loc_el = loc_results[n];\n    \n    if (loc_el.types[0] == \"neighborhood\"){\n        msg.sensor_address_neighborhood = loc_el.address_components[0].short_name;\n        flow.set('sensor_address_neighborhood', msg.sensor_address_neighborhood);\n        break;\n    }\n}\n\nlet loc_parts = msg.payload.results[0].address_components;\n\nfor (let n=0, l=loc_parts.length; n<l; n++) {\n    if (loc_parts[n].types[0] == \"street_number\"){\n        msg.sensor_address_street_number = loc_parts[n].short_name;\n        flow.set('sensor_address_street_number', msg.sensor_address_street_number);\n    }\n    else if (loc_parts[n].types[0] == \"route\"){\n        msg.sensor_address_street = loc_parts[n].short_name;\n        flow.set('sensor_address_street', msg.sensor_address_street);\n    }\n    else if (loc_parts[n].types[2] == \"sublocality_level_1\"){\n        msg.sensor_address_borough = loc_parts[n].short_name;\n        flow.set('sensor_address_borough', msg.sensor_address_borough);\n    }\n    else if (loc_parts[n].types[0] == \"administrative_area_level_1\"){\n        msg.sensor_address_state = loc_parts[n].short_name;\n        flow.set('sensor_address_state', msg.sensor_address_state);\n    }\n    else if (loc_parts[n].types[0] == \"postal_code\"){\n        msg.sensor_address_zip = loc_parts[n].short_name;\n        flow.set('sensor_address_zip', msg.sensor_address_zip);\n    }\n\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1140,
    "y": 320,
    "wires": [
      [
        "6320e19d1a4a80ed",
        "6dbd79d3a8683524",
        "1265cbc62dcb5dd1",
        "d449809f531ab9c0",
        "15f3d7370b8a7cd7",
        "5f0d0bf418bd129a"
      ]
    ]
  },
  {
    "id": "9cb52c9249da41a4",
    "type": "credentials",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "props": [
      {
        "value": "gkey",
        "type": "msg"
      }
    ],
    "x": 1110,
    "y": 200,
    "wires": [
      [
        "87a626e75ed5293a"
      ]
    ]
  },
  {
    "id": "c7ef3659c981d265",
    "type": "ui_text_input",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "label": "Street name:",
    "tooltip": "",
    "group": "15cc5b5e815472cf",
    "order": 2,
    "width": 0,
    "height": 0,
    "passthru": true,
    "mode": "text",
    "delay": 300,
    "topic": "topic",
    "sendOnBlur": true,
    "className": "",
    "topicType": "msg",
    "x": 1650,
    "y": 220,
    "wires": [
      []
    ]
  },
  {
    "id": "7353b0e4a46b4f0f",
    "type": "ui_text_input",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "label": "State:",
    "tooltip": "",
    "group": "15cc5b5e815472cf",
    "order": 6,
    "width": 0,
    "height": 0,
    "passthru": true,
    "mode": "text",
    "delay": 300,
    "topic": "topic",
    "sendOnBlur": true,
    "className": "",
    "topicType": "msg",
    "x": 1630,
    "y": 380,
    "wires": [
      []
    ]
  },
  {
    "id": "6320e19d1a4a80ed",
    "type": "change",
    "z": "767ee0c79d6fcca5",
    "name": "Set payload",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "sensor_address_street_number",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1350,
    "y": 180,
    "wires": [
      [
        "5832742686e44bc1"
      ]
    ]
  },
  {
    "id": "6dbd79d3a8683524",
    "type": "change",
    "z": "767ee0c79d6fcca5",
    "name": "Set payload",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "sensor_address_street",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1350,
    "y": 220,
    "wires": [
      [
        "c7ef3659c981d265"
      ]
    ]
  },
  {
    "id": "1265cbc62dcb5dd1",
    "type": "change",
    "z": "767ee0c79d6fcca5",
    "name": "Set payload",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "sensor_address_neighborhood",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1350,
    "y": 260,
    "wires": [
      [
        "d65b61fb22a02ffc"
      ]
    ]
  },
  {
    "id": "d449809f531ab9c0",
    "type": "change",
    "z": "767ee0c79d6fcca5",
    "name": "Set payload",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "sensor_address_borough",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1350,
    "y": 300,
    "wires": [
      [
        "a1dc98bbd90a310a"
      ]
    ]
  },
  {
    "id": "15f3d7370b8a7cd7",
    "type": "change",
    "z": "767ee0c79d6fcca5",
    "name": "Set payload",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "sensor_address_zip",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1350,
    "y": 340,
    "wires": [
      [
        "30e80340276d2dce"
      ]
    ]
  },
  {
    "id": "5f0d0bf418bd129a",
    "type": "change",
    "z": "767ee0c79d6fcca5",
    "name": "Set payload",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "sensor_address_state",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1350,
    "y": 380,
    "wires": [
      [
        "7353b0e4a46b4f0f"
      ]
    ]
  },
  {
    "id": "10d3d19c0e2e8680",
    "type": "change",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1330,
    "y": 120,
    "wires": [
      [
        "5832742686e44bc1",
        "c7ef3659c981d265",
        "d65b61fb22a02ffc",
        "a1dc98bbd90a310a",
        "30e80340276d2dce",
        "7353b0e4a46b4f0f"
      ]
    ]
  },
  {
    "id": "181f5fd9c6c0624c",
    "type": "change",
    "z": "767ee0c79d6fcca5",
    "name": "Clear text",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 360,
    "y": 440,
    "wires": [
      [
        "103dd60e2d228ceb"
      ]
    ]
  },
  {
    "id": "f7ef4c98b6a25b06",
    "type": "change",
    "z": "767ee0c79d6fcca5",
    "name": "Clear text",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 360,
    "y": 480,
    "wires": [
      [
        "7bf8e3b835ea7f08"
      ]
    ]
  },
  {
    "id": "98541ff72be22b7c",
    "type": "link in",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "links": [
      "7eea9fd8404f4ea2"
    ],
    "x": 1005,
    "y": 20,
    "wires": [
      [
        "10d3d19c0e2e8680"
      ]
    ]
  },
  {
    "id": "f210f7a55b64d794",
    "type": "switch",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "property": "payload.action",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "move",
        "vt": "str"
      },
      {
        "t": "cont",
        "v": "connect",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 630,
    "y": 100,
    "wires": [
      [
        "af1904f96b825f32"
      ],
      [
        "738247b9662c513a"
      ]
    ]
  },
  {
    "id": "738247b9662c513a",
    "type": "change",
    "z": "767ee0c79d6fcca5",
    "name": "disable",
    "rules": [
      {
        "t": "set",
        "p": "enabled",
        "pt": "msg",
        "to": "false",
        "tot": "bool"
      },
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "dev_id",
        "tot": "flow"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 740,
    "y": 160,
    "wires": [
      [
        "41621814db10d7fd",
        "e6a158a3f5a704e3"
      ]
    ]
  },
  {
    "id": "af1904f96b825f32",
    "type": "change",
    "z": "767ee0c79d6fcca5",
    "name": "enable",
    "rules": [
      {
        "t": "set",
        "p": "enabled",
        "pt": "msg",
        "to": "true",
        "tot": "bool"
      },
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "dev_id",
        "tot": "flow"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 730,
    "y": 40,
    "wires": [
      [
        "41621814db10d7fd",
        "e6a158a3f5a704e3"
      ]
    ]
  },
  {
    "id": "8c46d90e84cc9d2e",
    "type": "function",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "func": "let meas_type = \"\";\nlet dev_id = flow.get(\"dev_id\");\nlet lat = flow.get(\"lat\");\nlet lon = flow.get(\"lon\");\n\nswitch (dev_id.substring(0, 2)) {\n  case 'fs':\n    meas_type = \"flood-sensor\";\n    break;\n  case 'ts':\n    meas_type = \"tidal-sensor\";\n    break;\n  case 'rg':\n    meas_type = \"gateway-rain-gauge\";\n    break;\n}\n\nvar tags = {\n            dev_id: dev_id,\n            lat: lat,\n            lon: lon,\n            sensor_address_street_number: flow.get('sensor_address_street_number'),\n            sensor_address_street: flow.get('sensor_address_street'),\n            sensor_address_neighborhood: flow.get('sensor_address_neighborhood'),\n            sensor_address_borough: flow.get('sensor_address_borough'),\n            sensor_address_state: flow.get('sensor_address_state'),\n            sensor_address_zip: flow.get('sensor_address_zip'),\n            date_deployed: flow.get('date_deployed'),\n            sensor_mount: flow.get('sensor_mount'),\n            community_name: flow.get('community_name'),\n            visit_note: flow.get('visit_note'),\n            deployment_id: flow.get('deployment_id')\n        };\n\nvar fields = {\n            \"f_cnt\": 0\n        };\n\nmsg.bucket = flow.get(\"app_name\");\nmsg.dev_id = dev_id;\nmsg.deployment_id = flow.get('deployment_id');\n\nmsg.lookup_content = msg.dev_id + \",\" + msg.deployment_id\n\nmsg.payload = [\n    {\n        measurement: meas_type,\n        fields,\n        tags,\n        timestamp: Date.now()\n    }\n    ];\n    \nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1100,
    "y": 400,
    "wires": [
      [
        "fa826cb74f47e2d3",
        "acb8d44b88d09024"
      ]
    ]
  },
  {
    "id": "f8294c4b45b1d46e",
    "type": "function",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "func": "flow.set('dev_id', msg.payload);\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 900,
    "y": 220,
    "wires": [
      [
        "e6a158a3f5a704e3"
      ]
    ]
  },
  {
    "id": "5b610bdee3c621d6",
    "type": "function",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "func": "flow.set('date_deployed', msg.payload);\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 700,
    "y": 400,
    "wires": [
      []
    ]
  },
  {
    "id": "8bbf23cd69bb9085",
    "type": "function",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "func": "flow.set('visit_note', msg.payload);\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 700,
    "y": 440,
    "wires": [
      []
    ]
  },
  {
    "id": "dd138fc967f66dda",
    "type": "function",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "func": "flow.set('community_name', msg.payload);\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 760,
    "y": 480,
    "wires": [
      []
    ]
  },
  {
    "id": "5c0bade66ca30c96",
    "type": "function",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "func": "flow.set('sensor_mount', msg.payload);\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 680,
    "y": 300,
    "wires": [
      []
    ]
  },
  {
    "id": "fa826cb74f47e2d3",
    "type": "influxdb batch",
    "z": "767ee0c79d6fcca5",
    "influxdb": "4b9a03aed4358412",
    "precision": "",
    "retentionPolicy": "",
    "name": "Sensor data insert",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "floodnet",
    "bucket": "floodnet-live",
    "x": 1330,
    "y": 440,
    "wires": []
  },
  {
    "id": "acb8d44b88d09024",
    "type": "debug",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1230,
    "y": 500,
    "wires": []
  },
  {
    "id": "e7ddf6ce3a3fe8be",
    "type": "function-npm",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "func": "const { uniqueNamesGenerator, adjectives, colors, animals } = require('unique-names-generator');\nconst randomName = uniqueNamesGenerator({ dictionaries: [adjectives, colors, animals] });\nmsg.payload = randomName;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 520,
    "y": 520,
    "wires": [
      [
        "fb8b3d7ad558aea9"
      ]
    ]
  },
  {
    "id": "34ad60785a1988c5",
    "type": "change",
    "z": "767ee0c79d6fcca5",
    "name": "Clear text",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "",
        "tot": "str"
      },
      {
        "t": "set",
        "p": "enabled",
        "pt": "msg",
        "to": "true",
        "tot": "bool"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 360,
    "y": 520,
    "wires": [
      [
        "e7ddf6ce3a3fe8be"
      ]
    ]
  },
  {
    "id": "fb8b3d7ad558aea9",
    "type": "ui_text_input",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "label": "Deployment ID:",
    "tooltip": "",
    "group": "803f2d085a7b80f8",
    "order": 6,
    "width": 0,
    "height": 0,
    "passthru": true,
    "mode": "text",
    "delay": 300,
    "topic": "topic",
    "sendOnBlur": true,
    "className": "",
    "topicType": "msg",
    "x": 700,
    "y": 520,
    "wires": [
      [
        "5a8b7b032ecaaef7"
      ]
    ]
  },
  {
    "id": "5a8b7b032ecaaef7",
    "type": "function",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "func": "flow.set('deployment_id', msg.payload);\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 860,
    "y": 520,
    "wires": [
      []
    ]
  },
  {
    "id": "dc6e7792e2fd268f",
    "type": "comment",
    "z": "767ee0c79d6fcca5",
    "name": "Add app change code here before influx insert",
    "info": "",
    "x": 970,
    "y": 440,
    "wires": []
  },
  {
    "id": "b7dd6ab1de960e18",
    "type": "file",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "filename": "/data/sensor_meta/deploy_id_map.txt",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "false",
    "encoding": "none",
    "x": 890,
    "y": 640,
    "wires": [
      [
        "ac89786f93cdcb1d"
      ]
    ]
  },
  {
    "id": "ac89786f93cdcb1d",
    "type": "file in",
    "z": "767ee0c79d6fcca5",
    "name": "Read dep_id file",
    "filename": "/data/sensor_meta/deploy_id_map.txt",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "none",
    "allProps": false,
    "x": 1160,
    "y": 640,
    "wires": [
      [
        "93fa44542997aee6"
      ]
    ]
  },
  {
    "id": "5ea0987e2e33eecd",
    "type": "function",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "func": "var dev_list = [];\nmsg.payload.forEach((element) => {\n  dev_list.push(element.col1);\n});\n\nvar dev_dup_arr = [];\n\nfor(let i = 0; i < dev_list.length;i++) {\n    if(dev_list[i] == msg.dev_id) {\n        dev_dup_arr.push(i)\n    }\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1480,
    "y": 640,
    "wires": [
      [
        "595b25860f950148"
      ]
    ]
  },
  {
    "id": "93fa44542997aee6",
    "type": "csv",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "sep": ",",
    "hdrin": "",
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 1330,
    "y": 640,
    "wires": [
      [
        "5ea0987e2e33eecd",
        "6cdb2eed6d733104"
      ]
    ]
  },
  {
    "id": "595b25860f950148",
    "type": "debug",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 1650,
    "y": 640,
    "wires": []
  },
  {
    "id": "ffcad12cb890f882",
    "type": "inject",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "fs-00001,lary_red_mouse",
    "payloadType": "str",
    "x": 610,
    "y": 640,
    "wires": [
      [
        "b7dd6ab1de960e18"
      ]
    ]
  },
  {
    "id": "6cdb2eed6d733104",
    "type": "debug",
    "z": "767ee0c79d6fcca5",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 1470,
    "y": 580,
    "wires": []
  },
  {
    "id": "bf6b8afed0865c0d",
    "type": "link in",
    "z": "e63e21ac547645de",
    "name": "",
    "links": [
      "7eea9fd8404f4ea2"
    ],
    "x": 125,
    "y": 40,
    "wires": [
      [
        "b815601c14e2bded"
      ]
    ]
  },
  {
    "id": "b815601c14e2bded",
    "type": "function",
    "z": "e63e21ac547645de",
    "name": "",
    "func": "flow.set('dev_array', msg.dev_array);\nflow.set('app_id', msg.app_name);\nmsg.app_id = msg.app_name;\nmsg.payload = \"fs\";\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 230,
    "y": 40,
    "wires": [
      [
        "1fe7b77cee96508a"
      ]
    ]
  },
  {
    "id": "1fe7b77cee96508a",
    "type": "ui_dropdown",
    "z": "e63e21ac547645de",
    "name": "Sensor type",
    "label": "Sensor type:",
    "tooltip": "",
    "place": "Sensor type",
    "group": "b0207c7b4d5ca6a1",
    "order": 1,
    "width": 0,
    "height": 0,
    "passthru": true,
    "multiple": false,
    "options": [
      {
        "label": "Flood sensor",
        "value": "fs",
        "type": "str"
      },
      {
        "label": "Rain gauge",
        "value": "rg",
        "type": "str"
      },
      {
        "label": "Tidal sensor",
        "value": "ts",
        "type": "str"
      },
      {
        "label": "Old convention",
        "value": "fn",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "topic",
    "topicType": "msg",
    "className": "",
    "x": 420,
    "y": 40,
    "wires": [
      [
        "aef31ddcf80e729c"
      ]
    ]
  },
  {
    "id": "aef31ddcf80e729c",
    "type": "function",
    "z": "e63e21ac547645de",
    "name": "",
    "func": "var dev_array = flow.get(\"dev_array\");\n\nvar dev_type = msg.payload;\n\nconst filt_devs = dev_array.filter((dev) => {\n  return dev.includes(dev_type);\n}).sort();\n\nmsg.options = filt_devs;\nmsg.payload = filt_devs[0];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 570,
    "y": 40,
    "wires": [
      [
        "2533fb071d2857c4"
      ]
    ]
  },
  {
    "id": "2533fb071d2857c4",
    "type": "ui_dropdown",
    "z": "e63e21ac547645de",
    "name": "",
    "label": "Sensor ID:",
    "tooltip": "",
    "place": "Select option",
    "group": "b0207c7b4d5ca6a1",
    "order": 2,
    "width": 0,
    "height": 0,
    "passthru": true,
    "multiple": true,
    "options": [
      {
        "label": "",
        "value": "",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "topic",
    "topicType": "msg",
    "className": "",
    "x": 720,
    "y": 40,
    "wires": [
      [
        "67bdc6efbb6b1c3d"
      ]
    ]
  },
  {
    "id": "854cb3bda7fca56a",
    "type": "function",
    "z": "e63e21ac547645de",
    "name": "",
    "func": "let dev_id = msg.dev_id;\nlet dev_eui = msg.dev_eui;\nlet join_eui = msg.join_eui;\nlet app_id = msg.app_id;\n\nlet create_device = {\n   \"end_device\":{\n      \"name\": dev_id,\n      \"description\": dev_id,\n      \"ids\":{\n         \"device_id\": dev_id,\n         \"dev_eui\": dev_eui,\n         \"join_eui\": join_eui\n      },\n      \"join_server_address\":\"nam1.cloud.thethings.network\",\n      \"network_server_address\":\"nam1.cloud.thethings.network\",\n      \"application_server_address\":\"nam1.cloud.thethings.network\",\n   },\n   \"field_mask\":{\n      \"paths\":[\n         \"join_server_address\",\n         \"network_server_address\",\n         \"application_server_address\"\n      ]\n   }\n}\n\nmsg.payload = create_device;\nmsg.headers = {};\nmsg.headers.Authorization = msg.tti_token;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 580,
    "y": 280,
    "wires": [
      [
        "c802342255ad2205"
      ]
    ]
  },
  {
    "id": "c802342255ad2205",
    "type": "http request",
    "z": "e63e21ac547645de",
    "name": "dev create",
    "method": "DELETE",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://eu1.cloud.thethings.network/api/v3/applications/{{{app_id}}}/devices/{{{dev_id}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 730,
    "y": 280,
    "wires": [
      [
        "e18589d21b0ec2a7",
        "a38c31443c452419"
      ]
    ]
  },
  {
    "id": "7edbede61f58ffb5",
    "type": "function",
    "z": "e63e21ac547645de",
    "name": "",
    "func": "let dev_id = msg.dev_id;\nlet dev_eui = msg.dev_eui;\nlet join_eui = msg.join_eui;\nlet app_id = msg.app_id;\n\n\n\nlet register_name_server = {\n   \"end_device\":{\n      \"supports_join\": true,\n      \"supports_class_c\": true,\n    //   \"multicast\": true,\n      \"lorawan_version\": \"MAC_V1_0_3\",\n      \"ids\":{\n         \"device_id\": dev_id,\n         \"dev_eui\": dev_eui,\n         \"join_eui\": join_eui,\n         \"application_ids\":{\n            \"application_id\": app_id\n         }\n      },\n      \"frequency_plan_id\":\"US_902_928_FSB_2\",\n      \"lorawan_phy_version\":\"PHY_V1_0_3_REV_A\",\n      \"mac_settings\":{\n         \"class_c_timeout\":\"60s\",\n         \"supports_32_bit_f_cnt\": true\n      },\n      \"version_ids\":{\n          \"band_id\":\"US_902_928\"\n      }\n   },\n   \"field_mask\":{\n      \"paths\":[\n         \"supports_join\",\n         \"supports_class_c\",\n        //  \"multicast\",\n         \"lorawan_version\",\n         \"ids.device_id\",\n         \"ids.dev_eui\",\n         \"ids.join_eui\",\n         \"ids.application_ids.application_id\",\n         \"frequency_plan_id\",\n         \"lorawan_phy_version\",\n         \"mac_settings.class_c_timeout\",\n         \"mac_settings.supports_32_bit_f_cnt\",\n         \"version_ids.band_id\"\n      ]\n   }\n}\n\nmsg.payload = register_name_server;\nmsg.headers = {};\nmsg.headers.Authorization = msg.tti_token;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 280,
    "y": 280,
    "wires": [
      [
        "d6fa70a680a45b25"
      ]
    ]
  },
  {
    "id": "d6fa70a680a45b25",
    "type": "http request",
    "z": "e63e21ac547645de",
    "name": "name server",
    "method": "DELETE",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://nam1.cloud.thethings.network/api/v3/ns/applications/{{{app_id}}}/devices/{{{dev_id}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 430,
    "y": 280,
    "wires": [
      [
        "854cb3bda7fca56a"
      ]
    ]
  },
  {
    "id": "e064a072a8b695ab",
    "type": "function",
    "z": "e63e21ac547645de",
    "name": "",
    "func": "let dev_id = msg.dev_id;\nlet dev_eui = msg.dev_eui;\nlet join_eui = msg.join_eui;\nlet app_id = msg.app_id;\n\nlet register_application_server = {\n   \"end_device\":{\n      \"ids\":{\n         \"device_id\": dev_id,\n         \"dev_eui\": dev_eui,\n         \"join_eui\": join_eui,\n         \"application_ids\":{\n            \"application_id\": app_id\n         }\n      },\n      \"version_ids\":{}\n   },\n   \"field_mask\":{\n      \"paths\":[\n         \"ids.device_id\",\n         \"ids.dev_eui\",\n         \"ids.join_eui\",\n         \"ids.application_ids.application_id\",\n         \"version_ids\"\n      ]\n   }\n}\n\nmsg.payload = register_application_server;\nmsg.headers = {};\nmsg.headers.Authorization = msg.tti_token;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 600,
    "y": 220,
    "wires": [
      [
        "777484746c701b38"
      ]
    ]
  },
  {
    "id": "777484746c701b38",
    "type": "http request",
    "z": "e63e21ac547645de",
    "name": "app server",
    "method": "DELETE",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://nam1.cloud.thethings.network/api/v3/as/applications/{{{app_id}}}/devices/{{{dev_id}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 750,
    "y": 220,
    "wires": [
      [
        "7edbede61f58ffb5"
      ]
    ]
  },
  {
    "id": "828f10d08edf2e15",
    "type": "function",
    "z": "e63e21ac547645de",
    "name": "",
    "func": "let dev_id = msg.dev_id;\nlet dev_eui = \"\";\nlet join_eui = \"0000000000000000\";\nlet app_id = msg.app_id;\n\n\nfor (let n=0, l=dev_id.length; n<l; n++) \n     {\n\t\tvar hex = Number(dev_id.charCodeAt(n)).toString(16);\n\t\tdev_eui += hex;\n\t }\n\t \n\nmsg.dev_id = dev_id;\nmsg.dev_eui = dev_eui;\nmsg.join_eui = join_eui;\nmsg.app_id = app_id;\n\nlet register_join_server = {\n   \"end_device\":{\n      \"ids\":{\n         \"device_id\": dev_id,\n         \"dev_eui\": dev_eui,\n         \"join_eui\": join_eui\n      },\n      \"network_server_address\":\"nam1.cloud.thethings.network\",\n      \"application_server_address\":\"nam1.cloud.thethings.network\"\n   },\n   \"field_mask\":{\n      \"paths\":[\n         \"ids.device_id\",\n         \"ids.dev_eui\",\n         \"ids.join_eui\",\n         \"network_server_address\",\n         \"application_server_address\"\n      ]\n   }\n}\n\nmsg.payload = register_join_server;\nmsg.headers = {};\nmsg.headers.Authorization = msg.tti_token;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 300,
    "y": 220,
    "wires": [
      [
        "f9afd1c877d7f0c6"
      ]
    ]
  },
  {
    "id": "f9afd1c877d7f0c6",
    "type": "http request",
    "z": "e63e21ac547645de",
    "name": "join server",
    "method": "DELETE",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://nam1.cloud.thethings.network/api/v3/js/applications/{{{app_id}}}/devices/{{{dev_id}}}",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 450,
    "y": 220,
    "wires": [
      [
        "e064a072a8b695ab"
      ]
    ]
  },
  {
    "id": "e18589d21b0ec2a7",
    "type": "debug",
    "z": "e63e21ac547645de",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 990,
    "y": 200,
    "wires": []
  },
  {
    "id": "c44e3c1db185f029",
    "type": "credentials",
    "z": "e63e21ac547645de",
    "name": "TTI token store",
    "props": [
      {
        "value": "tti_user",
        "type": "msg"
      },
      {
        "value": "tti_token",
        "type": "msg"
      }
    ],
    "x": 140,
    "y": 220,
    "wires": [
      [
        "828f10d08edf2e15"
      ]
    ]
  },
  {
    "id": "c90ecd6515714e53",
    "type": "split",
    "z": "e63e21ac547645de",
    "name": "",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 450,
    "y": 160,
    "wires": [
      [
        "de475b0d543bb171"
      ]
    ]
  },
  {
    "id": "de475b0d543bb171",
    "type": "change",
    "z": "e63e21ac547645de",
    "name": "",
    "rules": [
      {
        "t": "move",
        "p": "payload",
        "pt": "msg",
        "to": "dev_id",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 610,
    "y": 160,
    "wires": [
      [
        "b68d74deccb304eb"
      ]
    ]
  },
  {
    "id": "b68d74deccb304eb",
    "type": "delay",
    "z": "e63e21ac547645de",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "2",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "allowrate": false,
    "outputs": 1,
    "x": 790,
    "y": 160,
    "wires": [
      [
        "c44e3c1db185f029"
      ]
    ]
  },
  {
    "id": "2353fcc875d02a21",
    "type": "ui_button",
    "z": "e63e21ac547645de",
    "name": "",
    "group": "b0207c7b4d5ca6a1",
    "order": 2,
    "width": 0,
    "height": 0,
    "passthru": false,
    "label": "Delete device(s)",
    "tooltip": "",
    "color": "",
    "bgcolor": "",
    "className": "",
    "icon": "",
    "payload": "",
    "payloadType": "str",
    "topic": "topic",
    "topicType": "msg",
    "x": 160,
    "y": 160,
    "wires": [
      [
        "982e81a10ba32cb9"
      ]
    ]
  },
  {
    "id": "67bdc6efbb6b1c3d",
    "type": "function",
    "z": "e63e21ac547645de",
    "name": "",
    "func": "flow.set('delete_array', msg.payload);\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 880,
    "y": 40,
    "wires": [
      []
    ]
  },
  {
    "id": "982e81a10ba32cb9",
    "type": "function",
    "z": "e63e21ac547645de",
    "name": "",
    "func": "let delete_array = flow.get(\"delete_array\");\nmsg.payload = delete_array;\nmsg.app_id = flow.get('app_id');\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 320,
    "y": 160,
    "wires": [
      [
        "c90ecd6515714e53"
      ]
    ]
  },
  {
    "id": "ed41573b498b146d",
    "type": "ui_toast",
    "z": "e63e21ac547645de",
    "position": "top right",
    "displayTime": "3",
    "highlight": "",
    "sendall": true,
    "outputs": 0,
    "ok": "OK",
    "cancel": "",
    "raw": false,
    "className": "",
    "topic": "",
    "name": "",
    "x": 990,
    "y": 380,
    "wires": []
  },
  {
    "id": "a38c31443c452419",
    "type": "function",
    "z": "e63e21ac547645de",
    "name": "",
    "func": "msg.payload = \"Deleted: \" + msg.dev_id;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 900,
    "y": 280,
    "wires": [
      [
        "ed41573b498b146d"
      ]
    ]
  },
  {
    "id": "2d3dafa759849701",
    "type": "debug",
    "z": "41b751a153893032",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 710,
    "y": 860,
    "wires": []
  },
  {
    "id": "9ca3c022c6a0eb66",
    "type": "exec",
    "z": "41b751a153893032",
    "command": "/usr/local/bin/influx delete --bucket \"{{{payload}}}\" -o floodnet --start '1970-01-01T00:00:00Z' --stop '2025-12-31T23:59:00Z'",
    "addpay": "",
    "append": "",
    "useSpawn": "false",
    "timer": "",
    "winHide": false,
    "oldrc": false,
    "name": "Execute command",
    "x": 420,
    "y": 860,
    "wires": [
      [
        "2d3dafa759849701"
      ],
      [
        "2d3dafa759849701"
      ],
      [
        "2d3dafa759849701"
      ]
    ]
  },
  {
    "id": "662442ec9d407a17",
    "type": "inject",
    "z": "41b751a153893032",
    "name": "",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "floodnet-test",
    "payloadType": "str",
    "x": 170,
    "y": 860,
    "wires": [
      [
        "9ca3c022c6a0eb66"
      ]
    ]
  },
  {
    "id": "932bf5c3c09cdccd",
    "type": "exec",
    "z": "41b751a153893032",
    "command": "python3 --version",
    "addpay": "",
    "append": "",
    "useSpawn": "false",
    "timer": "",
    "winHide": false,
    "oldrc": false,
    "name": "",
    "x": 550,
    "y": 1000,
    "wires": [
      [
        "12e5ae592c04939f"
      ],
      [
        "12e5ae592c04939f"
      ],
      [
        "12e5ae592c04939f"
      ]
    ]
  },
  {
    "id": "df389beab2fcffc9",
    "type": "inject",
    "z": "41b751a153893032",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 260,
    "y": 1020,
    "wires": [
      [
        "932bf5c3c09cdccd"
      ]
    ]
  },
  {
    "id": "12e5ae592c04939f",
    "type": "debug",
    "z": "41b751a153893032",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 870,
    "y": 1080,
    "wires": []
  },
  {
    "id": "05306c2848c4de07",
    "type": "inject",
    "z": "41b751a153893032",
    "name": "update payload",
    "props": [
      {
        "p": "topic",
        "vt": "str"
      },
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"deployment_id\":\"humbly_modest_vervet\",\"sensor_status\":\"down\",\"fk_status\":\"hidden\"}",
    "payloadType": "json",
    "x": 160,
    "y": 100,
    "wires": [
      [
        "55964170e772dc22"
      ]
    ]
  },
  {
    "id": "55964170e772dc22",
    "type": "function",
    "z": "41b751a153893032",
    "name": "Build Request",
    "func": "msg.headers = {};\nmsg.method = \"POST\";\nmsg.url = 'https://api.fieldkit.org/ttn/webhook?token=33af8a9e936d2ec4c217de125ccfc4b9';\nmsg.headers[\"Content-Type\"]=\"application/json\";\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 100,
    "wires": [
      [
        "a340971b5beb0434"
      ]
    ]
  },
  {
    "id": "a340971b5beb0434",
    "type": "http request",
    "z": "41b751a153893032",
    "name": "",
    "method": "use",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 550,
    "y": 100,
    "wires": [
      [
        "7ae935df74f80fbd"
      ]
    ]
  },
  {
    "id": "7ae935df74f80fbd",
    "type": "function",
    "z": "41b751a153893032",
    "name": "Check Error",
    "func": "if(msg.statusCode >= 200 && msg.statusCode < 300){\n    msg.response_fail = false;\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 730,
    "y": 100,
    "wires": [
      [
        "087dbb635efd79a6"
      ]
    ]
  },
  {
    "id": "087dbb635efd79a6",
    "type": "debug",
    "z": "41b751a153893032",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 890,
    "y": 100,
    "wires": []
  },
  {
    "id": "c991f7fe8b5e6b21",
    "type": "comment",
    "z": "41b751a153893032",
    "name": "Example full payload",
    "info": "`{\n  \"sensor_display_name\": \"SI - Willow Rd E/Nina Ave\",\n  \"design_ver\": \"nyu_mk3\",\n  \"built_by\": \"floodnet_psc\", \n  \"sensor_address_borough\": \"Staten Island\",\n  \"sensor_address_neighborhood\": \"Graniteville\",\n  \"sensor_address_zip\": 10314,\n  \"sensor_address_state\": \"NY\",\n  \"date_deployed\": \"2022-07-22T17:00:00-05:00\",\n  \"date_down\": \"\",\n  \"deployment_id\": \"asleep_apricot_bedbug\",\n  \"sensor_types\": [\"range\"],\n  \"lat\": 40.61133023,\n  \"lon\": -74.1510578,\n  \"deploy_type\": \"pluvial\",\n  \"nearest_weather_station\": \"nyc-micronet-sifkil\",\n  \"nearest_tidal_id\": \"\",\n  \"community_contact_name\": \"\",\n  \"sensor_state\": \"started\",\n  \"sensor_agg\": \"median\",\n  \"sensor_sleep_s\": 60,\n  \"sensor_meas_delta_ms\": 150,\n  \"sensor_reading_count\": 5,\n  \"app_name\": \"floodnet-live\",\n  \"mounted_over\": \"Sidewalk\",\n  \"sensor_mount\": \"Street signpost\",\n  \"deployed_by\": \"FloodNet\",\n  \"sensor_status\": \"up\",\n  \"fk_status\": \"visible\"\n}`",
    "x": 170,
    "y": 160,
    "wires": []
  },
  {
    "id": "3a5c789d284e9be5",
    "type": "http in",
    "z": "41b751a153893032",
    "name": "Senet endpoint",
    "url": "/senet",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 280,
    "y": 400,
    "wires": [
      [
        "ed8b6a23239c8086",
        "f62a9539afb8a385",
        "607329a05527673e"
      ]
    ]
  },
  {
    "id": "ed8b6a23239c8086",
    "type": "http response",
    "z": "41b751a153893032",
    "name": "",
    "statusCode": "",
    "headers": {},
    "x": 490,
    "y": 500,
    "wires": []
  },
  {
    "id": "f62a9539afb8a385",
    "type": "function",
    "z": "41b751a153893032",
    "name": "Senet JSON processor",
    "func": "var uplink_payload = msg.payload[0];\nvar tags = {\n            dev_id: uplink_payload.metadata,\n            dev_eui: uplink_payload.devEui,\n            network: 'senet',\n            f_port: '' + uplink_payload[\"port\"],\n            ack: uplink_payload.ack,\n            lat: uplink_payload.cfgLat,\n            lng: uplink_payload.cfgLng,\n            devClass: uplink_payload.devClass,\n            gwEui: uplink_payload.gwEui,\n            \n        };\n\nvar fields = {\n            lora_freq_hz: parseInt(uplink_payload['freq']*1000000) + 'i',\n            datarate: uplink_payload['datarate'],\n            port: uplink_payload[\"port\"],\n            maxPayload: uplink_payload[\"maxPayload\"],\n            snr: uplink_payload['snr'],\n            rssi: uplink_payload['rssi'],\n            channel: uplink_payload[\"channel\"]\n        };\n\nif (uplink_payload['seqno'] + 'i' != 'undefinedi'){\n    fields.f_cnt = uplink_payload['seqno'] + 'i'\n}\n\nraw_payload = uplink_payload['pdu'];\n\nvar numBytes = raw_payload.length / 2;\nvar b = new Uint8Array(numBytes);\nfor (var i=0; i<numBytes; i++) {\n    b[i] = parseInt(raw_payload.substr(i*2, 2), 16);\n}\n\nvar dist_mm;\nvar batt_v; // payload[0].tags\n\nif (tags.dev_id.includes('e5')){\n    dist_mm = b[1]<<8 | b[0];\n    let batt_level_adc = b[3]<<8 | b[2];\n    batt_v = (batt_level_adc*3.3*23)/(4096*13);\n    batt_v = Number(batt_v.toFixed(3));\n} else{\n    dist_mm = b[4]<<8 | b[3];\n    batt_v = b[2]<<8 | b[1];\n    batt_v /= 1000;\n} \n// else if(tags.dev_id.includes('adeunis')){\n//  if(tags.dev_id.includes('micro')}\n\nfields['dist_mm'] = dist_mm;\nfields['batt_v']  = batt_v;\n\nmsg.payload = [\n    {\n        measurement: 'test',\n        fields,\n        tags,\n        timestamp: Date.now()\n    }\n];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 530,
    "y": 400,
    "wires": [
      [
        "a8da8cd178d832c6"
      ]
    ]
  },
  {
    "id": "a8da8cd178d832c6",
    "type": "influxdb batch",
    "z": "41b751a153893032",
    "influxdb": "4b9a03aed4358412",
    "precision": "",
    "retentionPolicy": "",
    "name": "senet test bucket",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "floodnet",
    "bucket": "senet",
    "x": 770,
    "y": 400,
    "wires": []
  },
  {
    "id": "9098198cbd865256",
    "type": "comment",
    "z": "41b751a153893032",
    "name": "todo",
    "info": "# Need to decode the following\ng/w_rx_time and tx_time",
    "x": 450,
    "y": 340,
    "wires": []
  },
  {
    "id": "803cc8330d8623f0",
    "type": "function",
    "z": "41b751a153893032",
    "name": "Adeunis JSON processor",
    "func": "function hexStringToByteArray(hexString) {\n    if (hexString.length % 2 !== 0) {\n        throw \"Must have an even number of hex digits to convert to bytes\";\n    }/* w w w.  jav  a2 s .  c o  m*/\n    var numBytes = hexString.length / 2;\n    var byteArray = new Uint8Array(numBytes);\n    for (var i=0; i<numBytes; i++) {\n        byteArray[i] = parseInt(hexString.substr(i*2, 2), 16);\n    }\n    return byteArray;\n}\n\nvar uplink_payload = msg.payload[0];\nvar byte_arr = hexStringToByteArray(msg.payload[0].pdu);\nvar isPresent = {};\nvar tags={\n            dev_id: uplink_payload.metadata,\n            dev_eui: uplink_payload.devEui,\n            network: 'senet',\n            f_port: '' + uplink_payload[\"port\"],\n            ack: uplink_payload.ack,\n            devClass: uplink_payload.devClass,\n};\nvar fields={};\n\n(byte_arr[0] & 1<<7)!= 0?isPresent['temp']=true:false;\n(byte_arr[0] & 1<<6)!= 0?isPresent['gps']=true:false;\n(byte_arr[0] & 1<<3)!= 0?isPresent['up_cnt']=true:false;\n(byte_arr[0] & 1<<2)!= 0?isPresent['dn_cnt']=true:false;\n(byte_arr[0] & 1<<1)!= 0?isPresent['batt']=true:false;\n(byte_arr[0] & 1<<0)!= 0?isPresent['rssi&snr']=true:false;\n\nvar idx=1; // 0 is status\n\nif(isPresent['temp']){idx++;} //skip temp\nif(isPresent['gps_lat']){\n    var lat_d = byte_arr[idx++];\n    var lat_m = byte_arr[idx++];\n    var lat_s = byte_arr[idx++];\n    lat_s = 1000*lat_s + 10*(byte_arr[idx]>>4);\n    var sign_lat = (byte_arr[idx] & 1)==1?-1:1; //{S: 1, N: 0}\n    fields['lat']= sign_lat*(lat_d+(lat_m/60)+(lat_s/3600));\n}\nif(isPresent['gps_lng']){\n    var lng_d = byte_arr[idx++];\n    var lng_m = byte_arr[idx++];\n    var lng_s = byte_arr[idx++];\n    lng_s = 1000*lng_s + 10*(byte_arr[idx]>>4);\n    var sign_lng = (byte_arr[idx++] & 1)==1?-1:1; //{W: 1, E: 0}\n    fields['lng']= sign_lng*(lng_d+(lng_m/60)+(lng_s/60000));\n}\nif(isPresent['gps_quality']){idx++;} //skip\nif(isPresent['up_cnt']){fields['up_cnt']=byte_arr[idx++];}\nif(isPresent['dn_cnt']){fields['dn_cnt']=byte_arr[idx++];}\nif(isPresent['batt']){idx+=2;} //skip\nif(isPresent['rssi&snr']){\n    fields['pdu_rssi']=byte_arr[idx++];\n    fields['pdu_snr']=byte_arr[idx++];\n}\n\nfields['senet_rssi']=uplink_payload['rssi'];\nfields['senet_snr']=uplink_payload['snr'];\n\nmsg.payload = [\n    {\n        measurement: 'adeunis-ftd',\n        fields,\n        tags,\n        timestamp: Date.now()\n    }\n];\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 650,
    "y": 620,
    "wires": [
      []
    ]
  },
  {
    "id": "607329a05527673e",
    "type": "function",
    "z": "41b751a153893032",
    "name": "get Adeunis payload",
    "func": "if (msg.payload[0].metadata.includes('adeunis')){\n    return msg;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 380,
    "y": 560,
    "wires": [
      [
        "803cc8330d8623f0"
      ]
    ]
  },
  {
    "id": "30662419219d1881",
    "type": "debug",
    "z": "41b751a153893032",
    "name": "debug 12",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1720,
    "y": 580,
    "wires": []
  },
  {
    "id": "b5b0482507bf7652",
    "type": "debug",
    "z": "41b751a153893032",
    "name": "debug 14",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 1480,
    "y": 860,
    "wires": []
  },
  {
    "id": "9d426a811d93c8f9",
    "type": "debug",
    "z": "41b751a153893032",
    "name": "debug 15",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 800,
    "y": 280,
    "wires": []
  },
  {
    "id": "eab83f30c71adc16",
    "type": "http request",
    "z": "41b751a153893032",
    "name": "",
    "method": "GET",
    "ret": "bin",
    "paytoqs": "ignore",
    "url": "https://jpg.nyctmc.org/cctv1286.jpg",
    "tls": "4ad802e2463acc54",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 1270,
    "y": 980,
    "wires": [
      [
        "b5b0482507bf7652"
      ]
    ]
  },
  {
    "id": "a42d57794b4a583c",
    "type": "inject",
    "z": "41b751a153893032",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 1000,
    "y": 1000,
    "wires": [
      [
        "eab83f30c71adc16"
      ]
    ]
  },
  {
    "id": "92cc7228ab7e22ce",
    "type": "inject",
    "z": "41b751a153893032",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "rejectUnauthorized",
        "v": "false",
        "vt": "bool"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 1100,
    "y": 700,
    "wires": [
      [
        "6fdf067fdc5f4ca6"
      ]
    ]
  },
  {
    "id": "6fdf067fdc5f4ca6",
    "type": "http request",
    "z": "41b751a153893032",
    "name": "",
    "method": "GET",
    "ret": "bin",
    "paytoqs": "ignore",
    "url": "https://jpg.nyctmc.org/cctv1286.jpg",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 1290,
    "y": 700,
    "wires": [
      [
        "337ff149a1b382ad"
      ]
    ]
  },
  {
    "id": "3174f03bedd6f49b",
    "type": "file",
    "z": "41b751a153893032",
    "name": "",
    "filename": "",
    "appendNewline": false,
    "createDir": false,
    "overwriteFile": "true",
    "encoding": "none",
    "x": 1690,
    "y": 700,
    "wires": [
      []
    ]
  },
  {
    "id": "91a3b46f1bebdf71",
    "type": "debug",
    "z": "41b751a153893032",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1910,
    "y": 500,
    "wires": []
  },
  {
    "id": "337ff149a1b382ad",
    "type": "function",
    "z": "41b751a153893032",
    "name": "",
    "func": "let now = new Date().toISOString().replace(/:/g, \"-\")\n//node.warn(now);\n\nmsg.filename = `c:\\\\users\\\\user\\\\desktop\\\\${now}.jpg`\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1490,
    "y": 700,
    "wires": [
      [
        "30662419219d1881"
      ]
    ]
  },
  {
    "id": "bfa859424e47e623",
    "type": "http in",
    "z": "50d1ba0730ca6bda",
    "name": "autocomplete",
    "url": "/autocomplete",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 130,
    "y": 260,
    "wires": [
      [
        "0fa27aace73d9c02"
      ]
    ]
  },
  {
    "id": "be1baf7d3ea7f061",
    "type": "http response",
    "z": "50d1ba0730ca6bda",
    "name": "",
    "statusCode": "",
    "headers": {},
    "x": 490,
    "y": 260,
    "wires": []
  },
  {
    "id": "0fa27aace73d9c02",
    "type": "function",
    "z": "50d1ba0730ca6bda",
    "name": "",
    "func": "msg.payload = {result: [\"fn-0012\", \"fn-0013\", \"fn-0014\"]};\nmsg.headers = {};\nmsg.headers['content-type'] = 'application/json';\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 320,
    "y": 260,
    "wires": [
      [
        "be1baf7d3ea7f061"
      ]
    ]
  },
  {
    "id": "d6bb4b2f52a40d19",
    "type": "mqtt in",
    "z": "f2fd5cb1b92ed0e0",
    "name": "floodnet-lab",
    "topic": "#",
    "qos": "0",
    "datatype": "json",
    "broker": "69a33419a2453bea",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 350,
    "y": 220,
    "wires": [
      [
        "bb27589a0d9bcb47",
        "c52a6fe4497da224"
      ]
    ]
  },
  {
    "id": "bb27589a0d9bcb47",
    "type": "function",
    "z": "f2fd5cb1b92ed0e0",
    "name": "Adeunis Payload processor",
    "func": "// 8F222F2F10464504\n// 50 40 41542007 35925137\n// 10 40 41541007 35925116\nif(msg.payload.downlink_nack !== undefined || msg.payload['uplink_message'] == undefined){\n    // Its a downlink, ignore but should probably log these at some point\n    return;\n}\n\n/* Filter on Adeunis messages */\nvar check_id = msg.payload.end_device_ids.device_id\nif (check_id!=\"adeunis-ftd\"){\n    return;\n}\n\nvar uplink_info = msg.payload['uplink_message'];\n\nif (typeof uplink_info == undefined)\n    return undefined;\n\nif (msg.payload['join_accept'])\n    return undefined;\n\n/* Meta data */\nvar dev_info = msg.payload['end_device_ids'];\nvar tags = {\n            dev_id: dev_info['device_id'],\n            app_name: dev_info['application_ids']['application_id'],\n            dev_addr: dev_info['dev_addr'],\n            dev_eui: dev_info['dev_eui'],\n            network: 'ttn',\n            bw_hz: '' + uplink_info['settings']['data_rate']['lora']['bandwidth'],\n            sf: '' + uplink_info['settings']['data_rate']['lora']['spreading_factor'],\n            coding_rate: uplink_info.settings.data_rate.lora.coding_rate,\n            f_port: '' + uplink_info['f_port']\n        };\n\nvar fields = {\n            lora_freq_hz: parseInt(uplink_info['settings']['frequency']) + 'i',\n            airtime_s: parseFloat(uplink_info['consumed_airtime'].replace('s', ''))\n            \n        };\n\nif (uplink_info['f_cnt'] + 'i' != 'undefinedi'){\n    fields.f_cnt = uplink_info['f_cnt'] + 'i'\n}\n\n// Sort gateway data by RSSI strength\ngw_object = uplink_info['rx_metadata'];\ngw_object_sorted = gw_object.sort(function(a, b) {\n    return parseFloat(b.rssi) - parseFloat(a.rssi);\n});\n\nconst gw_keys = Object.keys(gw_object_sorted);\n\nvar gw_cnt = 0;\nfor (var gw_key of gw_keys) {\n    if (gw_object_sorted[gw_key].hasOwnProperty('packet_broker'))\n        continue;\n    gw_cnt += 1;\n    tags['gw_' + gw_cnt + '_id'] = gw_object_sorted[gw_key]['gateway_ids']['gateway_id'];\n    fields['gw_' + gw_cnt + '_rssi_dbm'] = gw_object_sorted[gw_key]['rssi'] + 'i';\n    fields['gw_' + gw_cnt + '_snr_db'] = gw_object_sorted[gw_key]['snr'];\n    \n}\n\nraw_payload = uplink_info['frm_payload'];\n\nif (!raw_payload){\n    msg.app_type = undefined;\n    return msg;\n}\n\nvar binary_string = Buffer.from(raw_payload, \"base64\").toString('hex').match(/.{1,2}/g);\nvar len = binary_string.length;\nvar b = new Uint8Array(len);\nfor (var i = 0; i < len; i++) {\n    b[i] = parseInt(binary_string[i], 16);\n}\n\nconst buffer = Buffer.from(raw_payload, 'base64');\nconst buffString = buffer.toString('hex');\n\nconst msg_status = buffString.slice(0,1);\n\nvar gps_present = ((msg_status & (1<<5)) !=0)?1:0;\nvar f_cnt_present = ((msg_status & (1<<4)) !=0)?1:0;\nvar dwn_cnt_present = ((msg_status & (1<<3)) !=0)?1:0;\nvar rssi_snr_present = ((msg_status & (1<<1)) !=0)?1:0;\n\nif(gps_present){\n    var _deg = parseInt(buffString.slice(1,2));\n    var _min = parseInt(buffString.slice(2,3));\n    var _sec = parseInt(buffString.slice(3,5));\n    var lat_d = (_deg>>4)*10 + (_deg & 0x0F);\n    var lat_m = (_min>>4)*10 + (_min & 0x0F);\n    var lat_s = (_sec>>12)*1000 + (_sec>>8 & 0x0F)*100 + (_sec>>4 & 0x000F)*10;\n    var sign = (_sec & (1<<1))==1 ? -1 : 1;\n    var lat = sign*(lat_d+(lat_m/60)+(lat_s/3600));\n    fields.lat = lat;\n    \n    // Get longitude\n    _deg = parseInt(buffString.slice(5,6));\n    _min = parseInt(buffString.slice(6,7));\n    _sec = parseInt(buffString.slice(7,9));\n    var lng_d = (_deg>>4)*100 + (_deg & 0x0F)*10; lng_d+=(_min>>4)*1;\n    var lng_m = (_min & 0x0F)*10 + (_sec>>12)*1;\n    var lng_s = (_sec>>8 & 0x0F)*100 + (_sec>>4 & 0x000F)*10;\n    sign = (_sec & (1<<1))==1 ? -1 : 1;\n    var lng = sign*(lng_d+(lng_m/60)+(lng_s/3600));\n    fields.lng = lng;\n}\n\nmsg.app_name = dev_info['application_ids']['application_id'];\nmsg.dev_id = dev_info['device_id'];\nmsg.payload = { data:\n    [\n        fields,\n        tags,\n        b\n    ], 'app_type': 'nw-testing',\n    'ts': Date.parse(uplink_info['received_at'])\n};\n\nmsg.orig_payload = msg.payload;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 620,
    "y": 220,
    "wires": [
      [
        "a20a1bca463945a0",
        "c0d055558e724742"
      ]
    ]
  },
  {
    "id": "a20a1bca463945a0",
    "type": "debug",
    "z": "f2fd5cb1b92ed0e0",
    "name": "debug 22",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 780,
    "y": 160,
    "wires": []
  },
  {
    "id": "c0d055558e724742",
    "type": "influxdb batch",
    "z": "f2fd5cb1b92ed0e0",
    "influxdb": "4b9a03aed4358412",
    "precision": "",
    "retentionPolicy": "",
    "name": "Insert lab",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "floodnet",
    "bucket": "floodnet-lab",
    "x": 880,
    "y": 220,
    "wires": []
  },
  {
    "id": "c52a6fe4497da224",
    "type": "debug",
    "z": "f2fd5cb1b92ed0e0",
    "name": "debug 21",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 540,
    "y": 160,
    "wires": []
  },
  {
    "id": "2e4015a4f0bfc9f7",
    "type": "http in",
    "z": "f2fd5cb1b92ed0e0",
    "name": "Senet endpoint",
    "url": "/senet",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 360,
    "y": 360,
    "wires": [
      [
        "4086070939eb9e51",
        "44e470287836e2f4",
        "8290c0ba617c484f"
      ]
    ]
  },
  {
    "id": "4086070939eb9e51",
    "type": "http response",
    "z": "f2fd5cb1b92ed0e0",
    "name": "",
    "statusCode": "",
    "headers": {},
    "x": 510,
    "y": 440,
    "wires": []
  },
  {
    "id": "54d4fb151041a766",
    "type": "influxdb batch",
    "z": "f2fd5cb1b92ed0e0",
    "influxdb": "4b9a03aed4358412",
    "precision": "",
    "retentionPolicy": "",
    "name": "senet test bucket",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "floodnet",
    "bucket": "senet",
    "x": 850,
    "y": 360,
    "wires": []
  },
  {
    "id": "44e470287836e2f4",
    "type": "function",
    "z": "f2fd5cb1b92ed0e0",
    "name": "Glamos JSON processor",
    "func": "if (msg.payload[0].metadata.includes('adeunis')){\n    return msg;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 590,
    "y": 360,
    "wires": [
      [
        "30b5a2b27203864f"
      ]
    ]
  },
  {
    "id": "8290c0ba617c484f",
    "type": "debug",
    "z": "f2fd5cb1b92ed0e0",
    "name": "debug 23",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 540,
    "y": 300,
    "wires": []
  },
  {
    "id": "30b5a2b27203864f",
    "type": "debug",
    "z": "f2fd5cb1b92ed0e0",
    "name": "debug 24",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 780,
    "y": 300,
    "wires": []
  },
  {
    "id": "9bc3d2b53c6dfc53",
    "type": "mqtt in",
    "z": "884a48d5a0e9bd19",
    "g": "f462968d96dbebc6",
    "name": "floodnet-live",
    "topic": "#",
    "qos": "0",
    "datatype": "json",
    "broker": "8f7859036b247ff4",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 230,
    "y": 120,
    "wires": [
      [
        "f5f4b00fb97364b6"
      ]
    ]
  },
  {
    "id": "39fe476b6b1f2f11",
    "type": "mqtt in",
    "z": "884a48d5a0e9bd19",
    "g": "f462968d96dbebc6",
    "name": "floodnet-lab",
    "topic": "#",
    "qos": "0",
    "datatype": "json",
    "broker": "69a33419a2453bea",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 230,
    "y": 180,
    "wires": [
      [
        "f5f4b00fb97364b6"
      ]
    ]
  },
  {
    "id": "3fbb7a83ef7098e8",
    "type": "mqtt in",
    "z": "884a48d5a0e9bd19",
    "g": "f462968d96dbebc6",
    "name": "floodnet-test",
    "topic": "#",
    "qos": "0",
    "datatype": "json",
    "broker": "16f395ad93e105b8",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 230,
    "y": 240,
    "wires": [
      [
        "f5f4b00fb97364b6"
      ]
    ]
  },
  {
    "id": "2ff15761b3d184a4",
    "type": "mqtt in",
    "z": "884a48d5a0e9bd19",
    "g": "f462968d96dbebc6",
    "name": "nyu-production",
    "topic": "#",
    "qos": "2",
    "datatype": "json",
    "broker": "232424bf32c1529c",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 240,
    "y": 300,
    "wires": [
      [
        "b176583e46a3b2e7"
      ]
    ]
  },
  {
    "id": "b176583e46a3b2e7",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "f462968d96dbebc6",
    "name": "fn -> fs",
    "func": "function hexify(dev_id){\n    let dev_eui = \"\";\n    for (let n=0, l=dev_id.length; n<l; n++) \n         {\n    \t\tvar hex = Number(dev_id.charCodeAt(n)).toString(16);\n    \t\tdev_eui += hex;\n    \t }\n    return dev_eui;\n}\n\nlet mappings = [\n    [\"rg-00002\",\"rg-00002\"],\n    [\"fn-00004\",\"fs-00003\"],\n    [\"fn-00005\",\"fs-00004\"],\n    [\"fn-00012\",\"fs-00009\"],\n    [\"fs-00014\",\"fs-00011\"],\n    // [\"fs-00015\",\"fs-00012\"], // can be removed\n    [\"fs-00016\",\"fs-00013\"],\n    // [\"fs-00017\",\"fs-00014\"], // can be removed\n    [\"fs-00018\",\"fs-00015\"],\n    [\"fs-00019\",\"fs-00016\"],\n    [\"fs-00020\",\"fs-00017\"],\n    [\"fs-00022\",\"fs-00018\"],\n    // [\"fs-00023\",\"fs-00019\"], // can be removed\n    // [\"fs-00024\",\"fs-00020\"] // can be removed\n];\n\nlet old_dev_id = msg.payload.end_device_ids.device_id;\n\nfor (let n=0, l=mappings.length; n<l; n++) {\n    if(mappings[n][0] == old_dev_id){\n        new_dev_id = mappings[n][1];\n        msg.payload.end_device_ids.device_id = new_dev_id;\n        msg.payload.end_device_ids.dev_eui = hexify(new_dev_id);\n        msg.payload.end_device_ids.application_ids.application_id = 'floodnet-live';\n        break;\n    }\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 420,
    "y": 300,
    "wires": [
      [
        "f5f4b00fb97364b6"
      ]
    ]
  },
  {
    "id": "f5f4b00fb97364b6",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "f462968d96dbebc6",
    "name": "---",
    "func": "return msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 410,
    "y": 240,
    "wires": [
      [
        "1c5d44bb9051e829"
      ]
    ]
  },
  {
    "id": "1c5d44bb9051e829",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "f462968d96dbebc6",
    "name": "TTN Parser",
    "func": "if(msg.payload.downlink_nack !== undefined || msg.payload.uplink_message == undefined){\n    // Its a downlink, ignore but should probably log these at some point\n    return;\n}\n\nconst { uplink_message: uplink_info, end_device_ids: dev_info, join_accept } = msg.payload;\nif(!uplink_info || join_accept) return;\n\nconst raw_msg = uplink_info.frm_payload;\nvar b = null;\n\nif (raw_msg){\n    const binary_string = Buffer.from(raw_msg, \"base64\").toString('hex').match(/.{1,2}/g);\n    b = new Uint8Array(binary_string.length);\n    for (var i = 0; i < binary_string.length; i++) {\n        b[i] = parseInt(binary_string[i], 16);\n    }\n}\n\n// Sort gateway data by RSSI strength\nconst lora_gateway_signal_data = (\n    uplink_info.rx_metadata\n        .filter(x => !x.hasOwnProperty('packet_broker'))\n        .sort((a, b) => parseFloat(b.rssi) - parseFloat(a.rssi))\n        .map(d => ({ \n            gw_id: d.gateway_ids.gateway_id,  \n            gw_rssi_dbm: d.rssi,\n            gw_snr_db: d.snr,\n        })\n    )\n)\n\nreturn {\n    ...msg,\n\n    app_name: dev_info.application_ids.application_id,\n    app_type: raw_msg && (\n        dev_info.device_id === \"eui-03a26db322380301\" ? \n            \"sg\" : \n            dev_info.device_id.slice(0, 2)\n    ),\n    timestamp: Date.parse(uplink_info.received_at),\n    \n    dev_addr: dev_info.dev_addr,\n    dev_eui: dev_info.dev_eui,\n    dev_id: dev_info.device_id,\n\n    b,\n    error_flag: b && b[0],\n\n    payload: {\n        // lora signal data\n        lora_transmissions_data: {\n            airtime_ms: Math.round(\n                parseFloat(uplink_info.consumed_airtime.replace('s', '')) * 1000    \n            ),\n            f_cnt: uplink_info.f_cnt,\n            lora_freq_hz: parseInt(uplink_info.settings.frequency),\n            ...lora_gateway_signal_data?.[0],\n            sf: '' + uplink_info.settings.data_rate.lora.spreading_factor,\n            f_port: '' + uplink_info.f_port,\n            bw_hz: '' + uplink_info.settings.data_rate.lora.bandwidth,\n            coding_rate: uplink_info.settings.data_rate.lora.coding_rate,\n            network: 'ttn',\n        },\n\n        lora_gateway_signal_data,\n    }\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 590,
    "y": 240,
    "wires": [
      [
        "5bbdb458560051ce",
        "3dd9b900f21d120f"
      ]
    ]
  },
  {
    "id": "d467987369115eb8",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "flood sensor decode",
    "func": "const { payload, b, night_median, error_flag } = msg;\n\nconst table_name = 'depth_data';\npayload[table_name] = payload[table_name] || {};\nconst data = payload[table_name];\ndata['error_flag'] = error_flag;\n\nconst sensor_table_name = 'lora_sensor_data';\npayload[sensor_table_name] = payload[sensor_table_name] || {};\nconst sensordata = payload[sensor_table_name];\n\nconst weather_table_name = 'weather_data';\npayload[weather_table_name] = payload[weather_table_name] || {};\nconst weatherdata = payload[weather_table_name];\n\n// Converting Error Flag bits\ndata['error_flag'] = '' + b[0] % 2;\n// battery -> mV\nsensordata['batt_mv'] = ((b[2] << 8) | b[1]);\n// distance\ndistance = (b[4] << 8) | b[3];\ndata['dist_mm'] = distance;\n\n// extra fields\nif (b.length > 5){\n    // temperature\n    weatherdata['temp_c'] = ((b[6] & 0x80 ? 0xFFFF<<16 : 0) | b[6]<<8 | b[5]) / 100;\n    // pressure\n    weatherdata['pres_mb'] = ((((b[10]<<24) | (b[9]<<16)) | (b[8]<<8)) | b[7]) / 100;\n    // altitude\n    weatherdata['alt_m'] = ((b[12] << 8) | b[11]) / 100;\n    // humidity\n    weatherdata['humid_percen'] = ((b[14] << 8) | b[13]) / 100;\n}\n\n// convert distance to depth\nif(night_median !== undefined) {\n    let depth = night_median - distance;\n    data['depth_raw_mm'] = depth;\n\n    // process depth\n    if (depth <= 10){\n        depth = 0;\n        data['depth_filt_mm'] = 'night_median';\n    }\n    if(depth > night_median) {\n        depth = undefined;\n        data['depth_filt_mm'] = 'night_median';\n    }\n\n    data['depth_filt_mm'] = depth;\n    data['depth_proc_mm'] = depth;\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 760,
    "y": 500,
    "wires": [
      [
        "6adae992fa59bc5e",
        "abcf03a9d076fa07"
      ]
    ]
  },
  {
    "id": "64aee1367461a493",
    "type": "switch",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "sensor type",
    "property": "app_type",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "fs",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "ts",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "rg",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "sg",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "undefined",
        "vt": "jsonata"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 5,
    "x": 450,
    "y": 600,
    "wires": [
      [
        "d467987369115eb8",
        "5cd12833cfddaa24"
      ],
      [
        "e4659d9c4f1b9041",
        "d39d67f31d57fd21"
      ],
      [
        "5817b03984e756db",
        "293369d48d6a5ea4"
      ],
      [
        "37340486b357d0c3",
        "778ca656b7965c11"
      ],
      [
        "b5cb7e639d01255b"
      ]
    ]
  },
  {
    "id": "5817b03984e756db",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "gw rain gauge decode",
    "func": "const table_name = 'depth_bucket_data';\nconst { payload, b, error_flag } = msg;\npayload[table_name] = payload[table_name] || {}\nconst data = payload[table_name];\ndata['error_flag'] = error_flag;\n\ndata['acc_mm'] = Math.round((b[0]|(b[1]<<8)|(b[2]<<16)|(b[3]<<32))/100);\ndata['event_acc_mm'] = Math.round((b[4]|(b[5]<<8)|(b[6]<<16)|(b[7]<<32))/100);\ndata['total_acc_mm'] = Math.round((b[8]|(b[9]<<8)|(b[10]<<16)|(b[11]<<32))/100);\ndata['r_int_hr_mm'] = Math.round((b[12]|(b[13]<<8)|(b[14]<<16)|(b[15]<<32))/100);\ndata['acc_unit'] = String.fromCharCode(b[16]) == 'm' ? 'mm' : 'in';\nif (b.length > 17){\n    data['bucket_acc_mm_min'] = (b[17]|(b[18]<<8))/1000;\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 760,
    "y": 700,
    "wires": [
      [
        "50ea9931cb42a103"
      ]
    ]
  },
  {
    "id": "b5cb7e639d01255b",
    "type": "debug",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "unrecognized",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 440,
    "y": 660,
    "wires": []
  },
  {
    "id": "e4659d9c4f1b9041",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "tidal sensor decode",
    "func": "const { payload, b, error_flag } = msg;\n\nconst table_name = 'tidal_data';\npayload[table_name] = payload[table_name] || {};\nconst data = payload[table_name];\ndata['error_flag'] = error_flag;\n\nconst sensor_table_name = 'lora_sensor_data';\npayload[sensor_table_name] = payload[sensor_table_name] || {};\nconst sensordata = payload[sensor_table_name];\n\nconst weather_table_name = 'weather_data';\npayload[weather_table_name] = payload[weather_table_name] || {};\nconst weatherdata = payload[weather_table_name];\n\n\n// Converting Error Flag bits\ndata['error_flag'] = '' + b[0] % 2;\n// battery -> mV\nsensordata['batt_mv'] = ((b[2] << 8) | b[1]);\n// distance\ndistance = (b[4] << 8) | b[3];\ndata['dist_mm'] = distance;\n\nif (b.length > 5){\n    // temperature\n    weatherdata['temp_c'] = ((b[6] & 0x80 ? 0xFFFF<<16 : 0) | b[6]<<8 | b[5]) / 100;\n    // pressure\n    weatherdata['pres_mb'] = ((((b[10]<<24) | (b[9]<<16)) | (b[8]<<8)) | b[7]) / 100;\n    // altitude\n    weatherdata['alt_m'] = ((b[12] << 8) | b[11]) / 100;\n    // humidity\n    weatherdata['humid_percen'] = ((b[14] << 8) | b[13]) / 100;\n}\n\n// depth\n// TODO: use global var to store manually inserted MLLW value using NR GUI\n// var night_median = global.get(tags.dev_id + '.night_median');\n// if (night_median !== undefined){\n//     data['depth_mm'] = night_median - distance;\n// }\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 750,
    "y": 600,
    "wires": [
      [
        "50ea9931cb42a103"
      ]
    ]
  },
  {
    "id": "6adae992fa59bc5e",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "Filters \ud83c\udf08",
    "func": "// add as different field name\n// msg.payload[0].fields.depth_proc2_mm=msg.payload[0].fields.depth_proc_mm;\nconst devid = msg.dev_id;\nconst fbank = flow.get('getFilter')(devid)\nif(msg.historicalData && msg.historicalDataIndex === 0) {\n    fbank.clear();\n}\n\n// Filters applied!\nconst msgs = fbank.filter(msg)\n\n// for(let m of msgs) {\n//     const dist2 = m.payload.depth_data.depth_proc_mm;\n//     const dist = m.payload.depth_data.depth_filt_mm;\n//     m.payload.depth_data.depth_proc_dist_mm=((dist||0) - (dist2||0))\n// }\n\nreturn [ msgs ];",
    "outputs": 1,
    "noerr": 0,
    "initialize": "class Filter {\n    constructor({ name, depthField='depth_proc_mm', maxMins=6, nHistory=0, isRaining=null }={}) {\n        this.name = name;\n        this.state = {};\n\n        this.maxMs = maxMins*60*1000;\n        this.depthField = depthField;\n        this._isRaining = isRaining;\n        this.state.buffer = new Deque(nHistory+1);\n    }\n    clear() {\n        this.state.buffer.length = 0;\n    }\n    isRaining(t) {\n        return this._isRaining ? this._isRaining(t) : null;\n    }\n    isInvalid(msg, t) {\n        // check if the time difference between points is very large\n        // if they are, we're less confident about the filter rules\n        let [m1, d1, t1] = this.state.buffer[this.state.buffer.length-2];\n        let invalid = this.maxMs && (t - t1) > this.maxMs;\n        if(invalid) {\n            // if it's not raining we can afford to be a bit more \n            // lenient with the filters.\n            const rain = this.isRaining(t);\n            invalid = invalid && rain; // only invalid if raining too\n            this.log(\n                rain ?\n                `blip invalid because of time difference ${(t - t1)/1000/60}min > ${this.maxMs/1000/60}min and it's raining` :\n                `blip large time difference ${(t - t1)/1000/60}min > ${this.maxMs/1000/60}min but it is not raining`)\n            this.setReason(msg, rain ? `?${this.name}:cancelled-rain-time-diff` : `?${this.name}:no-rain-time-diff`)\n        }\n        return invalid;\n    }\n\n    \n    log(...args) { \n        node.warn(...args) \n    }\n    unpack(msg) {\n        const {payload: {depth_data}, timestamp} = msg;\n        let depth = depth_data[this.depthField];\n        depth = depth == null ? 0 : parseInt(depth);\n        // if(isNaN(depth)) {\n        //     this.log(`${this.name}: bad depth value ${fields[this.depthField]}`);\n        //     depth = 0;\n        // }\n        return [depth, parseFloat(timestamp)];\n    }\n    override(msg, depth, reason=null) {\n        msg.payload.depth_data[this.depthField] = depth;\n        reason && this.setReason(msg, reason);\n        return msg;\n    }\n    setReason(msg, reason) {\n        let prevReason = msg.payload.depth_data.depth_filt_stages_applied || '';\n        msg.payload.depth_data.depth_filt_stages_applied = prevReason + '|' + reason;\n        return msg;\n    }\n}\n\n\nclass RangeFilter extends Filter {\n    constructor({ height=null, noiseFloor=10, name='range' }={}) {\n        super({ name });\n        this.height = height;\n        this.noiseFloor = noiseFloor;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        const night_median = msg.night_median;\n        // values below this are likely just noise\n        if(depth > 0 && depth < this.noiseFloor) this.override(msg, 0, 'range:noise-floor');\n        // values above this are not possible\n        if(this.height && depth > this.height) this.override(msg, null, 'range:max-height');\n        // values above this are not possible\n        if(night_median && depth > night_median) this.override(msg, null, 'range:night-median');\n        return [msg];\n    }\n}\n\n\nclass GradFilter extends Filter {\n    constructor({ inchmin=10, spotty_coverage_height_ratio=0.05, name='gradient' }={}) {\n        super({ name, nHistory: 1 });\n        this.min_mmps = inchmin * 25.4 / 60 / 1000;\n        this.spotty_coverage_height_ratio = spotty_coverage_height_ratio\n    }\n    clear() { \n        super.clear();\n        this.state.filtering = false;\n        this.state.true_last_depth = null;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        this.state.buffer.push([msg, depth, t]);\n        if(this.state.buffer.length == 1) return [msg];\n\n        // get the rate of change from the last point\n        const [m1, d1, t1] = this.state.buffer[0];\n        if(Math.abs(t - t1) < 100) return [msg];\n        const dddt = (depth-d1) / Math.max(1, t - t1);\n        // check that the change in depth isn't too fast/improbable\n        if (\n            dddt > this.min_mmps || \n            this.filtering && \n            this.state.true_last_depth && \n            Math.abs(depth - this.state.true_last_depth) / this.state.true_last_depth \n                < this.spotty_coverage_height_ratio\n        ) {\n            this.log(`gradient filtered ${d1} to ${depth}mm \u2206d/\u2206t=${dddt}mm/s`);\n            this.override(msg, d1, 'gradient');\n            this.state.buffer[this.state.buffer.length - 1][1] = d1;\n        }\n        else {\n            this.state.filtering = false;\n        }\n        this.state.true_last_depth = depth;\n        return [msg];\n    }\n}\n\n\nclass BlipFilter extends Filter {\n    constructor({ maxMins=6, blipMinDist=2, blipRatio=0.1, downwardBlips=false, isRaining=null, name='blip' }) {\n        super({ name, maxMins, isRaining, nHistory: 2 });\n        this.blipMinDist = blipMinDist;\n        this.blipRatio = blipRatio;\n        this.downwardBlips = downwardBlips;\n        this.clear();\n    }\n    clear() { \n        super.clear();\n        this.state.holding = false;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        this.state.buffer.push([msg, depth, t]);\n        if(this.state.buffer.length == 1) return [msg];\n\n        if(this.state.holding) {\n            let [[m1,d1,t1], [m2,d2,t2], [m3,d3,t3]] = this.state.buffer;\n            // If the blip jump is greater than some threshold and then it goes\n            // back down to close to the same value, set it as the average of the \n            // first and third values.\n            const baseDist = Math.abs(d1 - d3);\n            let blipDist = d2 - d1;\n            blipDist = this.downwardBlips ? Math.abs(blipDist) : blipDist;\n            if (\n                (blipDist > this.blipMinDist) && \n                (baseDist / blipDist < this.blipRatio) && \n                !this.isInvalid(msg, t)\n            ) {\n                this.log(`blip filtered ${[d1, d2, d3]}`);\n                this.override(m2, (d1+d3)/2, this.name);\n            }\n            // blips are only held for one value\n            this.state.holding = false;\n            return [m2, msg];\n        }\n\n        // check if it jumps up above the blip threshold\n        let dm1 = this.state.buffer[this.state.buffer.length-2][1];\n        if(depth - dm1 > this.blipMinDist) {\n            this.state.holding = true;\n            this.log(`blip hold ${dm1} ${depth}`);\n            return [];\n        }\n\n        return [msg];\n    }\n}\n\nclass BoxFilter extends Filter {\n    constructor({ boxRatio=0.05, maxMins=6, isRaining=null, name='box' }) {\n        super({ name, maxMins, isRaining, nHistory: 2 });\n        this.boxRatio = boxRatio;\n        this.state.initialBox = null;\n        this.state.boxStart = null;\n        this.clear();\n    }\n    clear() { \n        super.clear();\n        this.boxDiff = 0;\n        this.state.holding = false;\n        this.state.filtering = false;\n        this.state.initialBox = null;\n        this.state.boxStart = null;\n    }\n    filter(msg) {\n        let [depth, t] = this.unpack(msg);\n        if(isNaN(depth)) return [msg];\n        this.state.buffer.push([msg, depth, t])\n        if(this.state.buffer.length == 1) return [msg];\n\n        let [m2, d2, t2] = this.state.buffer[this.state.buffer.length-2];\n        if(this.state.filtering) {\n            // get the change between the last point\n            const dd = depth-d2;\n            // add it to the total box delta\n            this.state.boxDiff += dd;\n            // the the box conditions are met, squash it\n            if(\n                Math.abs(dd / this.state.boxJump) < this.boxRatio && \n                Math.abs(this.state.boxDiff / this.state.boxJump) < this.boxRatio  && \n                !this.isInvalid(t)\n            ) {\n                // hulk squash\n                this.log(`box filter ${this.state.initialBox} ... ${[d2, depth]} ${Math.abs(this.state.boxDiff)} / ${this.state.boxJump} > ${this.boxRatio}`);\n                if(this.holding) {\n                    this.override(m2, 0, this.name);\n                }\n                this.override(msg, 0, this.name);\n            } else {\n                // otherwise stop filtering\n                this.log(`box hold released ${this.state.initialBox} ... ${[d2, depth]} - ${(t-this.state.boxStart)/1000/60}mins`);\n                this.state.filtering = false;\n            }\n        } else {\n            // check if box conditions are met\n            if(d2 === 0 && depth > 0) {\n                this.log(`box hold ${[d2,  depth]}`);\n                this.state.boxDiff = 0;\n                this.state.holding = true;\n                this.state.filtering = true;\n                this.state.initialBox = [d2,  depth];\n                this.state.boxStart = t;\n                this.state.boxJump = depth - d2;\n                return [];\n            }\n        }\n\n        // if we are holding a value, make sure to send it\n        if(this.state.holding) {\n            this.state.holding = false;\n            return [m2, msg];\n        }\n\n        return [msg];\n    }\n}\n\n\nclass FilterBank {\n    constructor(filters) {\n        this.filters = filters;\n    }\n    filter(...msgs) {\n        return this.filters.reduce((msgs, f) => (\n            msgs.reduce((outputted, msg) => [...outputted, ...f.filter(msg)], [])\n        ), msgs);\n    }\n    clear() {\n        for(let f of this.filters) f.clear();\n    }\n}\n\n\nclass Deque extends Array {\n    constructor(maxsize) {\n        super();\n        this.maxsize = maxsize;\n    }\n    push(x) {\n      super.push(x);\n      while(this.length > this.maxsize) {\n        this.shift();\n      }\n    }\n}\n\nconst buildFBank = (opts={}) => {\n    const isRaining = (t) => {\n        const rain = global.get('rainQueue');\n        if(!rain || t < rain[0][1]) return false;\n        return rain && rain.anyRain();\n    }\n    return new FilterBank([\n        new RangeFilter({ ...opts }),\n        new GradFilter({ ...opts }),\n        new BlipFilter({ isRaining, ...opts }),\n        new BoxFilter({ isRaining, ...opts }),\n        new BlipFilter({ isRaining, ...opts}),\n    ]);\n}\n\nconst oldFbanks = flow.get('filterBanks') || {};\nconst fbanks = {};\nfor(let k in oldFbanks) {\n    fbanks[k] = buildFBank();\n    for(let i in fbanks[k].filters) {\n        const f=fbanks[k].filters[i];\n        const fOld=oldFbanks[k].filters[i];\n        f.state = {...f.state, ...fOld.state};\n    }\n}\nflow.set('filterBanks', fbanks);\n\nflow.set('getFilter', (devid, opts={}) => {\n    if(!fbanks[devid]) fbanks[devid] = buildFBank(opts);\n    return fbanks[devid];\n});",
    "finalize": "",
    "libs": [],
    "x": 940,
    "y": 520,
    "wires": [
      [
        "e60b543ebe263d3f",
        "1c757055c91f8935",
        "96e9dcdc4a2903e4"
      ]
    ]
  },
  {
    "id": "0a29de6456b38fde",
    "type": "switch",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "Config Mode",
    "property": "error_flag",
    "propertyType": "msg",
    "rules": [
      {
        "t": "neq",
        "v": "255",
        "vt": "num"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 230,
    "y": 600,
    "wires": [
      [
        "64aee1367461a493"
      ],
      [
        "3657d76dcc1e88c4"
      ]
    ]
  },
  {
    "id": "3657d76dcc1e88c4",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "config mode decode",
    "func": "const table_name = 'config_mode_data';\nconst { payload, b } = msg;\npayload[table_name] = payload[table_name] || {};\nconst data = payload[table_name];\n\nconst STATES = {\n    s: \"Sensing\",\n    x: \"CFG Update\",\n    r: \"Reset\",\n}\n\n// Payload is Sensor cfg update\n/*\nCFG update uplink Format:\n| Error Flag  |   sensor_sleep   |    sensor_agg     |   sensor_meas_delta     | sensor_reading_count   |    sensor_state   |    fw_ver       |\n|    255 (FF) |     2 bytes      |      1 byte       |          2 bytes        |          1 byte        |        1 byte     |    6 bytes      |\n\nSensor State:\n|  Start  |   Stop  |  Reset  |\n|   's'   |   'x'   |   'r'   |\n*/\n// Duty cycle\ndata.sensor_sleep_ms = ((b[2]<< 8) | b[1]) * 1000;    \n// Sensor Mode\ndata.sensor_agg = b[3];\n// Sensor Sampling Rate\ndata.sensor_meas_delta_ms = (b[5] << 8) | b[4];\n// Sensor number of readings per measurement\ndata.sensor_reading_count = b[6];\n// Sensor State\ndata.sensor_state = STATES[String.fromCharCode(b[7].toString())];    \n// Firmware Version\nlet major = b[8].toString();\nlet minor = b[9].toString();\nlet patch = b[10].toString();\ndata.fw_ver = \"v\".concat(major,\".\",minor,\".\",patch);\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 460,
    "y": 920,
    "wires": [
      [
        "edae1419b5229ed7",
        "dd2a17305b62987a"
      ]
    ]
  },
  {
    "id": "50ea9931cb42a103",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "---",
    "func": "return msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1010,
    "y": 840,
    "wires": [
      [
        "0dca511fed6d8a5a",
        "040ad2c88b16741f"
      ]
    ]
  },
  {
    "id": "37340486b357d0c3",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "gw solar decode",
    "func": "const table_name = 'solar_data';\nconst { payload, b, error_flag } = msg;\npayload[table_name] = payload[table_name] || {};\nconst data = payload[table_name];\ndata['error_flag'] = error_flag;\n\nconst sensor_table_name = 'lora_sensor_data';\npayload[sensor_table_name] = payload[sensor_table_name] || {};\nconst sensordata = payload[sensor_table_name];\n\nsensordata['batt_mv'] = ((b[1] << 8) | b[0]);\ndata['current_ma'] = ((b[3] << 8) | b[2]);\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 750,
    "y": 800,
    "wires": [
      [
        "50ea9931cb42a103"
      ]
    ]
  },
  {
    "id": "e389034fdc680f86",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "387e62e846db79d0",
    "name": "Fieldkit POST",
    "func": "msg.headers = {};\nmsg.method = \"POST\";\nmsg.url = 'https://api.fieldkit.org/ttn/webhook?token=33af8a9e936d2ec4c217de125ccfc4b9';\nmsg.headers[\"Content-Type\"]=\"application/json\";\n\nif (msg.payload[0].measurement != \"flood-sensor\"){\n    return undefined;\n}\n\nmsg.payload[0].fields.dist_mm = parseInt(msg.payload[0].fields.dist_mm);\nmsg.payload[0].fields.lora_freq_hz = parseInt(msg.payload[0].fields.lora_freq_hz);\nmsg.payload[0].fields.f_cnt = parseInt(msg.payload[0].fields.f_cnt);\nmsg.payload[0].fields.depth_mm = parseInt(msg.payload[0].fields.depth_mm);\nmsg.payload[0].fields.depth_raw_mm = parseInt(msg.payload[0].fields.depth_raw_mm);\nmsg.payload[0].fields.depth_filt_mm = parseInt(msg.payload[0].fields.depth_filt_mm);\nmsg.payload[0].fields.depth_proc_mm = parseInt(msg.payload[0].fields.depth_proc_mm);\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1560,
    "y": 480,
    "wires": [
      [
        "ca21428bdad7582b"
      ]
    ]
  },
  {
    "id": "ca21428bdad7582b",
    "type": "http request",
    "z": "884a48d5a0e9bd19",
    "g": "387e62e846db79d0",
    "name": "",
    "method": "use",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 1730,
    "y": 480,
    "wires": [
      [
        "6e39030ce2cadb5e"
      ]
    ]
  },
  {
    "id": "6e39030ce2cadb5e",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "387e62e846db79d0",
    "name": "HTTP Status",
    "func": "if(msg.statusCode >= 200 && msg.statusCode < 300){\n    msg.response_fail = false;\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1890,
    "y": 480,
    "wires": [
      []
    ]
  },
  {
    "id": "f4119c7e8f910d33",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "387e62e846db79d0",
    "name": "Prepare insert",
    "func": "return msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1380,
    "y": 480,
    "wires": [
      [
        "e389034fdc680f86"
      ]
    ]
  },
  {
    "id": "dddbf0e01423f8fa",
    "type": "postgresql",
    "z": "884a48d5a0e9bd19",
    "g": "40aef3d94983c233",
    "name": "",
    "query": "SELECT \n    pg_size_pretty(before_compression_total_bytes) as \"before compression\",\n    pg_size_pretty(after_compression_total_bytes) as \"after compression\"\nFROM hypertable_compression_stats('measurements');",
    "postgreSQLConfig": "ec8702db3a5c2dc7",
    "split": false,
    "rowsPerMsg": 1,
    "outputs": 1,
    "x": 1570,
    "y": 840,
    "wires": [
      [
        "e174b27b30d98b03"
      ]
    ]
  },
  {
    "id": "e174b27b30d98b03",
    "type": "debug",
    "z": "884a48d5a0e9bd19",
    "g": "40aef3d94983c233",
    "name": "debug 18",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1750,
    "y": 840,
    "wires": []
  },
  {
    "id": "6f7bad6310a72c9e",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "40aef3d94983c233",
    "name": "Prepare insert",
    "func": "return msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1370,
    "y": 840,
    "wires": [
      [
        "dddbf0e01423f8fa"
      ]
    ]
  },
  {
    "id": "2d278aabda8957dc",
    "type": "postgresql",
    "z": "884a48d5a0e9bd19",
    "g": "262c4f8632065040",
    "name": "",
    "query": "SELECT s.dev_id, j.deployment_id, j.median_height_mm\nFROM sensors s\nLEFT JOIN LATERAL (\n\tSELECT *\n     FROM deployments d\n     WHERE d.dev_id = s.dev_id\n\t AND d.date_down IS NULL\n     ORDER BY d.date_deployed DESC LIMIT 1\n) j ON true\nWHERE s.dev_id = '{{{ msg.dev_id }}}'",
    "postgreSQLConfig": "ec8702db3a5c2dc7",
    "split": false,
    "rowsPerMsg": 1,
    "outputs": 1,
    "x": 870,
    "y": 200,
    "wires": [
      [
        "3596f5efeaa637bf"
      ]
    ]
  },
  {
    "id": "5bbdb458560051ce",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "262c4f8632065040",
    "name": "Prepare query",
    "func": "msg.orig_payload = msg.payload;\nreturn msg;\n// https://stackoverflow.com/questions/24042359/how-to-join-only-one-row-in-joined-table-with-postgres",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 860,
    "y": 80,
    "wires": [
      [
        "bc502be75595dbb4"
      ]
    ]
  },
  {
    "id": "3596f5efeaa637bf",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "262c4f8632065040",
    "name": "update meta",
    "func": "const { \n    dev_id, deployment_id, median_height_mm\n} = msg.payload?.[0] || {};\n\nreturn {\n    ...msg,\n    payload: msg.orig_payload,\n    deployment_id: deployment_id || undefined,\n    night_median: median_height_mm,\n    common_table_data: {\n        time: msg.time,\n        deployment_id,\n        night_median: median_height_mm,\n    },\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 870,
    "y": 260,
    "wires": [
      [
        "54270a1d03ac8262",
        "22b3f2d7c1becf54",
        "5b185b42ad1cb6a4",
        "0a29de6456b38fde"
      ]
    ]
  },
  {
    "id": "54270a1d03ac8262",
    "type": "debug",
    "z": "884a48d5a0e9bd19",
    "g": "262c4f8632065040",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "deployment_id",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1130,
    "y": 80,
    "wires": []
  },
  {
    "id": "3dd9b900f21d120f",
    "type": "debug",
    "z": "884a48d5a0e9bd19",
    "g": "f462968d96dbebc6",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "dev_id",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 610,
    "y": 280,
    "wires": []
  },
  {
    "id": "0dca511fed6d8a5a",
    "type": "debug",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "",
    "active": false,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "app_name",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1060,
    "y": 880,
    "wires": []
  },
  {
    "id": "edae1419b5229ed7",
    "type": "debug",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "true",
    "targetType": "full",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 510,
    "y": 880,
    "wires": []
  },
  {
    "id": "e60b543ebe263d3f",
    "type": "debug",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "depth filters",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "msg.payload.depth_data.depth_filt_mm \t& \" | \" & \tmsg.payload.depth_data.depth_proc_mm\t& \" | \" & \tmsg.payload.depth_data.depth_filt_stages_applied",
    "targetType": "jsonata",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1110,
    "y": 460,
    "wires": []
  },
  {
    "id": "5cd12833cfddaa24",
    "type": "debug",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "deployment_id",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 750,
    "y": 540,
    "wires": []
  },
  {
    "id": "d39d67f31d57fd21",
    "type": "debug",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "deployment_id",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 750,
    "y": 640,
    "wires": []
  },
  {
    "id": "293369d48d6a5ea4",
    "type": "debug",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "deployment_id",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 750,
    "y": 740,
    "wires": []
  },
  {
    "id": "778ca656b7965c11",
    "type": "debug",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "deployment_id",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 750,
    "y": 840,
    "wires": []
  },
  {
    "id": "dd2a17305b62987a",
    "type": "debug",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "deployment_id",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 470,
    "y": 960,
    "wires": []
  },
  {
    "id": "abcf03a9d076fa07",
    "type": "debug",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "depth filters",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "msg.payload.depth_data.depth_filt_mm \t& \" | \" & \tmsg.payload.depth_data.depth_proc_mm\t& \" | \" & \tmsg.payload.depth_data.depth_filt_stages_applied",
    "targetType": "jsonata",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 950,
    "y": 460,
    "wires": []
  },
  {
    "id": "1c757055c91f8935",
    "type": "switch",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "nonzero",
    "property": "payload.depth_data.depth_proc_mm",
    "propertyType": "msg",
    "rules": [
      {
        "t": "null"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 1100,
    "y": 520,
    "wires": [
      [
        "4903bab99db32591"
      ],
      []
    ]
  },
  {
    "id": "4903bab99db32591",
    "type": "debug",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "nonzero",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "true",
    "targetType": "full",
    "statusVal": "deployment_id",
    "statusType": "msg",
    "x": 1120,
    "y": 560,
    "wires": []
  },
  {
    "id": "22b3f2d7c1becf54",
    "type": "switch",
    "z": "884a48d5a0e9bd19",
    "g": "262c4f8632065040",
    "name": "no depid",
    "property": "deployment_id",
    "propertyType": "msg",
    "rules": [
      {
        "t": "null"
      },
      {
        "t": "else"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 1100,
    "y": 200,
    "wires": [
      [
        "3201044a929ff3d8"
      ],
      []
    ]
  },
  {
    "id": "3201044a929ff3d8",
    "type": "debug",
    "z": "884a48d5a0e9bd19",
    "g": "262c4f8632065040",
    "name": "dev_id",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "dev_id & \" | \" & app_name",
    "targetType": "jsonata",
    "statusVal": "dev_id",
    "statusType": "auto",
    "x": 1330,
    "y": 80,
    "wires": []
  },
  {
    "id": "5b185b42ad1cb6a4",
    "type": "debug",
    "z": "884a48d5a0e9bd19",
    "g": "262c4f8632065040",
    "name": "dev_id",
    "active": true,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "dev_id & \" | \" & app_name",
    "targetType": "jsonata",
    "statusVal": "dev_id",
    "statusType": "auto",
    "x": 1090,
    "y": 140,
    "wires": []
  },
  {
    "id": "9cdd702ebcc3f775",
    "type": "postgresql",
    "z": "884a48d5a0e9bd19",
    "g": "a18e44a4e8d519d0",
    "name": "",
    "query": "",
    "postgreSQLConfig": "ec8702db3a5c2dc7",
    "split": false,
    "rowsPerMsg": 1,
    "outputs": 1,
    "x": 1570,
    "y": 660,
    "wires": [
      []
    ]
  },
  {
    "id": "a5d0b357c855bdca",
    "type": "debug",
    "z": "884a48d5a0e9bd19",
    "g": "a18e44a4e8d519d0",
    "name": "debug 17",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1740,
    "y": 660,
    "wires": []
  },
  {
    "id": "040ad2c88b16741f",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "a18e44a4e8d519d0",
    "name": "Prepare insert",
    "func": "const { \n    payload: tables,\n    timestamp, dev_id, deployment_id, app_name, error_flag\n    \n} = msg;\n\n// const mustache = (d, c, i) => `{{{ msg.data[${i}][\"${c}\"] }}}`\n// // const N = x => x === undefined ? x : \"NULL\"\n// // const literal = (d, c, i) => N(d?.[c])\n\n// const sqlInsertObject = ({ table, schema, data, formatValue=mustache }) => {\n//     if(!data || !table) return;\n//     const columns = Object.keys(data.reduce((d, o) => ({...o, ...d}), {}));\n//     const values = data.map((d, i) => \n//         `\\n(${columns.map(c => formatValue(d, c, i)).join(', ')})`\n//     ).join(', ');\n//     return (\n//         `INSERT INTO ${schema || 'public'}.${table} (${columns}) VALUES ${values};`\n//     )\n// }\n\nconst sqlInsertObject = ({ table, schema, data }) => {\n    if(!data || !table) return;\n    const columns = Object.keys(data.reduce((d, o) => ({...o, ...d}), {}));\n    let j = 1;\n    let params = []\n    const values = data.map((d, i) => \n        `\\n(${columns.map(c => {\n            params.push(d[c]);\n            return `$${j++}`;\n        }).join(', ')})`\n    ).join(', ');\n    const query = `INSERT INTO ${schema || 'public'}.${table} (${columns}) VALUES ${values};`\n    return [query, params]\n}\n\nlet queries = [];\n\nfor(let name in tables) {\n    let t = tables[name];\n    t = Array.isArray(t) ? t : [t];\n    let data = t.map(d => ({ \n        dev_id, deployment_id,\n        time: new Date(timestamp).toISOString(),\n        ...d, \n    }))\n    \n    let [query, params] = sqlInsertObject({ \n        table: name,\n        schema: app_name.split('-').pop(),\n        data\n    })\n    if (params.length === 0) continue;\n    queries.push({ query, params });//, data\n}\n\n\n\nreturn [ queries ];",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1370,
    "y": 660,
    "wires": [
      [
        "9cdd702ebcc3f775"
      ]
    ]
  },
  {
    "id": "bc502be75595dbb4",
    "type": "postgresql",
    "z": "884a48d5a0e9bd19",
    "g": "262c4f8632065040",
    "name": "",
    "query": "INSERT INTO sensors(dev_id)\nSELECT '{{{ msg.dev_id }}}'\nWHERE NOT EXISTS \n    (SELECT dev_id \n     FROM sensors\n     WHERE dev_id = '{{{ msg.dev_id }}}')",
    "postgreSQLConfig": "ec8702db3a5c2dc7",
    "split": false,
    "rowsPerMsg": 1,
    "outputs": 1,
    "x": 850,
    "y": 140,
    "wires": [
      [
        "2d278aabda8957dc"
      ]
    ]
  },
  {
    "id": "0c650f4ca03b2c2d",
    "type": "file",
    "z": "884a48d5a0e9bd19",
    "name": "",
    "filename": "model.onnx",
    "filenameType": "str",
    "appendNewline": false,
    "createDir": true,
    "overwriteFile": "true",
    "encoding": "none",
    "x": 1610,
    "y": 220,
    "wires": [
      []
    ]
  },
  {
    "id": "a349d2df37a9fdba",
    "type": "http request",
    "z": "884a48d5a0e9bd19",
    "name": "",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://docs.google.com/uc?export=download&id=1r0ro3xvIlLK1vp0WMXe1YgrcXTw2hFFz",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 1610,
    "y": 180,
    "wires": [
      [
        "8fb12471973247cd",
        "0c650f4ca03b2c2d"
      ]
    ]
  },
  {
    "id": "1d9de43404fcbe5a",
    "type": "inject",
    "z": "884a48d5a0e9bd19",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "\"\"",
    "payloadType": "str",
    "x": 1590,
    "y": 140,
    "wires": [
      [
        "a349d2df37a9fdba"
      ]
    ]
  },
  {
    "id": "8fb12471973247cd",
    "type": "debug",
    "z": "884a48d5a0e9bd19",
    "name": "debug 36",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1660,
    "y": 260,
    "wires": []
  },
  {
    "id": "96e9dcdc4a2903e4",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "window",
    "func": "const devid = msg.dev_id;\nconst depth = msg.payload.depth_data.depth_proc_mm;\n\nlet q = flow.get('getMLQueue')(devid);\nq.push(depth)\n\n// node.warn([devid, q.length, depth])\n\nreturn {\n    ...msg,\n    tables: msg.payload,\n    payload: JSON.stringify(Array.from(q))\n};",
    "outputs": 1,
    "noerr": 0,
    "initialize": "// Code added here will be run once\n// whenever the node is started.\nclass Deque extends Array {\n    constructor(maxsize) {\n        super();\n        this.maxsize = maxsize;\n    }\n    push(x) {\n      super.push(x);\n      while(this.length > this.maxsize) {\n        this.shift();\n      }\n    }\n}\n\n\nconst qs = flow.get('mlQueues') || {};\nflow.set('mlQueues', qs);\nflow.set('getMLQueue', (devid, maxsize=128) => {\n    if(!qs[devid]) qs[devid] = new Deque(maxsize);\n    const q = qs[devid];\n    q.maxsize = maxsize;\n    return q;\n});",
    "finalize": "",
    "libs": [],
    "x": 960,
    "y": 580,
    "wires": [
      [
        "5f9f40ecd95922d1"
      ]
    ]
  },
  {
    "id": "5f9f40ecd95922d1",
    "type": "http request",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "ML \ud83e\udd84",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://fn.dep.floodlabs.nyc/detect-flood",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [
      {
        "keyType": "other",
        "keyValue": "Content-Type",
        "valueType": "other",
        "valueValue": "application/json"
      }
    ],
    "x": 970,
    "y": 620,
    "wires": [
      [
        "f318171a0ab559ee"
      ]
    ]
  },
  {
    "id": "f318171a0ab559ee",
    "type": "function",
    "z": "884a48d5a0e9bd19",
    "g": "70bad69eb790cf80",
    "name": "add ml to table",
    "func": "const detections = msg.payload;\nmsg.payload = msg.tables;\n\nif(Array.isArray(detections)) {\n    const mean = x => x.reduce((a, b) => a + b) / x.length;\n    let last = detections.slice(Math.max(detections.length - 4, 0))\n    msg.payload.depth_data.flood_detected = mean(last)\n}\nelse {\n    node.warn(detections);\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1020,
    "y": 660,
    "wires": [
      [
        "50ea9931cb42a103"
      ]
    ]
  },
  {
    "id": "f8ff52b3.09f5",
    "type": "inject",
    "z": "a9b09a3b.5bb118",
    "name": "_init_ Dashboard",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 120,
    "y": 40,
    "wires": [
      []
    ]
  },
  {
    "id": "24d6aa76.d2d536",
    "type": "http request",
    "z": "a9b09a3b.5bb118",
    "name": "GET dev-ids from app",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "bearer",
    "senderr": false,
    "headers": [],
    "x": 1220,
    "y": 440,
    "wires": [
      [
        "7f939913.9de6f8"
      ]
    ]
  },
  {
    "id": "7f939913.9de6f8",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "list dev-ids",
    "func": "var options = []\nfor (let i=0;i<msg.payload.end_devices.length;i++){\n    options.push(msg.payload.end_devices[i].ids.device_id);\n}\nmsg.payload = options;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 1450,
    "y": 320,
    "wires": [
      [
        "909ac869.1c5628"
      ]
    ]
  },
  {
    "id": "3e726b29.717d54",
    "type": "ui_dropdown",
    "z": "a9b09a3b.5bb118",
    "name": "Select DEV_ID",
    "label": "",
    "tooltip": "",
    "place": "Select DEV_ID",
    "group": "9f8b0ea4.a9dba",
    "order": 2,
    "width": 0,
    "height": 0,
    "passthru": false,
    "multiple": false,
    "options": [
      {
        "label": "",
        "value": "",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "msg.payload",
    "topicType": "msg",
    "x": 1520,
    "y": 400,
    "wires": [
      [
        "dc7cea46.07b848"
      ]
    ]
  },
  {
    "id": "909ac869.1c5628",
    "type": "change",
    "z": "a9b09a3b.5bb118",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "options",
        "pt": "msg",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1480,
    "y": 360,
    "wires": [
      [
        "3e726b29.717d54"
      ]
    ]
  },
  {
    "id": "5f6ac933.325f78",
    "type": "ui_ui_control",
    "z": "a9b09a3b.5bb118",
    "name": "UI Control",
    "events": "connect",
    "x": 90,
    "y": 120,
    "wires": [
      [
        "c660a7a1.1c8b38",
        "b69a436a.dd85e"
      ]
    ]
  },
  {
    "id": "c660a7a1.1c8b38",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "Trigger",
    "func": "if (msg.payload == \"connect\"){\n  msg = {};\n  var d = new Date();\n  msg.payload = d.getTime();\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 330,
    "y": 120,
    "wires": [
      [
        "49f9fc7f.a5c434"
      ]
    ]
  },
  {
    "id": "49f9fc7f.a5c434",
    "type": "http request",
    "z": "a9b09a3b.5bb118",
    "name": "GET appEUIs",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://nam1.cloud.thethings.network/api/v3/as/applications?field_mask=name",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "bearer",
    "senderr": false,
    "headers": [],
    "x": 520,
    "y": 120,
    "wires": [
      [
        "f23c3997.99b3e8",
        "f05801cc2d666c63"
      ]
    ]
  },
  {
    "id": "f23c3997.99b3e8",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "list appEUIs",
    "func": "var options = []\nfor (let i=0;i<msg.payload.applications.length;i++){\n    options.push(msg.payload.applications[i].ids.application_id);\n}\nmsg.payload = options;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 550,
    "y": 160,
    "wires": [
      [
        "82217603.b53e98"
      ]
    ]
  },
  {
    "id": "7186be60.7fb45",
    "type": "ui_dropdown",
    "z": "a9b09a3b.5bb118",
    "name": "Select From AppEUI",
    "label": "",
    "tooltip": "",
    "place": "Select From AppEUI",
    "group": "9f8b0ea4.a9dba",
    "order": 1,
    "width": 0,
    "height": 0,
    "passthru": false,
    "multiple": false,
    "options": [
      {
        "label": "",
        "value": "",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "msg.payload",
    "topicType": "msg",
    "x": 860,
    "y": 320,
    "wires": [
      [
        "a4023adc.ab4658",
        "c14e079e.eaf328"
      ]
    ]
  },
  {
    "id": "82217603.b53e98",
    "type": "change",
    "z": "a9b09a3b.5bb118",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "options",
        "pt": "msg",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 620,
    "y": 200,
    "wires": [
      [
        "7186be60.7fb45",
        "ee70b279.40ff6"
      ]
    ]
  },
  {
    "id": "a4023adc.ab4658",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "prepare GET Query",
    "func": "if (msg.payload){\n  msg.getQuery = \"https://eu1.cloud.thethings.network/api/v3/applications/\" + msg.payload + \"/devices?field_mask=name\"\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 1130,
    "y": 360,
    "wires": [
      [
        "cbe882f3.d955d"
      ]
    ]
  },
  {
    "id": "cbe882f3.d955d",
    "type": "change",
    "z": "a9b09a3b.5bb118",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "url",
        "pt": "msg",
        "to": "getQuery",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1150,
    "y": 400,
    "wires": [
      [
        "24d6aa76.d2d536"
      ]
    ]
  },
  {
    "id": "ee70b279.40ff6",
    "type": "ui_dropdown",
    "z": "a9b09a3b.5bb118",
    "name": "Select To AppEUI",
    "label": "",
    "tooltip": "",
    "place": "Select To AppEUI",
    "group": "ce726dd8.7cde2",
    "order": 1,
    "width": 0,
    "height": 0,
    "passthru": true,
    "multiple": false,
    "options": [
      {
        "label": "",
        "value": "",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "msg.payload",
    "topicType": "msg",
    "x": 850,
    "y": 80,
    "wires": [
      [
        "a8fb9c41.4be4a",
        "af8a7a74.a37018"
      ]
    ]
  },
  {
    "id": "d77365bd.5f8b38",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "downlink message to old device",
    "func": "var to_app = {};\nvar from_app = {};\nvar dev_id = {};\n\nif (global.get(\"from-app-eui\") === null){\n    msg.errorMsg += \"No From App selected!\\n\";\n} else if (global.get(\"to-app-eui\") === null) {\n    msg.errorMsg += \"No To App selected!\\n\";\n} else if (global.get(\"selected-dev-id\") === null) {\n    msg.errorMsg += \"No DevID selected!\\n\";\n} else {\n    msg.errorMsg = \"No errors.\";\n}\n\nvar dev_eui = msg.payload.ids.dev_eui;\nvar app_id = msg.payload.ids.join_eui;\nvar app_key = msg.payload.root_keys.app_key.key;\n\nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = 'https://nam1.cloud.thethings.network/api/v3/as/applications/' + global.get(\"from-app-eui\") + '/devices/' + global.get(\"selected-dev-id\") + '/down/replace';\n\nvar keys = \"41\" + app_id + dev_eui + app_key;\n\nvar keys_base64 = Buffer.from(keys, 'hex').toString('base64');\n\nmsg.headers[\"Content-Type\"]=\"application/json\";\n\nif (msg.key !== null){\n    msg.payload = {\"downlinks\":[{\"f_port\":1,\"frm_payload\":keys_base64}]};\n} else {\n    msg.errorMsg = \"Invalid key string. App change failed\";\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 370,
    "y": 380,
    "wires": [
      [
        "76d70b81.4074b4",
        "6a46842e.f4e22c",
        "9083cf0f.7efd7"
      ]
    ]
  },
  {
    "id": "dc7cea46.07b848",
    "type": "change",
    "z": "a9b09a3b.5bb118",
    "name": "fetch DEV_ID",
    "rules": [
      {
        "t": "set",
        "p": "selected-dev-id",
        "pt": "global",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1550,
    "y": 440,
    "wires": [
      []
    ]
  },
  {
    "id": "a8fb9c41.4be4a",
    "type": "change",
    "z": "a9b09a3b.5bb118",
    "name": "fetch to APP_EUI",
    "rules": [
      {
        "t": "set",
        "p": "to-app-eui",
        "pt": "global",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1070,
    "y": 40,
    "wires": [
      []
    ]
  },
  {
    "id": "c14e079e.eaf328",
    "type": "change",
    "z": "a9b09a3b.5bb118",
    "name": "fetch from APP_EUI",
    "rules": [
      {
        "t": "set",
        "p": "from-app-eui",
        "pt": "global",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1120,
    "y": 280,
    "wires": [
      []
    ]
  },
  {
    "id": "fbe1afdc.a8d1e",
    "type": "ui_button",
    "z": "a9b09a3b.5bb118",
    "name": "Confirm",
    "group": "41d23a0e.83e764",
    "order": 2,
    "width": 0,
    "height": 0,
    "passthru": false,
    "label": "Confirm",
    "tooltip": "",
    "color": "",
    "bgcolor": "",
    "icon": "",
    "payload": "",
    "payloadType": "date",
    "topic": "payload",
    "topicType": "msg",
    "x": 80,
    "y": 300,
    "wires": [
      [
        "8e665112.b8884"
      ]
    ]
  },
  {
    "id": "76d70b81.4074b4",
    "type": "ui_text",
    "z": "a9b09a3b.5bb118",
    "group": "41d23a0e.83e764",
    "order": 4,
    "width": 0,
    "height": 0,
    "name": "error message",
    "label": "<i>status: </i>",
    "format": "{{msg.errorMsg}}",
    "layout": "row-center",
    "x": 560,
    "y": 280,
    "wires": []
  },
  {
    "id": "6a46842e.f4e22c",
    "type": "http request",
    "z": "a9b09a3b.5bb118",
    "name": "Queue a Downlink message",
    "method": "use",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "bearer",
    "senderr": false,
    "headers": [],
    "x": 400,
    "y": 420,
    "wires": [
      []
    ]
  },
  {
    "id": "8e665112.b8884",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "get keys from To APP",
    "func": "var dev_eui = {};\nvar app_key = {};\nvar app_eui = {};\n\nif (global.get(\"from-app-eui\") === null){\n    msg.errorMsg += \"No From App selected!\\n\";\n} else if (global.get(\"to-app-eui\") === null) {\n    msg.errorMsg += \"No To App selected!\\n\";\n} else if (global.get(\"selected-dev-id\") === null) {\n    msg.errorMsg += \"No DevID selected!\\n\";\n} else {\n    msg.errorMsg = \"No errors.\";\n}\n\n\nmsg.headers = {};\nmsg.headers[\"Content-Type\"]=\"application/json\";\nmsg.method = \"GET\";\nmsg.url = \"https://nam1.cloud.thethings.network/api/v3/js/applications/\" + global.get(\"to-app-eui\") + \"/devices/\" + global.get(\"selected-dev-id-to\") + \"?field_mask=resets_join_nonces,network_server_address,application_server_address,net_id,application_server_id,application_server_kek_label,network_server_kek_label,claim_authentication_code,root_keys\";\n\nreturn msg;\n\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 280,
    "y": 300,
    "wires": [
      [
        "708df3af.ea203c"
      ]
    ]
  },
  {
    "id": "708df3af.ea203c",
    "type": "http request",
    "z": "a9b09a3b.5bb118",
    "name": "get keys",
    "method": "use",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "bearer",
    "senderr": false,
    "headers": [],
    "x": 280,
    "y": 340,
    "wires": [
      [
        "d77365bd.5f8b38"
      ]
    ]
  },
  {
    "id": "b69a436a.dd85e",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "clear error msg",
    "func": "msg.errorMsg = \"waiting...\";\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 360,
    "y": 220,
    "wires": [
      [
        "76d70b81.4074b4"
      ]
    ]
  },
  {
    "id": "2139095a.b98b36",
    "type": "http request",
    "z": "a9b09a3b.5bb118",
    "name": "GET dev-ids from app",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "bearer",
    "senderr": false,
    "headers": [],
    "x": 1800,
    "y": 1100,
    "wires": [
      [
        "b1ad5072.3354d",
        "e1b571fc.668b8"
      ]
    ]
  },
  {
    "id": "e1b571fc.668b8",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "list dev-ids",
    "func": "var options = []\nfor (let i=0;i<msg.payload.end_devices.length;i++){\n    options.push(msg.payload.end_devices[i].ids.device_id);\n}\nmsg.payload = options;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 2010,
    "y": 1100,
    "wires": [
      [
        "26d7204c.7b4d7"
      ]
    ]
  },
  {
    "id": "e2b34244.9c01f",
    "type": "ui_dropdown",
    "z": "a9b09a3b.5bb118",
    "name": "Select DEV_ID",
    "label": "",
    "tooltip": "",
    "place": "Select DEV_ID",
    "group": "2e8b4d74.d00942",
    "order": 3,
    "width": 0,
    "height": 0,
    "passthru": false,
    "multiple": false,
    "options": [
      {
        "label": "",
        "value": "",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "msg.payload",
    "topicType": "msg",
    "x": 2400,
    "y": 1100,
    "wires": [
      [
        "71d37ecb.62327",
        "6ee2c0cb.942a2",
        "475695c3.03b06c"
      ]
    ]
  },
  {
    "id": "26d7204c.7b4d7",
    "type": "change",
    "z": "a9b09a3b.5bb118",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "options",
        "pt": "msg",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 2200,
    "y": 1100,
    "wires": [
      [
        "e2b34244.9c01f"
      ]
    ]
  },
  {
    "id": "3c14e1f1.a5ae9e",
    "type": "ui_ui_control",
    "z": "a9b09a3b.5bb118",
    "name": "UI Control",
    "events": "connect",
    "x": 130,
    "y": 1000,
    "wires": [
      [
        "1d5fd610.1ad5da",
        "f79517f0.32e4a8",
        "8cc66112.bde9c",
        "64f619ba.74fd58"
      ]
    ]
  },
  {
    "id": "1d5fd610.1ad5da",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "Trigger",
    "func": "if (msg.payload == \"connect\"){\n  msg = {};\n  var d = new Date();\n  msg.payload = d.getTime();\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 310,
    "y": 1000,
    "wires": [
      [
        "c38bf1c5.be214"
      ]
    ]
  },
  {
    "id": "c38bf1c5.be214",
    "type": "http request",
    "z": "a9b09a3b.5bb118",
    "name": "GET appEUIs",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://nam1.cloud.thethings.network/api/v3/applications?field_mask=name",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "bearer",
    "senderr": false,
    "headers": [],
    "x": 500,
    "y": 1000,
    "wires": [
      [
        "2f4e2e51.5bab72",
        "a4541ef5.5c58a"
      ]
    ]
  },
  {
    "id": "a4541ef5.5c58a",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "list appEUIs",
    "func": "var options = []\nfor (let i=0;i<msg.payload.applications.length;i++){\n    options.push(msg.payload.applications[i].ids.application_id);\n}\nmsg.payload = options;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 730,
    "y": 1000,
    "wires": [
      [
        "27c55384.1372ac"
      ]
    ]
  },
  {
    "id": "420ca24c.64f0cc",
    "type": "ui_dropdown",
    "z": "a9b09a3b.5bb118",
    "name": "Select From AppEUI",
    "label": "",
    "tooltip": "",
    "place": "Select From AppEUI",
    "group": "2e8b4d74.d00942",
    "order": 1,
    "width": 0,
    "height": 0,
    "passthru": false,
    "multiple": false,
    "options": [
      {
        "label": "",
        "value": "",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "msg.payload",
    "topicType": "msg",
    "x": 1180,
    "y": 1000,
    "wires": [
      [
        "58ef0b01.0fced4",
        "7548a09c.0c23e",
        "c12bcdbc.73cca"
      ]
    ]
  },
  {
    "id": "27c55384.1372ac",
    "type": "change",
    "z": "a9b09a3b.5bb118",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "options",
        "pt": "msg",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 960,
    "y": 1000,
    "wires": [
      [
        "420ca24c.64f0cc"
      ]
    ]
  },
  {
    "id": "20ce028a.eeb54e",
    "type": "ui_text",
    "z": "a9b09a3b.5bb118",
    "group": "2e8b4d74.d00942",
    "order": 2,
    "width": 0,
    "height": 0,
    "name": "Loading icon",
    "label": "<i>status: </i>",
    "format": "{{msg.payload}}",
    "layout": "row-center",
    "x": 730,
    "y": 1120,
    "wires": []
  },
  {
    "id": "2f4e2e51.5bab72",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "clear Loading icon",
    "func": "msg.payload = \"Loaded.\";\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 510,
    "y": 1060,
    "wires": [
      [
        "20ce028a.eeb54e"
      ]
    ]
  },
  {
    "id": "f79517f0.32e4a8",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "init Loading icon",
    "func": "msg.payload = \"Loading....\";\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 500,
    "y": 1100,
    "wires": [
      [
        "20ce028a.eeb54e"
      ]
    ]
  },
  {
    "id": "58ef0b01.0fced4",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "prepare GET Query",
    "func": "if (msg.payload){\n  msg.getQuery = \"https://eu1.cloud.thethings.network/api/v3/applications/\" + msg.payload + \"/devices?field_mask=name\"\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 1390,
    "y": 1100,
    "wires": [
      [
        "b44e6ba8.f2db98"
      ]
    ]
  },
  {
    "id": "d1b09efd.c3faa",
    "type": "ui_text",
    "z": "a9b09a3b.5bb118",
    "group": "2e8b4d74.d00942",
    "order": 4,
    "width": 0,
    "height": 0,
    "name": "Loading icon",
    "label": "<i>status: </i>",
    "format": "{{msg.payload}}",
    "layout": "row-center",
    "x": 1670,
    "y": 1280,
    "wires": []
  },
  {
    "id": "b1ad5072.3354d",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "clear Loading icon",
    "func": "msg.payload = \"Loaded.\";\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 1870,
    "y": 1160,
    "wires": [
      [
        "d1b09efd.c3faa"
      ]
    ]
  },
  {
    "id": "b44e6ba8.f2db98",
    "type": "change",
    "z": "a9b09a3b.5bb118",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "url",
        "pt": "msg",
        "to": "getQuery",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1590,
    "y": 1100,
    "wires": [
      [
        "2139095a.b98b36"
      ]
    ]
  },
  {
    "id": "8cc66112.bde9c",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "clear Loading icon",
    "func": "msg.payload = \"waiting...\";\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 510,
    "y": 1140,
    "wires": [
      [
        "d1b09efd.c3faa"
      ]
    ]
  },
  {
    "id": "7548a09c.0c23e",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "init Loading icon",
    "func": "msg.payload = \"Loading....\";\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 1380,
    "y": 1160,
    "wires": [
      [
        "d1b09efd.c3faa"
      ]
    ]
  },
  {
    "id": "71d37ecb.62327",
    "type": "debug",
    "z": "a9b09a3b.5bb118",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 2550,
    "y": 1180,
    "wires": []
  },
  {
    "id": "6ee2c0cb.942a2",
    "type": "change",
    "z": "a9b09a3b.5bb118",
    "name": "fetch DEV_ID",
    "rules": [
      {
        "t": "set",
        "p": "dev-id",
        "pt": "global",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 2470,
    "y": 1020,
    "wires": [
      []
    ]
  },
  {
    "id": "c12bcdbc.73cca",
    "type": "change",
    "z": "a9b09a3b.5bb118",
    "name": "fetch APP_EUI",
    "rules": [
      {
        "t": "set",
        "p": "app-eui",
        "pt": "global",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1420,
    "y": 920,
    "wires": [
      []
    ]
  },
  {
    "id": "793171ae.7724a",
    "type": "ui_text",
    "z": "a9b09a3b.5bb118",
    "group": "2e8b4d74.d00942",
    "order": 8,
    "width": 0,
    "height": 0,
    "name": "error message",
    "label": "<i>status: </i>",
    "format": "{{msg.errorMsg}}",
    "layout": "row-center",
    "x": 840,
    "y": 1280,
    "wires": []
  },
  {
    "id": "64f619ba.74fd58",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "clear error msg",
    "func": "msg.errorMsg = \"waiting...\";\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 560,
    "y": 1280,
    "wires": [
      [
        "793171ae.7724a"
      ]
    ]
  },
  {
    "id": "475695c3.03b06c",
    "type": "ui_dropdown",
    "z": "a9b09a3b.5bb118",
    "name": "select control",
    "label": "",
    "tooltip": "",
    "place": "Select control",
    "group": "2e8b4d74.d00942",
    "order": 6,
    "width": 0,
    "height": 0,
    "passthru": true,
    "multiple": false,
    "options": [
      {
        "label": "Start sensing",
        "value": "start",
        "type": "str"
      },
      {
        "label": "Stop sensing",
        "value": "stop",
        "type": "str"
      },
      {
        "label": "Reset Sensor",
        "value": "reset",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "topic",
    "topicType": "msg",
    "x": 2720,
    "y": 980,
    "wires": [
      [
        "a4362be5.42ebf8"
      ]
    ]
  },
  {
    "id": "7e27a4e9.e8e0fc",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "downlink message",
    "func": "if (global.get(\"app-eui\") === null){\n    msg.errorMsg += \"No From App selected!\\n\";\n} else if (global.get(\"dev-id\") === null) {\n    msg.errorMsg += \"No DevID selected!\\n\";\n} else {\n    msg.errorMsg = \"No errors.\";\n}\n\nvar opt = global.get(\"control\");\n\nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = 'https://nam1.cloud.thethings.network/api/v3/as/applications/' + global.get(\"app-eui\") + '/devices/' + global.get(\"dev-id\") + '/down/replace';\n\n\nvar message;\n\nif (opt === \"start\"){\n    message =  \"4f7374617274\";\n} else if (opt === \"stop\") {\n    message = \"4f73746f700a\";\n} else if (opt === \"reset\") {\n    message = \"4f7265736574\";\n} else {\n    msg.errorMsg = \"Invalid selection\";\n}\n\nvar message_base64 = Buffer.from(message, 'hex').toString('base64');\n\nmsg.headers[\"Content-Type\"]=\"application/json\";\n\nif (message_base64 !== null){\n    msg.payload = {\"downlinks\":[{\"f_port\":1,\"frm_payload\":message_base64}]};\n} else {\n    msg.errorMsg = \"Invalid option. Sensor downlink failed\";\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 1230,
    "y": 1460,
    "wires": [
      [
        "997d8818.9fb5c8",
        "793171ae.7724a"
      ]
    ]
  },
  {
    "id": "eb46ffd4.c598c",
    "type": "ui_button",
    "z": "a9b09a3b.5bb118",
    "name": "Confirm",
    "group": "2e8b4d74.d00942",
    "order": 7,
    "width": 0,
    "height": 0,
    "passthru": false,
    "label": "Confirm",
    "tooltip": "",
    "color": "",
    "bgcolor": "",
    "icon": "",
    "payload": "",
    "payloadType": "date",
    "topic": "payload",
    "topicType": "msg",
    "x": 980,
    "y": 1540,
    "wires": [
      [
        "7e27a4e9.e8e0fc"
      ]
    ]
  },
  {
    "id": "997d8818.9fb5c8",
    "type": "http request",
    "z": "a9b09a3b.5bb118",
    "name": "Queue a Downlink message",
    "method": "use",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "bearer",
    "senderr": false,
    "headers": [],
    "x": 1560,
    "y": 1460,
    "wires": [
      [
        "435a7463.7f1aac"
      ]
    ]
  },
  {
    "id": "435a7463.7f1aac",
    "type": "debug",
    "z": "a9b09a3b.5bb118",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1650,
    "y": 1620,
    "wires": []
  },
  {
    "id": "a4362be5.42ebf8",
    "type": "change",
    "z": "a9b09a3b.5bb118",
    "name": "fetch control",
    "rules": [
      {
        "t": "set",
        "p": "control",
        "pt": "global",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 2850,
    "y": 900,
    "wires": [
      []
    ]
  },
  {
    "id": "70d64667.31b4e8",
    "type": "http request",
    "z": "a9b09a3b.5bb118",
    "name": "GET dev-ids from to app",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "bearer",
    "senderr": false,
    "headers": [],
    "x": 1250,
    "y": 180,
    "wires": [
      [
        "e3a46bb9.7507c8"
      ]
    ]
  },
  {
    "id": "e3a46bb9.7507c8",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "list dev-ids",
    "func": "var options = []\nfor (let i=0;i<msg.payload.end_devices.length;i++){\n    options.push(msg.payload.end_devices[i].ids.device_id);\n}\nmsg.payload = options;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 1450,
    "y": 60,
    "wires": [
      [
        "955360ec.795c5"
      ]
    ]
  },
  {
    "id": "f02d28.03a2c2d8",
    "type": "ui_dropdown",
    "z": "a9b09a3b.5bb118",
    "name": "Select DEV_ID to",
    "label": "",
    "tooltip": "",
    "place": "Select to -----> DEV_ID ",
    "group": "ce726dd8.7cde2",
    "order": 1,
    "width": 0,
    "height": 0,
    "passthru": false,
    "multiple": false,
    "options": [
      {
        "label": "",
        "value": "",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "msg.payload",
    "topicType": "msg",
    "x": 1570,
    "y": 140,
    "wires": [
      [
        "31815d3f.e26d12"
      ]
    ]
  },
  {
    "id": "955360ec.795c5",
    "type": "change",
    "z": "a9b09a3b.5bb118",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "options",
        "pt": "msg",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1500,
    "y": 100,
    "wires": [
      [
        "f02d28.03a2c2d8"
      ]
    ]
  },
  {
    "id": "af8a7a74.a37018",
    "type": "function",
    "z": "a9b09a3b.5bb118",
    "name": "prepare GET Query",
    "func": "msg.getQuery = \"https://eu1.cloud.thethings.network/api/v3/applications/\" + msg.payload + \"/devices?field_mask=name\"\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "x": 1110,
    "y": 100,
    "wires": [
      [
        "dc5b55cd.2848c8"
      ]
    ]
  },
  {
    "id": "dc5b55cd.2848c8",
    "type": "change",
    "z": "a9b09a3b.5bb118",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "url",
        "pt": "msg",
        "to": "getQuery",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1170,
    "y": 140,
    "wires": [
      [
        "70d64667.31b4e8"
      ]
    ]
  },
  {
    "id": "31815d3f.e26d12",
    "type": "change",
    "z": "a9b09a3b.5bb118",
    "name": "fetch to DEV_ID ",
    "rules": [
      {
        "t": "set",
        "p": "selected-dev-id-to",
        "pt": "global",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1600,
    "y": 180,
    "wires": [
      []
    ]
  },
  {
    "id": "9083cf0f.7efd7",
    "type": "debug",
    "z": "a9b09a3b.5bb118",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 670,
    "y": 400,
    "wires": []
  },
  {
    "id": "f05801cc2d666c63",
    "type": "debug",
    "z": "a9b09a3b.5bb118",
    "name": "",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 650,
    "y": 60,
    "wires": []
  }
]